{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1562675583663},{"_id":"themes/next/.all-contributorsrc","hash":"50392ce05ce8f4cb3a3ee6c65eeb05d3533c16b2","modified":1562675583663},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1562675583663},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1562675583663},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1562675583663},{"_id":"themes/next/.gitignore","hash":"b80cec1d5e6a73d1cec382aad8046d1352a1e963","modified":1562675583667},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1562675583668},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1562675583668},{"_id":"themes/next/README.md","hash":"bae0d85db8338f39f7fe9ba254d9026e7de51cf2","modified":1562675583668},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1562675583668},{"_id":"themes/next/bower.json","hash":"e6a80b9ed2d618d1cca5781952c67167a7cfac07","modified":1562675583669},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1562675583669},{"_id":"themes/next/_config.yml","hash":"45a500c688297432a792b61afd6258e7e2fd934f","modified":1562676481931},{"_id":"themes/next/package.json","hash":"5870ec2b6d2159a57d84c67bad0a535b76398d5a","modified":1562675583704},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1562675583674},{"_id":"source/404.md","hash":"504d38a6e0c9e4d9b41f3060c158a80c59c08844","modified":1554597413021},{"_id":"source/CNAME","hash":"6406488202004944a72fa1d62a18e1cb898f8fcd","modified":1554597413021},{"_id":"source/.DS_Store","hash":"049859c75d10ba09628b19f94d8fb82bcbfcd843","modified":1566218410419},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1562675583656},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1562675583658},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1562675554695},{"_id":"themes/next/.git/packed-refs","hash":"d182d65f44e21fc80c203999cd14dce32fbc151e","modified":1562675583654},{"_id":"themes/next/.git/index","hash":"eae7482c38d3c4502ed0429ceb5735141893f2e0","modified":1562676868409},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1562675583664},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"7ce6cdc8adcbfda68fcbcc54c8b9fd3434a37993","modified":1562675583664},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1562675583666},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1562675583666},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1562675583664},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1562675583666},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1562675583666},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1562675583666},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1562675583666},{"_id":"themes/next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1562675583666},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1562675583667},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1562675583667},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1562675583667},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1562675583667},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1562675583670},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1562675583670},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1562675583670},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1562675583670},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1562675583670},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1562675583670},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1562675583671},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1562675583670},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1562675583671},{"_id":"source/src/.empty","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554597413024},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1562675583685},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1562675583703},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1562675583703},{"_id":"themes/next/layout/index.swig","hash":"9b4733d037c360e8504645b1d6c6dd17817c9d7b","modified":1562675583703},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1562675583704},{"_id":"themes/next/layout/page.swig","hash":"29c64c7031aaf276d3d11cdf2e95025996fd6eed","modified":1562675583703},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1562675583704},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1562675583704},{"_id":"themes/next/languages/de.yml","hash":"88dcfa3e53cef1b7f858f98ca9f980179169ae4c","modified":1562675583674},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1562675583675},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1562675583675},{"_id":"themes/next/languages/es.yml","hash":"a5203c7bbae70bc40f2ee526f9e8105ca9be851e","modified":1562675583675},{"_id":"themes/next/languages/fa.yml","hash":"cc1f3a13e020e2cc666ddc57aaebc4c1ebd669d0","modified":1562675583675},{"_id":"themes/next/languages/hu.yml","hash":"3b4c10c86a228da70dc4b1a1784a6f942e186032","modified":1562675583675},{"_id":"themes/next/languages/fr.yml","hash":"c1e2e892c678920854e1f3df409118398523849e","modified":1562675583675},{"_id":"themes/next/languages/ja.yml","hash":"8f85a6500716191159f16c7f484ba61ddd16eeb6","modified":1562675583677},{"_id":"themes/next/languages/id.yml","hash":"3a9f4485e6801e0e6fae749133a52e3797760795","modified":1562675583676},{"_id":"themes/next/languages/it.yml","hash":"28ff9197a3d21e838e33bb026d8adb544320cb1a","modified":1562675583677},{"_id":"themes/next/languages/ko.yml","hash":"1df31bf037bcb6868a4bd60c49ff55eec5b8167f","modified":1562675583677},{"_id":"themes/next/languages/nl.yml","hash":"6f4a339ecc67a140f3f9c7bec369cbda6b45afd7","modified":1562675583678},{"_id":"themes/next/languages/pt-BR.yml","hash":"301a0535df5de7b585c7c9752053c41c6ef26f9b","modified":1562675583678},{"_id":"themes/next/languages/pt.yml","hash":"6d87701443e33a13574049e613f064f1eb250c95","modified":1562675583678},{"_id":"themes/next/languages/ru.yml","hash":"93872ac01074159566ee3e1738eea6e9216bab8e","modified":1562675583679},{"_id":"themes/next/languages/tr.yml","hash":"5489606e6c40c0b226a3414c8e5037aac965211d","modified":1562675583679},{"_id":"themes/next/languages/uk.yml","hash":"765ba405778f07d7ec3713606568852b04e1a862","modified":1562675583680},{"_id":"themes/next/languages/vi.yml","hash":"6a812db8606498980cd64f001e9ef2f50e124809","modified":1562675583681},{"_id":"themes/next/languages/zh-CN.yml","hash":"f311ad2cc2edba144764c36c0035b6ed0d356a53","modified":1562675583681},{"_id":"themes/next/languages/zh-HK.yml","hash":"7a5e47f561d4b6e132f7f3b09676afbf8520264e","modified":1562675583682},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1562675583705},{"_id":"themes/next/languages/zh-TW.yml","hash":"3f3674cac8f47a9a509a7557ea1557bbfbd027e8","modified":1562675583682},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1562675583705},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1562675583739},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1562675583739},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1562675583739},{"_id":"source/_dev/coercion.md","hash":"b747960759d57e3802bd88d0bbb9a1572b7c2f11","modified":1554597413022},{"_id":"source/_dev/draft-rich-text.md","hash":"296f07c9ff3268daee94dbe5de279d4e295445ae","modified":1554597413022},{"_id":"source/_dev/git.md","hash":"3db8928d53602643d90ee4608aa6d8cd55a0e6b7","modified":1554597413022},{"_id":"source/_dev/notes.md","hash":"43630d48ce46cb04d4623074c0b84b128877a121","modified":1554597413022},{"_id":"source/_posts/coercion.md","hash":"e41eb8b7073a8b2eb9ff9b183ae4a4a2f8456c3e","modified":1569241266391},{"_id":"source/_posts/draft-rich-text.md","hash":"d6efa06e5767fb3bba8d86a4c32137b855cbbf98","modified":1554597413023},{"_id":"source/_dev/notes.js","hash":"f5f983c44d9d26ac351d0413f136b981bca43f7a","modified":1614607419120},{"_id":"source/_posts/component-design.md","hash":"63b041d4c2d98182997f0ea3de38ca6902af32d1","modified":1561628370629},{"_id":"source/_posts/command-days.md","hash":"9e85d69054a050ba43655fbdd5c1a2cb0404effc","modified":1576047188730},{"_id":"source/_posts/mouse-string.md","hash":"dcc4125ee42428cb3eaaeb1b82c2526df8e7a0e9","modified":1554597413023},{"_id":"source/_posts/mouse-svg.md","hash":"e5305e3f802b41ac20545fbf52f20aa0bb68fb03","modified":1554597413023},{"_id":"source/_posts/projects.md","hash":"1d0c0ed1129fa6c05927701fd18b4e9b878d1b1f","modified":1567327731833},{"_id":"source/_posts/mobile-size-set.md","hash":"7242a371419eaf66abf93636b16c19df81d1b352","modified":1578042564113},{"_id":"source/_posts/trap.md","hash":"e47690004c5e9bdcbb2c6589cffc37d7d06d801b","modified":1559028778477},{"_id":"source/about/index.md","hash":"48f45692d1a2e3797c7c704e24e24940f611e1bd","modified":1554597413023},{"_id":"source/_posts/width-height.md","hash":"ee60f1ac8f1e3dcddf77146f723235d9d4317a07","modified":1576056316295},{"_id":"source/_posts/path-animation.md","hash":"e3687bc4e7c1c14a5cbcd14a40e3893e3d7ac865","modified":1566563590188},{"_id":"source/_posts/unicode.md","hash":"48307b2870583c6b1cd16d7fed74faefdb89ff77","modified":1558927673446},{"_id":"source/src/.DS_Store","hash":"7177d748fa8f57703ee4e8ce579a42fed1a1cf65","modified":1566218531226},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562675583726},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1562675554696},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1562675554695},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1562675554697},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1562675554696},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1562675554697},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1562675554698},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1562675554698},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1562675554696},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1562675554697},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1562675554697},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1562675554698},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1562675554694},{"_id":"themes/next/.git/logs/HEAD","hash":"0ed6cecf3c33279992c93aacd236727d1d14156f","modified":1562675583657},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1562675583665},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1562675583665},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1562675583665},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1562675583666},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1562675583671},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1562675583671},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1562675583671},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1562675583671},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1562675583672},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1562675583672},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1562675583673},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"650fcb9135b6f09d48e866c19e0dbccd831367f1","modified":1562675583673},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1562675583673},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1562675583673},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1562675583673},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1562675583674},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1562675583674},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1562675583684},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1562675583684},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1562675583685},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1562675583686},{"_id":"themes/next/layout/_partials/comments.swig","hash":"784356dd77fe96ea1bc4cb0008e2b40de71bf2f0","modified":1562675583687},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1562675583686},{"_id":"themes/next/layout/_macro/post.swig","hash":"7920866b88d2c6c2ad0e2e7201e58d37fb0d7cff","modified":1562675583686},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1562675583687},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1562675583687},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1562675583690},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1562675583690},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1562675583697},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1562675583698},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a7126355227236f9433615edfd89e86fd51ed676","modified":1562675583699},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1562675583700},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"aa0893cddc803bd3fd34ab78d7d003bd86be86b6","modified":1562675583698},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1562675583700},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1562675583700},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1562675583700},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1562675583701},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1562675583701},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1562675583701},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1562675583703},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1562675583693},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1562675583693},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1562675583693},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1562675583693},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1562675583695},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9cd491b8ff2dc9d6976cd9e89c4e56678e3bcefa","modified":1562675583695},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1562675583704},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1562675583704},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1562675583705},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1562675583705},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1562675583705},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1562675583706},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1562675583706},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1562675583706},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1562675583706},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1562675583706},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1562675583706},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1562675583706},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1562675583707},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1562675583707},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1562675583707},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1562675583726},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1562675583729},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1562675583729},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1562675583729},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1562675583730},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1562675583730},{"_id":"themes/next/source/js/motion.js","hash":"ca2965da47ba9fc5b0dde0a825c29e0817b965b9","modified":1562675583730},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1562675583730},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1562675583730},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1562675583731},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1562675583731},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1562675583726},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1562675583727},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1562675583726},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1562675583727},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1562675583727},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1562675583727},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1562675583727},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1562675583727},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1562675583728},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1562675583728},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1562675583728},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1562675583728},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1562675583728},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1562675583728},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1562675583729},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1562675583729},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1562675583729},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1562675583729},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562675583725},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562675583726},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562675583720},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562675583720},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562675583720},{"_id":"themes/next/.git/refs/heads/master","hash":"3ff711436292ce841c8ad40e5f65ce6087f357e5","modified":1562675583657},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1562675583685},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"9257da95bd032bb3bd1da670e302fd2c7d5610b6","modified":1562675583685},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1562675583688},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1562675583688},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"f537846ace6a1afdacf122848dd01a32ceb66006","modified":1562675583688},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1562675583689},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1562675583689},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1562675583689},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1562675583689},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1562675583689},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1562675583690},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1562675583690},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1562675583690},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1562675583691},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1562675583691},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"d9fe715fee716f78c7976c4e8838da71439ee0e0","modified":1562675583691},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1562675583691},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1562675583692},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1562675583692},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1562675583692},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1562675583692},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1562675583692},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1562675583695},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1562675583695},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1562675583695},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1562675583696},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1562675583696},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1562675583696},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1562675583696},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1562675583696},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1562675583696},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1562675583697},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"a09d2af2a8470555eeb265b0eb14dc678079e870","modified":1562675583697},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1562675583697},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1562675583697},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1562675583697},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1562675583699},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1562675583699},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1562675583698},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"074a995cd630f56fc4a3135173515c86f2cb34b6","modified":1562675583698},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1562675583699},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1a00b1b78c429721d6477c2d8f6f68f005285cc8","modified":1562675583698},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"53a59cba82cad49f15a90e1a18007aaac525bddd","modified":1562675583699},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1562675583698},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"40bab84a4a7a368fa31f0f8ce49af6ec3e5983c9","modified":1562675583699},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"15a4d60d3ecc59db2f23629477f8e7b8324981ed","modified":1562675583699},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1562675583701},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1562675583702},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1562675583703},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1562675583693},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1562675583694},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1562675583694},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1562675583694},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1562675583695},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1562675583725},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1562675583725},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1562675583725},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1562675583726},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1562675583719},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1562675583720},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1562675583720},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"ee7659e711f73984f38e459e1143a6cc368a1cee","modified":1562675583720},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1562675583731},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1562675583731},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1562675583731},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1562675583731},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1562675583732},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1562675583739},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1562675583738},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1562675583730},{"_id":"themes/next/source/js/schemes/muse.js","hash":"58d7ae45fbcc595d35722ebdf4fa877bcc6a6041","modified":1562675583730},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1562675583739},{"_id":"themes/next/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1562675583736},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0ed6cecf3c33279992c93aacd236727d1d14156f","modified":1562675583657},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1562675583655},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1562675583707},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1562675583708},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1562675583707},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1562675583708},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1562675583708},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"4741d642f9ed2eec9be23112f7a51645e77e41f3","modified":1562675583714},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1562675583712},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1562675583714},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1562675583719},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"773f6d791f938ff037783004369092991d7bcd31","modified":1562675583719},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1562675583718},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1562675583719},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1562675583719},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1562675583719},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1562675583719},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1562675583721},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1562675583720},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1562675583720},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1562675583721},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1562675583721},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"213f2178dc260a28cba4fef723827a6e707f91a3","modified":1562675583721},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"3948894201e6229a66bcf490e451f2481c8a99cb","modified":1562675583722},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1562675583722},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1562675583723},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1562675583723},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1562675583723},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"dfd7a9cf39a2135de4cf2f8651cac3fb333d028f","modified":1562675583724},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1562675583723},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1562675583724},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1562675583724},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"2f782305b1e1d19197a90f1e5e9167fd77749a8e","modified":1562675583725},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"6f427a43550f7b03c503106767fbcce1f18a4f78","modified":1562675583725},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44d834c231e2bb57851954d73e70f6995b5929e7","modified":1562675583725},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1562675583725},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1562675583732},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1562675583732},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1562675583732},{"_id":"themes/next/.git/objects/pack/pack-fa26f288879c37996e919a5bbf75f038841074a7.idx","hash":"26a43a990ec8506df477a2b0be698a42b80f05ad","modified":1562675583645},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0ed6cecf3c33279992c93aacd236727d1d14156f","modified":1562675583655},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1562675583735},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1562675583735},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1562675583708},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"352796ec0a0cbbdb45d2351711d136ae6112b757","modified":1562675583710},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1562675583710},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1562675583710},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1562675583709},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1562675583709},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1562675583709},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1562675583709},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1562675583709},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1562675583709},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1562675583710},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1562675583711},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"f2469ecf57eeb32f5ad0a26c7358e521383ac935","modified":1562675583711},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"e3124da5350d6c01f32ccd04134a686baa4fb30a","modified":1562675583711},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1562675583711},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"9df791fa842b16ae72ad2998ffc2f87fdf0b6a88","modified":1562675583711},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1562675583712},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1562675583716},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"c85df3ecc0b37095cac14114c308e5829c66b5a3","modified":1562675583716},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1562675583716},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1562675583716},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"ca7cd57bc346a3fda8097b2b49e6d943600912d2","modified":1562675583717},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1562675583717},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4b62818333d2463fe416fb3156ced12e7d60aafa","modified":1562675583717},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1562675583717},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1562675583717},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1562675583717},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"1156b11ac74d2d21b1b5047767b2a9edafc9182d","modified":1562675583718},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1562675583718},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1562675583718},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1562675583718},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1562675583718},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dd44d8ca93ad5d366a96d797a0a8b4f3b46f9a77","modified":1562675583718},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1562675583712},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8bffc9f7f4b20860a56160f0d1ba77062106f990","modified":1562675583712},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1562675583712},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1562675583712},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"df3c19fd447da6d4a807683345007a41338f9a04","modified":1562675583712},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1562675583712},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"67165cd8836e03c289162b96ef06f8b024afe9af","modified":1562675583713},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1562675583713},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1562675583713},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1562675583713},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1562675583713},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1562675583713},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1562675583713},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1562675583714},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1562675583714},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1562675583714},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1562675583714},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"3d55c8641a69449de7caf1ea2cf731973481daf5","modified":1562675583714},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1562675583715},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1562675583715},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1562675583715},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1562675583715},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1562675583715},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1562675583715},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1562675583715},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1562675583716},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1562675583722},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/_sidebar.styl","hash":"487dbb5b389620e7be2ce666531a7baa249d50a0","modified":1562675583724},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1562675583724},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1562675583738},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1562675583734},{"_id":"themes/next/.git/objects/pack/pack-fa26f288879c37996e919a5bbf75f038841074a7.pack","hash":"b92d6b132e37ef65ebc6494fa2498ecba8593072","modified":1562675583641},{"_id":"public/atom.xml","hash":"40cacd2b364ee0d6c615e47fafa058834d649652","modified":1619257772249},{"_id":"public/content.json","hash":"6f6e4c87bba849884cecf84a36d403cf2999be1b","modified":1619257772249},{"_id":"public/404.html","hash":"37ce50e8f11fc63881551ca3b52b9c3338ad53b5","modified":1619257772262},{"_id":"public/about/index.html","hash":"3c79ea22319844c6ef9d47d56bc9d21ee292a5f5","modified":1619257772262},{"_id":"public/2100/01/02/projects/index.html","hash":"3b7a6876640e5615646a50803c1ac1c7ed634045","modified":1619257772262},{"_id":"public/archives/page/2/index.html","hash":"9f9b3ade4d429881bdaecf35a8e37f0197d9acdc","modified":1619257772262},{"_id":"public/archives/2019/03/index.html","hash":"477808e8c667eefb42e5a011c5e3057c7ba9ab64","modified":1619257772262},{"_id":"public/archives/2019/05/index.html","hash":"05ce925123ff9119a25cbf8fce2121b264293518","modified":1619257772262},{"_id":"public/archives/2019/06/index.html","hash":"536a5ed0cd6f9a19cf023d627916c05eda56bcc9","modified":1619257772262},{"_id":"public/archives/2019/08/index.html","hash":"30852e7de7ec0ea8f9c1a17f2cd98087e9652008","modified":1619257772262},{"_id":"public/archives/2019/12/index.html","hash":"489aeb8e1addc7477158e34d8b654fc33e90861e","modified":1619257772262},{"_id":"public/archives/2020/index.html","hash":"e5f6253b8947f1fcb0157477884b09b3d98c8902","modified":1619257772262},{"_id":"public/archives/2020/01/index.html","hash":"30d0b4289f8455885944248ebd57d2fe7282cae2","modified":1619257772262},{"_id":"public/archives/2100/index.html","hash":"75cf82b937dd914ebd1a952c574d34c21be3f433","modified":1619257772262},{"_id":"public/archives/2100/01/index.html","hash":"b39ff7c3c16103d37a73ec1e03487d906245d94a","modified":1619257772263},{"_id":"public/categories/common/index.html","hash":"39c4ec5988d30cc45f7c5c07972314a8fa6f1872","modified":1619257772263},{"_id":"public/categories/javascript/index.html","hash":"5d1eae38cc5e96b19e13c562501175dacd43a586","modified":1619257772263},{"_id":"public/categories/项目/index.html","hash":"ea50f97646a34335a923128d792b90a940a39805","modified":1619257772263},{"_id":"public/categories/html/index.html","hash":"4e9195ca0e91daf619dd813184e64fb57786d418","modified":1619257772263},{"_id":"public/categories/css/index.html","hash":"218de8e546250de095e02063c0d91e9389e8da99","modified":1619257772263},{"_id":"public/categories/react/index.html","hash":"a8c2123d85124466b6fa508c7b22ed3ed40cf4a3","modified":1619257772263},{"_id":"public/tags/design/index.html","hash":"b8abaee1f1c1514f7352a3b8b4ed640f31b6179c","modified":1619257772263},{"_id":"public/tags/vue/index.html","hash":"3bfbd13fbb509c63078d0396aaff5f21e5f66dc6","modified":1619257772263},{"_id":"public/tags/react/index.html","hash":"b87dade8ab2caa620addf9caa187fc9c3cdaffc9","modified":1619257772263},{"_id":"public/tags/命令/index.html","hash":"f9aa41189dd3dbf969eca81eecc9660edc12cbf3","modified":1619257772263},{"_id":"public/tags/终端/index.html","hash":"cc2e769c8adb3d6d3b63e4accd84589c2f3025a5","modified":1619257772263},{"_id":"public/tags/javascript/index.html","hash":"01e94ed8bf4602cf35faffd817795731c46fe671","modified":1619257772263},{"_id":"public/tags/鼠标跟随/index.html","hash":"2b9fcc863c8886f90927607837feded032ab1599","modified":1619257772263},{"_id":"public/tags/鼠标/index.html","hash":"2292334c23cddf7cf1df043595fc90f34bb770a7","modified":1619257772263},{"_id":"public/tags/svg/index.html","hash":"0ffd213092af8c95e02c0174b9ed5bc9d8b16062","modified":1619257772263},{"_id":"public/tags/html/index.html","hash":"c3d10dc2444bb287f79782a19b290576a8edc0f4","modified":1619257772263},{"_id":"public/tags/移动端/index.html","hash":"080509d2fa4ce346e5d833166eca9ec48a46d052","modified":1619257772264},{"_id":"public/tags/尺寸/index.html","hash":"b5d2efd299ed7720c26d2d13e4ddf1068c68f8ff","modified":1619257772268},{"_id":"public/tags/css/index.html","hash":"2c6200f63836c9c0112cf58cfe505e6a95c0218d","modified":1619257772268},{"_id":"public/tags//index.html","hash":"64b29d47b17e4918941421261eeb5344bb6e6cf6","modified":1619257772268},{"_id":"public/tags/类型转换/index.html","hash":"66a245556e56b12bda4b553485bd10a122f24a13","modified":1619257772268},{"_id":"public/tags/富文本/index.html","hash":"4d877cf0c5e1c7cccad9612f2fb49ef9dea1a1d4","modified":1619257772268},{"_id":"public/tags/draft-js/index.html","hash":"c6c1d22834a1239e1b20c2828c19908dbac9fc39","modified":1619257772268},{"_id":"public/tags/动画/index.html","hash":"02038f67ce4f6507826b3a949aff7a95ce2f78de","modified":1619257772268},{"_id":"public/2100/01/01/command-days/index.html","hash":"e8dd14b99d40a739423f814baa6c7cebaefbd621","modified":1619257772268},{"_id":"public/2020/01/03/mobile-size-set/index.html","hash":"72232024a2448dbb7dca4065f2f284cb99d17f36","modified":1619257772268},{"_id":"public/2019/12/11/width-height/index.html","hash":"6ed48cb9b77ce74bb7977c2fb9c249973c4d9d52","modified":1619257772268},{"_id":"public/2019/08/16/path-animation/index.html","hash":"1e821ac2e32e3a2e445735e728f5df52745e96f1","modified":1619257772269},{"_id":"public/2019/06/27/component-design/index.html","hash":"9889ef58a5b06e847860af175721b47fd25107b6","modified":1619257772269},{"_id":"public/2019/05/23/unicode/index.html","hash":"4ddd86e1d41a5d6f7e2efa2d9a022408eedd7b66","modified":1619257772269},{"_id":"public/2019/05/22/trap/index.html","hash":"978407abcf0e77bc0ce417cf346f8c0833747769","modified":1619257772269},{"_id":"public/2019/03/30/draft-rich-text/index.html","hash":"890a913eacfb004caa45134676710bcb79e6b186","modified":1619257772269},{"_id":"public/2019/03/30/mouse-svg/index.html","hash":"21224100436aea34cd77e4e6dea9cb7569f016cc","modified":1619257772269},{"_id":"public/2019/03/22/mouse-string/index.html","hash":"9de35680848d1c7b9a557cfa176be19bd4cb9733","modified":1619257772269},{"_id":"public/2019/03/19/coercion/index.html","hash":"131b3a9f3fb039803605d98876d7beae320fa6bc","modified":1619257772269},{"_id":"public/archives/index.html","hash":"0b24f0621ed59352157a07cd13e454f08ffb942f","modified":1619257772269},{"_id":"public/archives/2019/index.html","hash":"afb2d838b26f2edbf2234a3872202e465529c2d2","modified":1619257772269},{"_id":"public/index.html","hash":"4c37236fd0cf53345b678c53b179d46aad1b33fd","modified":1619257772269},{"_id":"public/page/2/index.html","hash":"8721b132bc292b760abedbda5f520162d93edda1","modified":1619257772269},{"_id":"public/CNAME","hash":"6406488202004944a72fa1d62a18e1cb898f8fcd","modified":1619257772273},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1619257772273},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1619257772273},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1619257772273},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1619257772273},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1619257772273},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1619257772273},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1619257772273},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1619257772274},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1619257772274},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1619257772274},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1619257772274},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1619257772274},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1619257772274},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1619257772274},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1619257772274},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1619257772274},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1619257772274},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1619257772274},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1619257772274},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1619257772274},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1619257772732},{"_id":"public/css/main.css","hash":"7903c6b6292f7cc3ebe21b0ebe9765ef663eeb08","modified":1619257772732},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1619257772733},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1619257772733},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1619257772766},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1619257772766},{"_id":"public/js/motion.js","hash":"ca2965da47ba9fc5b0dde0a825c29e0817b965b9","modified":1619257772767},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1619257772767},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1619257772767},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1619257772767},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1619257772767},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1619257772767},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1619257772767},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1619257772767},{"_id":"public/js/schemes/muse.js","hash":"58d7ae45fbcc595d35722ebdf4fa877bcc6a6041","modified":1619257772768},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1619257772768},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1619257772772},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1619257772772},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1619257772776},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1619257772778},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1619257772778},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1619257772778},{"_id":"public/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1619257772783},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1619257772786}],"Category":[{"name":"common","_id":"cknvk9nkg0006142d36f65xzk"},{"name":"javascript","_id":"cknvk9nkk000b142d6gsee7v7"},{"name":"项目","_id":"cknvk9nkr000k142dncqmuads"},{"name":"html","_id":"cknvk9nks000r142dxy0p8s6v"},{"name":"css","_id":"cknvk9nkt000v142dpwx4j6b2"},{"name":"react","_id":"cknvk9nlz001l142d7gdsqvtf"}],"Data":[],"Page":[{"layout":"404","title":"目标不见了","description":"May the Force be with you :&#41;","_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: \"目标不见了\"\ndescription: \"May the Force be with you :&#41;\"\n---","date":"2019-04-07T00:36:53.021Z","updated":"2019-04-07T00:36:53.021Z","path":"404.html","comments":1,"_id":"cknvk9nei0000142d0jgyplwm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"爱编程，爱漫威","date":"2019-02-11T16:00:00.000Z","layout":"about","_content":"&emsp;&emsp;在大学学了四年资源勘查专业课程后成为了一个前端程序员，有点遗憾没有过上大漠戈壁，仗剑（锤）天涯的生活。目前是北京某家公司技术部的前端开发。  \n&emsp;&emsp;看书是我主要的学习方式。我喜欢看书，从小学四年级看的第一本课外书《中国少儿童话故事》到现在，不知道看了多少各行各业的、乱七八糟的书。从《上帝掷骰子吗》到《人类简史》，从《哲学家都干了什么》到《白夜行》，涉猎无所不包无所不及。从小的梦想就是家里能有我自己的书房，太喜欢图书馆或者书店那种氛围了。喜欢一切未知的、新鲜东西。  \n&emsp;&emsp;“误入”编程行业，抓紧互联网行业的尾巴。喜欢探索，拥抱开源，轻微代码洁癖。Stay hungry, Stay foolish.\n","source":"about/index.md","raw":"---\ntitle: 爱编程，爱漫威\ndate: 2019-02-12 00:00:00\nlayout: about\n---\n&emsp;&emsp;在大学学了四年资源勘查专业课程后成为了一个前端程序员，有点遗憾没有过上大漠戈壁，仗剑（锤）天涯的生活。目前是北京某家公司技术部的前端开发。  \n&emsp;&emsp;看书是我主要的学习方式。我喜欢看书，从小学四年级看的第一本课外书《中国少儿童话故事》到现在，不知道看了多少各行各业的、乱七八糟的书。从《上帝掷骰子吗》到《人类简史》，从《哲学家都干了什么》到《白夜行》，涉猎无所不包无所不及。从小的梦想就是家里能有我自己的书房，太喜欢图书馆或者书店那种氛围了。喜欢一切未知的、新鲜东西。  \n&emsp;&emsp;“误入”编程行业，抓紧互联网行业的尾巴。喜欢探索，拥抱开源，轻微代码洁癖。Stay hungry, Stay foolish.\n","updated":"2019-04-07T00:36:53.023Z","path":"about/index.html","comments":1,"_id":"cknvk9nkc0002142da8firaa0","content":"<p>&emsp;&emsp;在大学学了四年资源勘查专业课程后成为了一个前端程序员，有点遗憾没有过上大漠戈壁，仗剑（锤）天涯的生活。目前是北京某家公司技术部的前端开发。<br>&emsp;&emsp;看书是我主要的学习方式。我喜欢看书，从小学四年级看的第一本课外书《中国少儿童话故事》到现在，不知道看了多少各行各业的、乱七八糟的书。从《上帝掷骰子吗》到《人类简史》，从《哲学家都干了什么》到《白夜行》，涉猎无所不包无所不及。从小的梦想就是家里能有我自己的书房，太喜欢图书馆或者书店那种氛围了。喜欢一切未知的、新鲜东西。<br>&emsp;&emsp;“误入”编程行业，抓紧互联网行业的尾巴。喜欢探索，拥抱开源，轻微代码洁癖。Stay hungry, Stay foolish.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;在大学学了四年资源勘查专业课程后成为了一个前端程序员，有点遗憾没有过上大漠戈壁，仗剑（锤）天涯的生活。目前是北京某家公司技术部的前端开发。<br>&emsp;&emsp;看书是我主要的学习方式。我喜欢看书，从小学四年级看的第一本课外书《中国少儿童话故事》到现在，不知道看了多少各行各业的、乱七八糟的书。从《上帝掷骰子吗》到《人类简史》，从《哲学家都干了什么》到《白夜行》，涉猎无所不包无所不及。从小的梦想就是家里能有我自己的书房，太喜欢图书馆或者书店那种氛围了。喜欢一切未知的、新鲜东西。<br>&emsp;&emsp;“误入”编程行业，抓紧互联网行业的尾巴。喜欢探索，拥抱开源，轻微代码洁癖。Stay hungry, Stay foolish.</p>\n"}],"Post":[{"title":"思考如何设计好维护的前端组件","date":"2019-06-27T09:31:02.000Z","header_image":"https://source.unsplash.com/random","_content":"在写平时工作写业务代码的时候，为了开发效率而忽略了前端组件的合理设计。导致后期需求迭代和修改bug的时候，维护困难，更不用说维护代码的人可能并不是代码的开发者。思考了一下如何设计出更好维护的前端组件，适用于react和vue。以下只是我个人的粗浅观点，分享出来大家一起交流。\n1. 写下任何代码前画出整个业务组件设计的UML图，显示每个组件的state、props、methods和其他组件的关系。即使不写下来，也要在大脑中有清晰的图示。这些工作强制让你思考一个组件的渲染需要哪些外部数据（props），自身应该拥有的功能属性（state），和组件可能有的动作（methods）。这些思考对接下来的写代码很重要。  \n2. props的传递，尽量不传“大对象”。避免将多个互相没有关联的数据封装成一个对象传递给子组件，子组件应该设置不同的props，分别接收。这样在操作的时候更有目的性，一眼就能看出你在操作什么。分清楚什么是state和什么是组件外的变量，与组件渲染无关的或者固定的数据应该是组件外的数据，state和props应该只是和渲染有强相关的变量数据。  \n3. state的改变只能是用户事件来触发或者是api请求事件回调触发，不应该是监听另一个state变化而变化。state的变化应该是纯粹的。不能滥用watch，尽量使用computed，能不用watch就不用，watch的不正确使用会使状态的变化更加难以控制。  \n4. 降低耦合度，好的组件只需要关心自己收的到props和传递给子组件的props。降低耦合度的好处不只是体现在重用性上，功能模块的解耦使整个业务逻辑更加清晰，降低了维护成本。尽可能将相对独立的功能模块单独处理成组件。不要什么功能都写在一个大组件里，文件变得特别大，维护起来真是一言难尽。抽离组件肯定会花费部分时间和精力，但是比之后维护混乱的逻辑容易的多。  \n5. 未完待补充\n","source":"_posts/component-design.md","raw":"---\ntitle: 思考如何设计好维护的前端组件\ndate: 2019-06-27 17:31:02\ncategories:\ntags:\n  - design\n  - vue\n  - react\nheader_image: https://source.unsplash.com/random\n---\n在写平时工作写业务代码的时候，为了开发效率而忽略了前端组件的合理设计。导致后期需求迭代和修改bug的时候，维护困难，更不用说维护代码的人可能并不是代码的开发者。思考了一下如何设计出更好维护的前端组件，适用于react和vue。以下只是我个人的粗浅观点，分享出来大家一起交流。\n1. 写下任何代码前画出整个业务组件设计的UML图，显示每个组件的state、props、methods和其他组件的关系。即使不写下来，也要在大脑中有清晰的图示。这些工作强制让你思考一个组件的渲染需要哪些外部数据（props），自身应该拥有的功能属性（state），和组件可能有的动作（methods）。这些思考对接下来的写代码很重要。  \n2. props的传递，尽量不传“大对象”。避免将多个互相没有关联的数据封装成一个对象传递给子组件，子组件应该设置不同的props，分别接收。这样在操作的时候更有目的性，一眼就能看出你在操作什么。分清楚什么是state和什么是组件外的变量，与组件渲染无关的或者固定的数据应该是组件外的数据，state和props应该只是和渲染有强相关的变量数据。  \n3. state的改变只能是用户事件来触发或者是api请求事件回调触发，不应该是监听另一个state变化而变化。state的变化应该是纯粹的。不能滥用watch，尽量使用computed，能不用watch就不用，watch的不正确使用会使状态的变化更加难以控制。  \n4. 降低耦合度，好的组件只需要关心自己收的到props和传递给子组件的props。降低耦合度的好处不只是体现在重用性上，功能模块的解耦使整个业务逻辑更加清晰，降低了维护成本。尽可能将相对独立的功能模块单独处理成组件。不要什么功能都写在一个大组件里，文件变得特别大，维护起来真是一言难尽。抽离组件肯定会花费部分时间和精力，但是比之后维护混乱的逻辑容易的多。  \n5. 未完待补充\n","slug":"component-design","published":1,"updated":"2019-06-27T09:39:30.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nk90001142d0l5d0yyz","content":"<p>在写平时工作写业务代码的时候，为了开发效率而忽略了前端组件的合理设计。导致后期需求迭代和修改bug的时候，维护困难，更不用说维护代码的人可能并不是代码的开发者。思考了一下如何设计出更好维护的前端组件，适用于react和vue。以下只是我个人的粗浅观点，分享出来大家一起交流。</p>\n<ol>\n<li>写下任何代码前画出整个业务组件设计的UML图，显示每个组件的state、props、methods和其他组件的关系。即使不写下来，也要在大脑中有清晰的图示。这些工作强制让你思考一个组件的渲染需要哪些外部数据（props），自身应该拥有的功能属性（state），和组件可能有的动作（methods）。这些思考对接下来的写代码很重要。  </li>\n<li>props的传递，尽量不传“大对象”。避免将多个互相没有关联的数据封装成一个对象传递给子组件，子组件应该设置不同的props，分别接收。这样在操作的时候更有目的性，一眼就能看出你在操作什么。分清楚什么是state和什么是组件外的变量，与组件渲染无关的或者固定的数据应该是组件外的数据，state和props应该只是和渲染有强相关的变量数据。  </li>\n<li>state的改变只能是用户事件来触发或者是api请求事件回调触发，不应该是监听另一个state变化而变化。state的变化应该是纯粹的。不能滥用watch，尽量使用computed，能不用watch就不用，watch的不正确使用会使状态的变化更加难以控制。  </li>\n<li>降低耦合度，好的组件只需要关心自己收的到props和传递给子组件的props。降低耦合度的好处不只是体现在重用性上，功能模块的解耦使整个业务逻辑更加清晰，降低了维护成本。尽可能将相对独立的功能模块单独处理成组件。不要什么功能都写在一个大组件里，文件变得特别大，维护起来真是一言难尽。抽离组件肯定会花费部分时间和精力，但是比之后维护混乱的逻辑容易的多。  </li>\n<li>未完待补充</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在写平时工作写业务代码的时候，为了开发效率而忽略了前端组件的合理设计。导致后期需求迭代和修改bug的时候，维护困难，更不用说维护代码的人可能并不是代码的开发者。思考了一下如何设计出更好维护的前端组件，适用于react和vue。以下只是我个人的粗浅观点，分享出来大家一起交流。</p>\n<ol>\n<li>写下任何代码前画出整个业务组件设计的UML图，显示每个组件的state、props、methods和其他组件的关系。即使不写下来，也要在大脑中有清晰的图示。这些工作强制让你思考一个组件的渲染需要哪些外部数据（props），自身应该拥有的功能属性（state），和组件可能有的动作（methods）。这些思考对接下来的写代码很重要。  </li>\n<li>props的传递，尽量不传“大对象”。避免将多个互相没有关联的数据封装成一个对象传递给子组件，子组件应该设置不同的props，分别接收。这样在操作的时候更有目的性，一眼就能看出你在操作什么。分清楚什么是state和什么是组件外的变量，与组件渲染无关的或者固定的数据应该是组件外的数据，state和props应该只是和渲染有强相关的变量数据。  </li>\n<li>state的改变只能是用户事件来触发或者是api请求事件回调触发，不应该是监听另一个state变化而变化。state的变化应该是纯粹的。不能滥用watch，尽量使用computed，能不用watch就不用，watch的不正确使用会使状态的变化更加难以控制。  </li>\n<li>降低耦合度，好的组件只需要关心自己收的到props和传递给子组件的props。降低耦合度的好处不只是体现在重用性上，功能模块的解耦使整个业务逻辑更加清晰，降低了维护成本。尽可能将相对独立的功能模块单独处理成组件。不要什么功能都写在一个大组件里，文件变得特别大，维护起来真是一言难尽。抽离组件肯定会花费部分时间和精力，但是比之后维护混乱的逻辑容易的多。  </li>\n<li>未完待补充</li>\n</ol>\n"},{"title":"每天一个命令行","date":"2099-12-31T16:00:00.000Z","header_image":"https://source.unsplash.com/random","_content":"### 2019-04-08\n```shell\nnpm list [-g] --depth 0\n```  \n查看[全局]安装的npm包，depth 0表示查看最外层的包，depth 1展开一层看看这些模块各自又依赖了哪些模块，以此类推。\n\n### 2019-04-09\n```shell\ngit branch -d <branch-name>\n```  \n删除本地分支  \n```shell\ngit branch -b <branch-name>\n```  \n新建本地分支  \n\n### 2019-04-10\n```shell\necho \"xxx\" > file-name.txt\n```  \n将内容\"xxx\"写入file-name.txt文件中，覆盖写入。  \n```shell\necho \"xxx\" >> file-name.txt\n```  \n将内容\"xxx\"写入file-name.txt文件中，追加写入，echo自动加换行。  \n\n### 2019-04-11 \n```shell\ngit checkout <origin-branch-name>\n```  \n基于远端分支在本地新建同名分支。  \n\n### 2019-04-12\n```shell\ngit rm -r --cached .\n```  \n将所有文件从版本库里移除，-r表示递归，深入文件内部。  \n之后再运行`git add .`和`git commit`后，新的.gitignore规则就会生效。  \n\n### 2019-04-13\n```shell\nhistory\n```  \n显示终端中运行过的命令。  \n\n### 2019-04-15  \n```shell\ntouch file-name\n```  \ntouch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间，若文件不存在，系统会建立一个新的文件。  \n也就是说该命令将文件的最后更改时间设置为系统当前时间。  \n\n### 2019-04-21  \n```shell\nkill -9 PID\n```  \n结束指定PID的进程，mac可以打开活动监视器查看进程PID。  \n\n### 2019-04-23  \n```shell\ngit merge --squash another\n```  \n将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来，需要填写一个commite记录。  \n### 2019-05-15  \n```shell\nls -l\n```  \n列出文件夹内的文件信息。 \n\n### 2019-05-19  \n```shell\npwd\n```  \n显示当前目录路径。 \n\n### 2019-05-23  \n```shell\ngit tag <tagname> [commit id]\n```  \n创建一个标签，默认为HEAD，可以指定一个commit id。   \n```shell\ngit tag -a <tagname> -m \"blablabla...\"\n```  \n创建一个带有信息的标签。  \n\n### 2019-05-27  \n```shell\ngit tag -d <tagname>\n```  \n在本地删除一个标签。\n```shell\ngit push origin :refs/tags/<tagname>\n```  \n这样可以删除远程的标签（需要先在本地删除再删远程）。\n\n### 2019-05-28\n```shell\nlsof -i tcp:<端口号>\n```  \n查询端口号的占用情况，会显示出PID，方便kill。  \n\n### 2019-06-17\n```shell\ngit push origin <xx> -f\n```  \nreset --hard版本回退后，只是本地回退。push的时候加-f参数，将远端代码也进行回退。不加参数push不了。   \n\n### 2019-07-08\n```shell\ngit checkout origin/<xx> -b <xx>\n```  \n基于远程的xx分支新建本地分支xx。  \n\n### 2019-09-09\n```shell\ngit reset --soft HEAD^\n```  \n撤销上次commit，不撤销add .\n\n\n\n\n\n\n","source":"_posts/command-days.md","raw":"---\ntitle: 每天一个命令行\ndate: 2100-01-01 00:00:00\ncategories:\n  - common\ntags:\n  - 命令\n  - 终端\nheader_image: https://source.unsplash.com/random\n---\n### 2019-04-08\n```shell\nnpm list [-g] --depth 0\n```  \n查看[全局]安装的npm包，depth 0表示查看最外层的包，depth 1展开一层看看这些模块各自又依赖了哪些模块，以此类推。\n\n### 2019-04-09\n```shell\ngit branch -d <branch-name>\n```  \n删除本地分支  \n```shell\ngit branch -b <branch-name>\n```  \n新建本地分支  \n\n### 2019-04-10\n```shell\necho \"xxx\" > file-name.txt\n```  \n将内容\"xxx\"写入file-name.txt文件中，覆盖写入。  \n```shell\necho \"xxx\" >> file-name.txt\n```  \n将内容\"xxx\"写入file-name.txt文件中，追加写入，echo自动加换行。  \n\n### 2019-04-11 \n```shell\ngit checkout <origin-branch-name>\n```  \n基于远端分支在本地新建同名分支。  \n\n### 2019-04-12\n```shell\ngit rm -r --cached .\n```  \n将所有文件从版本库里移除，-r表示递归，深入文件内部。  \n之后再运行`git add .`和`git commit`后，新的.gitignore规则就会生效。  \n\n### 2019-04-13\n```shell\nhistory\n```  \n显示终端中运行过的命令。  \n\n### 2019-04-15  \n```shell\ntouch file-name\n```  \ntouch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间，若文件不存在，系统会建立一个新的文件。  \n也就是说该命令将文件的最后更改时间设置为系统当前时间。  \n\n### 2019-04-21  \n```shell\nkill -9 PID\n```  \n结束指定PID的进程，mac可以打开活动监视器查看进程PID。  \n\n### 2019-04-23  \n```shell\ngit merge --squash another\n```  \n将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来，需要填写一个commite记录。  \n### 2019-05-15  \n```shell\nls -l\n```  \n列出文件夹内的文件信息。 \n\n### 2019-05-19  \n```shell\npwd\n```  \n显示当前目录路径。 \n\n### 2019-05-23  \n```shell\ngit tag <tagname> [commit id]\n```  \n创建一个标签，默认为HEAD，可以指定一个commit id。   \n```shell\ngit tag -a <tagname> -m \"blablabla...\"\n```  \n创建一个带有信息的标签。  \n\n### 2019-05-27  \n```shell\ngit tag -d <tagname>\n```  \n在本地删除一个标签。\n```shell\ngit push origin :refs/tags/<tagname>\n```  \n这样可以删除远程的标签（需要先在本地删除再删远程）。\n\n### 2019-05-28\n```shell\nlsof -i tcp:<端口号>\n```  \n查询端口号的占用情况，会显示出PID，方便kill。  \n\n### 2019-06-17\n```shell\ngit push origin <xx> -f\n```  \nreset --hard版本回退后，只是本地回退。push的时候加-f参数，将远端代码也进行回退。不加参数push不了。   \n\n### 2019-07-08\n```shell\ngit checkout origin/<xx> -b <xx>\n```  \n基于远程的xx分支新建本地分支xx。  \n\n### 2019-09-09\n```shell\ngit reset --soft HEAD^\n```  \n撤销上次commit，不撤销add .\n\n\n\n\n\n\n","slug":"command-days","published":1,"updated":"2019-12-11T06:53:08.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nkd0003142d23wqc4vv","content":"<h3 id=\"2019-04-08\"><a href=\"#2019-04-08\" class=\"headerlink\" title=\"2019-04-08\"></a>2019-04-08</h3><pre><code class=\"shell\">npm list [-g] --depth 0\n</code></pre>\n<p>查看[全局]安装的npm包，depth 0表示查看最外层的包，depth 1展开一层看看这些模块各自又依赖了哪些模块，以此类推。</p>\n<h3 id=\"2019-04-09\"><a href=\"#2019-04-09\" class=\"headerlink\" title=\"2019-04-09\"></a>2019-04-09</h3><pre><code class=\"shell\">git branch -d &lt;branch-name&gt;\n</code></pre>\n<p>删除本地分支  </p>\n<pre><code class=\"shell\">git branch -b &lt;branch-name&gt;\n</code></pre>\n<p>新建本地分支  </p>\n<h3 id=\"2019-04-10\"><a href=\"#2019-04-10\" class=\"headerlink\" title=\"2019-04-10\"></a>2019-04-10</h3><pre><code class=\"shell\">echo \"xxx\" &gt; file-name.txt\n</code></pre>\n<p>将内容”xxx”写入file-name.txt文件中，覆盖写入。  </p>\n<pre><code class=\"shell\">echo \"xxx\" &gt;&gt; file-name.txt\n</code></pre>\n<p>将内容”xxx”写入file-name.txt文件中，追加写入，echo自动加换行。  </p>\n<h3 id=\"2019-04-11\"><a href=\"#2019-04-11\" class=\"headerlink\" title=\"2019-04-11\"></a>2019-04-11</h3><pre><code class=\"shell\">git checkout &lt;origin-branch-name&gt;\n</code></pre>\n<p>基于远端分支在本地新建同名分支。  </p>\n<h3 id=\"2019-04-12\"><a href=\"#2019-04-12\" class=\"headerlink\" title=\"2019-04-12\"></a>2019-04-12</h3><pre><code class=\"shell\">git rm -r --cached .\n</code></pre>\n<p>将所有文件从版本库里移除，-r表示递归，深入文件内部。<br>之后再运行<code>git add .</code>和<code>git commit</code>后，新的.gitignore规则就会生效。  </p>\n<h3 id=\"2019-04-13\"><a href=\"#2019-04-13\" class=\"headerlink\" title=\"2019-04-13\"></a>2019-04-13</h3><pre><code class=\"shell\">history\n</code></pre>\n<p>显示终端中运行过的命令。  </p>\n<h3 id=\"2019-04-15\"><a href=\"#2019-04-15\" class=\"headerlink\" title=\"2019-04-15\"></a>2019-04-15</h3><pre><code class=\"shell\">touch file-name\n</code></pre>\n<p>touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间，若文件不存在，系统会建立一个新的文件。<br>也就是说该命令将文件的最后更改时间设置为系统当前时间。  </p>\n<h3 id=\"2019-04-21\"><a href=\"#2019-04-21\" class=\"headerlink\" title=\"2019-04-21\"></a>2019-04-21</h3><pre><code class=\"shell\">kill -9 PID\n</code></pre>\n<p>结束指定PID的进程，mac可以打开活动监视器查看进程PID。  </p>\n<h3 id=\"2019-04-23\"><a href=\"#2019-04-23\" class=\"headerlink\" title=\"2019-04-23\"></a>2019-04-23</h3><pre><code class=\"shell\">git merge --squash another\n</code></pre>\n<p>将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来，需要填写一个commite记录。  </p>\n<h3 id=\"2019-05-15\"><a href=\"#2019-05-15\" class=\"headerlink\" title=\"2019-05-15\"></a>2019-05-15</h3><pre><code class=\"shell\">ls -l\n</code></pre>\n<p>列出文件夹内的文件信息。 </p>\n<h3 id=\"2019-05-19\"><a href=\"#2019-05-19\" class=\"headerlink\" title=\"2019-05-19\"></a>2019-05-19</h3><pre><code class=\"shell\">pwd\n</code></pre>\n<p>显示当前目录路径。 </p>\n<h3 id=\"2019-05-23\"><a href=\"#2019-05-23\" class=\"headerlink\" title=\"2019-05-23\"></a>2019-05-23</h3><pre><code class=\"shell\">git tag &lt;tagname&gt; [commit id]\n</code></pre>\n<p>创建一个标签，默认为HEAD，可以指定一个commit id。   </p>\n<pre><code class=\"shell\">git tag -a &lt;tagname&gt; -m \"blablabla...\"\n</code></pre>\n<p>创建一个带有信息的标签。  </p>\n<h3 id=\"2019-05-27\"><a href=\"#2019-05-27\" class=\"headerlink\" title=\"2019-05-27\"></a>2019-05-27</h3><pre><code class=\"shell\">git tag -d &lt;tagname&gt;\n</code></pre>\n<p>在本地删除一个标签。</p>\n<pre><code class=\"shell\">git push origin :refs/tags/&lt;tagname&gt;\n</code></pre>\n<p>这样可以删除远程的标签（需要先在本地删除再删远程）。</p>\n<h3 id=\"2019-05-28\"><a href=\"#2019-05-28\" class=\"headerlink\" title=\"2019-05-28\"></a>2019-05-28</h3><pre><code class=\"shell\">lsof -i tcp:&lt;端口号&gt;\n</code></pre>\n<p>查询端口号的占用情况，会显示出PID，方便kill。  </p>\n<h3 id=\"2019-06-17\"><a href=\"#2019-06-17\" class=\"headerlink\" title=\"2019-06-17\"></a>2019-06-17</h3><pre><code class=\"shell\">git push origin &lt;xx&gt; -f\n</code></pre>\n<p>reset –hard版本回退后，只是本地回退。push的时候加-f参数，将远端代码也进行回退。不加参数push不了。   </p>\n<h3 id=\"2019-07-08\"><a href=\"#2019-07-08\" class=\"headerlink\" title=\"2019-07-08\"></a>2019-07-08</h3><pre><code class=\"shell\">git checkout origin/&lt;xx&gt; -b &lt;xx&gt;\n</code></pre>\n<p>基于远程的xx分支新建本地分支xx。  </p>\n<h3 id=\"2019-09-09\"><a href=\"#2019-09-09\" class=\"headerlink\" title=\"2019-09-09\"></a>2019-09-09</h3><pre><code class=\"shell\">git reset --soft HEAD^\n</code></pre>\n<p>撤销上次commit，不撤销add .</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"2019-04-08\"><a href=\"#2019-04-08\" class=\"headerlink\" title=\"2019-04-08\"></a>2019-04-08</h3><pre><code class=\"shell\">npm list [-g] --depth 0\n</code></pre>\n<p>查看[全局]安装的npm包，depth 0表示查看最外层的包，depth 1展开一层看看这些模块各自又依赖了哪些模块，以此类推。</p>\n<h3 id=\"2019-04-09\"><a href=\"#2019-04-09\" class=\"headerlink\" title=\"2019-04-09\"></a>2019-04-09</h3><pre><code class=\"shell\">git branch -d &lt;branch-name&gt;\n</code></pre>\n<p>删除本地分支  </p>\n<pre><code class=\"shell\">git branch -b &lt;branch-name&gt;\n</code></pre>\n<p>新建本地分支  </p>\n<h3 id=\"2019-04-10\"><a href=\"#2019-04-10\" class=\"headerlink\" title=\"2019-04-10\"></a>2019-04-10</h3><pre><code class=\"shell\">echo \"xxx\" &gt; file-name.txt\n</code></pre>\n<p>将内容”xxx”写入file-name.txt文件中，覆盖写入。  </p>\n<pre><code class=\"shell\">echo \"xxx\" &gt;&gt; file-name.txt\n</code></pre>\n<p>将内容”xxx”写入file-name.txt文件中，追加写入，echo自动加换行。  </p>\n<h3 id=\"2019-04-11\"><a href=\"#2019-04-11\" class=\"headerlink\" title=\"2019-04-11\"></a>2019-04-11</h3><pre><code class=\"shell\">git checkout &lt;origin-branch-name&gt;\n</code></pre>\n<p>基于远端分支在本地新建同名分支。  </p>\n<h3 id=\"2019-04-12\"><a href=\"#2019-04-12\" class=\"headerlink\" title=\"2019-04-12\"></a>2019-04-12</h3><pre><code class=\"shell\">git rm -r --cached .\n</code></pre>\n<p>将所有文件从版本库里移除，-r表示递归，深入文件内部。<br>之后再运行<code>git add .</code>和<code>git commit</code>后，新的.gitignore规则就会生效。  </p>\n<h3 id=\"2019-04-13\"><a href=\"#2019-04-13\" class=\"headerlink\" title=\"2019-04-13\"></a>2019-04-13</h3><pre><code class=\"shell\">history\n</code></pre>\n<p>显示终端中运行过的命令。  </p>\n<h3 id=\"2019-04-15\"><a href=\"#2019-04-15\" class=\"headerlink\" title=\"2019-04-15\"></a>2019-04-15</h3><pre><code class=\"shell\">touch file-name\n</code></pre>\n<p>touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间，若文件不存在，系统会建立一个新的文件。<br>也就是说该命令将文件的最后更改时间设置为系统当前时间。  </p>\n<h3 id=\"2019-04-21\"><a href=\"#2019-04-21\" class=\"headerlink\" title=\"2019-04-21\"></a>2019-04-21</h3><pre><code class=\"shell\">kill -9 PID\n</code></pre>\n<p>结束指定PID的进程，mac可以打开活动监视器查看进程PID。  </p>\n<h3 id=\"2019-04-23\"><a href=\"#2019-04-23\" class=\"headerlink\" title=\"2019-04-23\"></a>2019-04-23</h3><pre><code class=\"shell\">git merge --squash another\n</code></pre>\n<p>将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来，需要填写一个commite记录。  </p>\n<h3 id=\"2019-05-15\"><a href=\"#2019-05-15\" class=\"headerlink\" title=\"2019-05-15\"></a>2019-05-15</h3><pre><code class=\"shell\">ls -l\n</code></pre>\n<p>列出文件夹内的文件信息。 </p>\n<h3 id=\"2019-05-19\"><a href=\"#2019-05-19\" class=\"headerlink\" title=\"2019-05-19\"></a>2019-05-19</h3><pre><code class=\"shell\">pwd\n</code></pre>\n<p>显示当前目录路径。 </p>\n<h3 id=\"2019-05-23\"><a href=\"#2019-05-23\" class=\"headerlink\" title=\"2019-05-23\"></a>2019-05-23</h3><pre><code class=\"shell\">git tag &lt;tagname&gt; [commit id]\n</code></pre>\n<p>创建一个标签，默认为HEAD，可以指定一个commit id。   </p>\n<pre><code class=\"shell\">git tag -a &lt;tagname&gt; -m \"blablabla...\"\n</code></pre>\n<p>创建一个带有信息的标签。  </p>\n<h3 id=\"2019-05-27\"><a href=\"#2019-05-27\" class=\"headerlink\" title=\"2019-05-27\"></a>2019-05-27</h3><pre><code class=\"shell\">git tag -d &lt;tagname&gt;\n</code></pre>\n<p>在本地删除一个标签。</p>\n<pre><code class=\"shell\">git push origin :refs/tags/&lt;tagname&gt;\n</code></pre>\n<p>这样可以删除远程的标签（需要先在本地删除再删远程）。</p>\n<h3 id=\"2019-05-28\"><a href=\"#2019-05-28\" class=\"headerlink\" title=\"2019-05-28\"></a>2019-05-28</h3><pre><code class=\"shell\">lsof -i tcp:&lt;端口号&gt;\n</code></pre>\n<p>查询端口号的占用情况，会显示出PID，方便kill。  </p>\n<h3 id=\"2019-06-17\"><a href=\"#2019-06-17\" class=\"headerlink\" title=\"2019-06-17\"></a>2019-06-17</h3><pre><code class=\"shell\">git push origin &lt;xx&gt; -f\n</code></pre>\n<p>reset –hard版本回退后，只是本地回退。push的时候加-f参数，将远端代码也进行回退。不加参数push不了。   </p>\n<h3 id=\"2019-07-08\"><a href=\"#2019-07-08\" class=\"headerlink\" title=\"2019-07-08\"></a>2019-07-08</h3><pre><code class=\"shell\">git checkout origin/&lt;xx&gt; -b &lt;xx&gt;\n</code></pre>\n<p>基于远程的xx分支新建本地分支xx。  </p>\n<h3 id=\"2019-09-09\"><a href=\"#2019-09-09\" class=\"headerlink\" title=\"2019-09-09\"></a>2019-09-09</h3><pre><code class=\"shell\">git reset --soft HEAD^\n</code></pre>\n<p>撤销上次commit，不撤销add .</p>\n"},{"title":"js简单实现的鼠标跟随效果","date":"2019-03-22T06:52:43.000Z","header_image":"https://source.unsplash.com/random","_content":"&emsp;&emsp;记得早年风靡装饰非主流QQ空间, 各种克隆空间的网站大行其道. 如果复制了某个狂拽酷炫的空间(必须有DJ背景音乐, 必须有轮播的视频图片, 配色必须黑底花字, 最好有鼠标跟随特效...)那么感觉自己就像是这条街最帅的仔了. 现在回忆起往事, 感慨万千, 时光一去不复返, 如果能穿越回去, 我一定扇死自己:)  \n&emsp;&emsp;虽然回忆起来就辣眼睛, 但是鼠标跟随特效还是很有应用前途的(强迫让自己相信). 曾经见过一个我认为最牛逼的纯css实现方案, 将页面铺满小div元素, 根据窗口绝对定位, 每个div都有:hover反应, 只要你的div足够小足够多, 看起来就像是鼠标跟随特效的, 如果再加上点延迟效果, 前途不可限量.  \n&emsp;&emsp;既然css方案这么牛逼, 所以我选择用js实现(逃). 思路就是给window加鼠标移动监听事件, 获取鼠标的位置信息, 将位置信息赋给一个绝对定位的元素.  \n&emsp;&emsp;来看下代码, 先creat个相对于body绝对定位的元素:\n```js\nconst $follow = document.createElement('div');\n$follow.setAttribute('class', 'follow');\n$body.appendChild($follow);\n```\n```css\n.follow{\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  background-color: red;\n}\n```\n&emsp;&emsp;元素已经有了, 现在添加事件:\n```js\nwindow.addEventListener('mousemove', (e) => {\n  const x = parseFloat(e.clientX);\n  const y = parseFloat(e.clientY);\n  $follow.style.left = x + 'px';\n  $follow.style.top = y + 'px';\n});\n```\n&emsp;&emsp;移动跟随效果有了, 但是要多丑有多丑. 还有个小问题, 刚进入页面鼠标还没有移动的时候, 方块显示在左上角位置. 在css中加条规则:\n```css\n.follow{\n  // ...\n  display: none;\n}\n```\n&emsp;&emsp;然后在事件中设置显示. 为了看起来更和谐, 将元素定位在鼠标的右边20px和下边20px处.\n```js\nwindow.addEventListener('mousemove', (e) => {\n  // ...\n  $follow.style.display = 'block';\n  $follow.style.left = x + 20 + 'px';\n  $follow.style.top = y + 20 + 'px';\n});\n```\n&emsp;&emsp;可以将丑爆的背景颜色替换成背景图片, 最好还是动态的gif图, 看起来更有逼格.  \n&emsp;&emsp;原理很简单, 也就是入门一周的水平, 但是设计好了会产生比较炫酷的效果.  \n&emsp;&emsp;28行js代码实现的一个小[demo](https://zhangxuekang.com/mouse-show/index.html).  \n&emsp;&emsp;[github地址](https://github.com/zhangxuekang/mouse-show).\n\n","source":"_posts/mouse-string.md","raw":"---\ntitle: js简单实现的鼠标跟随效果\ndate: 2019-03-22 14:52:43\ncategories:\n  - javascript\ntags:\n  - javascript\n  - 鼠标跟随\nheader_image: https://source.unsplash.com/random\n---\n&emsp;&emsp;记得早年风靡装饰非主流QQ空间, 各种克隆空间的网站大行其道. 如果复制了某个狂拽酷炫的空间(必须有DJ背景音乐, 必须有轮播的视频图片, 配色必须黑底花字, 最好有鼠标跟随特效...)那么感觉自己就像是这条街最帅的仔了. 现在回忆起往事, 感慨万千, 时光一去不复返, 如果能穿越回去, 我一定扇死自己:)  \n&emsp;&emsp;虽然回忆起来就辣眼睛, 但是鼠标跟随特效还是很有应用前途的(强迫让自己相信). 曾经见过一个我认为最牛逼的纯css实现方案, 将页面铺满小div元素, 根据窗口绝对定位, 每个div都有:hover反应, 只要你的div足够小足够多, 看起来就像是鼠标跟随特效的, 如果再加上点延迟效果, 前途不可限量.  \n&emsp;&emsp;既然css方案这么牛逼, 所以我选择用js实现(逃). 思路就是给window加鼠标移动监听事件, 获取鼠标的位置信息, 将位置信息赋给一个绝对定位的元素.  \n&emsp;&emsp;来看下代码, 先creat个相对于body绝对定位的元素:\n```js\nconst $follow = document.createElement('div');\n$follow.setAttribute('class', 'follow');\n$body.appendChild($follow);\n```\n```css\n.follow{\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  background-color: red;\n}\n```\n&emsp;&emsp;元素已经有了, 现在添加事件:\n```js\nwindow.addEventListener('mousemove', (e) => {\n  const x = parseFloat(e.clientX);\n  const y = parseFloat(e.clientY);\n  $follow.style.left = x + 'px';\n  $follow.style.top = y + 'px';\n});\n```\n&emsp;&emsp;移动跟随效果有了, 但是要多丑有多丑. 还有个小问题, 刚进入页面鼠标还没有移动的时候, 方块显示在左上角位置. 在css中加条规则:\n```css\n.follow{\n  // ...\n  display: none;\n}\n```\n&emsp;&emsp;然后在事件中设置显示. 为了看起来更和谐, 将元素定位在鼠标的右边20px和下边20px处.\n```js\nwindow.addEventListener('mousemove', (e) => {\n  // ...\n  $follow.style.display = 'block';\n  $follow.style.left = x + 20 + 'px';\n  $follow.style.top = y + 20 + 'px';\n});\n```\n&emsp;&emsp;可以将丑爆的背景颜色替换成背景图片, 最好还是动态的gif图, 看起来更有逼格.  \n&emsp;&emsp;原理很简单, 也就是入门一周的水平, 但是设计好了会产生比较炫酷的效果.  \n&emsp;&emsp;28行js代码实现的一个小[demo](https://zhangxuekang.com/mouse-show/index.html).  \n&emsp;&emsp;[github地址](https://github.com/zhangxuekang/mouse-show).\n\n","slug":"mouse-string","published":1,"updated":"2019-04-07T00:36:53.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nkf0005142dhyv6rl7u","content":"<p>&emsp;&emsp;记得早年风靡装饰非主流QQ空间, 各种克隆空间的网站大行其道. 如果复制了某个狂拽酷炫的空间(必须有DJ背景音乐, 必须有轮播的视频图片, 配色必须黑底花字, 最好有鼠标跟随特效…)那么感觉自己就像是这条街最帅的仔了. 现在回忆起往事, 感慨万千, 时光一去不复返, 如果能穿越回去, 我一定扇死自己:)<br>&emsp;&emsp;虽然回忆起来就辣眼睛, 但是鼠标跟随特效还是很有应用前途的(强迫让自己相信). 曾经见过一个我认为最牛逼的纯css实现方案, 将页面铺满小div元素, 根据窗口绝对定位, 每个div都有:hover反应, 只要你的div足够小足够多, 看起来就像是鼠标跟随特效的, 如果再加上点延迟效果, 前途不可限量.<br>&emsp;&emsp;既然css方案这么牛逼, 所以我选择用js实现(逃). 思路就是给window加鼠标移动监听事件, 获取鼠标的位置信息, 将位置信息赋给一个绝对定位的元素.<br>&emsp;&emsp;来看下代码, 先creat个相对于body绝对定位的元素:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $follow = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">$follow.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'follow'</span>);</span><br><span class=\"line\">$body.appendChild($follow);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.follow</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;元素已经有了, 现在添加事件:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"built_in\">parseFloat</span>(e.clientX);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = <span class=\"built_in\">parseFloat</span>(e.clientY);</span><br><span class=\"line\">  $follow.style.left = x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  $follow.style.top = y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;移动跟随效果有了, 但是要多丑有多丑. 还有个小问题, 刚进入页面鼠标还没有移动的时候, 方块显示在左上角位置. 在css中加条规则:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.follow</span>&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;然后在事件中设置显示. 为了看起来更和谐, 将元素定位在鼠标的右边20px和下边20px处.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  $follow.style.display = <span class=\"string\">'block'</span>;</span><br><span class=\"line\">  $follow.style.left = x + <span class=\"number\">20</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  $follow.style.top = y + <span class=\"number\">20</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;可以将丑爆的背景颜色替换成背景图片, 最好还是动态的gif图, 看起来更有逼格.<br>&emsp;&emsp;原理很简单, 也就是入门一周的水平, 但是设计好了会产生比较炫酷的效果.<br>&emsp;&emsp;28行js代码实现的一个小<a href=\"https://zhangxuekang.com/mouse-show/index.html\">demo</a>.<br>&emsp;&emsp;<a href=\"https://github.com/zhangxuekang/mouse-show\" target=\"_blank\" rel=\"noopener\">github地址</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;记得早年风靡装饰非主流QQ空间, 各种克隆空间的网站大行其道. 如果复制了某个狂拽酷炫的空间(必须有DJ背景音乐, 必须有轮播的视频图片, 配色必须黑底花字, 最好有鼠标跟随特效…)那么感觉自己就像是这条街最帅的仔了. 现在回忆起往事, 感慨万千, 时光一去不复返, 如果能穿越回去, 我一定扇死自己:)<br>&emsp;&emsp;虽然回忆起来就辣眼睛, 但是鼠标跟随特效还是很有应用前途的(强迫让自己相信). 曾经见过一个我认为最牛逼的纯css实现方案, 将页面铺满小div元素, 根据窗口绝对定位, 每个div都有:hover反应, 只要你的div足够小足够多, 看起来就像是鼠标跟随特效的, 如果再加上点延迟效果, 前途不可限量.<br>&emsp;&emsp;既然css方案这么牛逼, 所以我选择用js实现(逃). 思路就是给window加鼠标移动监听事件, 获取鼠标的位置信息, 将位置信息赋给一个绝对定位的元素.<br>&emsp;&emsp;来看下代码, 先creat个相对于body绝对定位的元素:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $follow = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">$follow.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'follow'</span>);</span><br><span class=\"line\">$body.appendChild($follow);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.follow</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;元素已经有了, 现在添加事件:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"built_in\">parseFloat</span>(e.clientX);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = <span class=\"built_in\">parseFloat</span>(e.clientY);</span><br><span class=\"line\">  $follow.style.left = x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  $follow.style.top = y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;移动跟随效果有了, 但是要多丑有多丑. 还有个小问题, 刚进入页面鼠标还没有移动的时候, 方块显示在左上角位置. 在css中加条规则:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.follow</span>&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;然后在事件中设置显示. 为了看起来更和谐, 将元素定位在鼠标的右边20px和下边20px处.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  $follow.style.display = <span class=\"string\">'block'</span>;</span><br><span class=\"line\">  $follow.style.left = x + <span class=\"number\">20</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  $follow.style.top = y + <span class=\"number\">20</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;可以将丑爆的背景颜色替换成背景图片, 最好还是动态的gif图, 看起来更有逼格.<br>&emsp;&emsp;原理很简单, 也就是入门一周的水平, 但是设计好了会产生比较炫酷的效果.<br>&emsp;&emsp;28行js代码实现的一个小<a href=\"https://zhangxuekang.com/mouse-show/index.html\">demo</a>.<br>&emsp;&emsp;<a href=\"https://github.com/zhangxuekang/mouse-show\" target=\"_blank\" rel=\"noopener\">github地址</a>.</p>\n"},{"title":"记录鼠标轨迹, 生成svg路径","date":"2019-03-30T00:50:45.000Z","header_image":"https://source.unsplash.com/random","_content":"&emsp;&emsp;业务上遇到了这样的问题, 在浏览器中, 使元素沿着用户画出的路径移动. 因为让元素沿着svg路径移动已经实现了, 所以需要做的是用鼠标画出路径. 鼠标方法只能获取鼠标在页面中的实时坐标, 是离散的坐标点, 如何将这些坐标点转化成平滑的路径是问题的关键.  \n![三次贝塞尔曲线](https://zhangxuekang.com/src/blog/mouse-svg/svg.png)\n&emsp;&emsp;svg的三次贝塞尔曲线需要定义一个点和两个控制点, 所以用C命令创建三次贝塞尔曲线, 需要设置三组坐标参数(c dx1 dy1, dx2 dy2, dx dy). *[这里的最后一个坐标(dx, dy)表示的是曲线的终点, 另外两个坐标是控制点, (dx1, dy1)是起点的控制点, (dx2, dy2)是终点的控制点](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths#Curve_commands)*. 终点的坐标点好说, 也就是获取的鼠标位置点, 难的是如何得到两个控制点.  \n&emsp;&emsp;网上搜索解决办法, 在百度文库上发现了一篇文章介绍控制点的确定方法(*[贝塞尔曲线控制点确定的方法](https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html)*). 现在来尝试下用这个方法转化坐标.  \n&emsp;&emsp;假设获取的一系列鼠标坐标保存在数组data[]中. \n```js\nconst data = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, ...];\n```\n以(x3, y3)点为例.\n```js\n/**\n * a为系数，可以尝试不同系数，观察结果\n */\n// 后控制点计算\nconst dx1 = x3 + a(x4 - x2);\nconst dy1 = y3 + a(y4 - y2);\n// 前控制点计算\nconst dx2 = x4 - a(x5 - x3);\nconst dy2 = y4 - a(y5 - y3);\n```\n那么依次求出每对点的控制点，就能连成一条平滑的曲线了. 开始的一对点作为起点不用求，第二对和最后一对点作为计算点，不做为记录点.  \n贴上完整代码:  \n```js\nfunction solve(data, k = 1) {\n  const size = data.length\n  const last = size - 4\n  let path = `M${data[0]},${data[1]}`\n  for (let i = 0; i < size - 2; i += 2) {\n    const x0 = i ? data[i - 2] : data[0]\n    const y0 = i ? data[i - 1] : data[1]\n    const x1 = data[i + 0]\n    const y1 = data[i + 1]\n    // x2 和 y2 作为终点坐标\n    const x2 = data[i + 2]\n    const y2 = data[i + 3]\n    const x3 = i !== last ? data[i + 4] : x2\n    const y3 = i !== last ? data[i + 5] : y2\n    // 计算控制点\n    const cp1x = x1 + (x2 - x0) / 6 * k\n    const cp1y = y1 + (y2 - y0) / 6 * k\n    const cp2x = x2 - (x3 - x1) / 6 * k\n    const cp2y = y2 - (y3 - y1) / 6 * k\n    path += ` C${cp1x},${cp1y},${cp2x},${cp2y},${x2},${y2}`\n  }\n\n  return path\n}\n```\n*[查看在线demo](https://zhangxuekang.com/mouse-svg/index.html)*\n","source":"_posts/mouse-svg.md","raw":"---\ntitle: 记录鼠标轨迹, 生成svg路径\ndate: 2019-03-30 08:50:45\ncategories:\n  - javascript\ntags:\n  - javascript\n  - 鼠标\n  - svg\nheader_image: https://source.unsplash.com/random\n---\n&emsp;&emsp;业务上遇到了这样的问题, 在浏览器中, 使元素沿着用户画出的路径移动. 因为让元素沿着svg路径移动已经实现了, 所以需要做的是用鼠标画出路径. 鼠标方法只能获取鼠标在页面中的实时坐标, 是离散的坐标点, 如何将这些坐标点转化成平滑的路径是问题的关键.  \n![三次贝塞尔曲线](https://zhangxuekang.com/src/blog/mouse-svg/svg.png)\n&emsp;&emsp;svg的三次贝塞尔曲线需要定义一个点和两个控制点, 所以用C命令创建三次贝塞尔曲线, 需要设置三组坐标参数(c dx1 dy1, dx2 dy2, dx dy). *[这里的最后一个坐标(dx, dy)表示的是曲线的终点, 另外两个坐标是控制点, (dx1, dy1)是起点的控制点, (dx2, dy2)是终点的控制点](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths#Curve_commands)*. 终点的坐标点好说, 也就是获取的鼠标位置点, 难的是如何得到两个控制点.  \n&emsp;&emsp;网上搜索解决办法, 在百度文库上发现了一篇文章介绍控制点的确定方法(*[贝塞尔曲线控制点确定的方法](https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html)*). 现在来尝试下用这个方法转化坐标.  \n&emsp;&emsp;假设获取的一系列鼠标坐标保存在数组data[]中. \n```js\nconst data = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, ...];\n```\n以(x3, y3)点为例.\n```js\n/**\n * a为系数，可以尝试不同系数，观察结果\n */\n// 后控制点计算\nconst dx1 = x3 + a(x4 - x2);\nconst dy1 = y3 + a(y4 - y2);\n// 前控制点计算\nconst dx2 = x4 - a(x5 - x3);\nconst dy2 = y4 - a(y5 - y3);\n```\n那么依次求出每对点的控制点，就能连成一条平滑的曲线了. 开始的一对点作为起点不用求，第二对和最后一对点作为计算点，不做为记录点.  \n贴上完整代码:  \n```js\nfunction solve(data, k = 1) {\n  const size = data.length\n  const last = size - 4\n  let path = `M${data[0]},${data[1]}`\n  for (let i = 0; i < size - 2; i += 2) {\n    const x0 = i ? data[i - 2] : data[0]\n    const y0 = i ? data[i - 1] : data[1]\n    const x1 = data[i + 0]\n    const y1 = data[i + 1]\n    // x2 和 y2 作为终点坐标\n    const x2 = data[i + 2]\n    const y2 = data[i + 3]\n    const x3 = i !== last ? data[i + 4] : x2\n    const y3 = i !== last ? data[i + 5] : y2\n    // 计算控制点\n    const cp1x = x1 + (x2 - x0) / 6 * k\n    const cp1y = y1 + (y2 - y0) / 6 * k\n    const cp2x = x2 - (x3 - x1) / 6 * k\n    const cp2y = y2 - (y3 - y1) / 6 * k\n    path += ` C${cp1x},${cp1y},${cp2x},${cp2y},${x2},${y2}`\n  }\n\n  return path\n}\n```\n*[查看在线demo](https://zhangxuekang.com/mouse-svg/index.html)*\n","slug":"mouse-svg","published":1,"updated":"2019-04-07T00:36:53.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nkh0007142dpmv4iywc","content":"<p>&emsp;&emsp;业务上遇到了这样的问题, 在浏览器中, 使元素沿着用户画出的路径移动. 因为让元素沿着svg路径移动已经实现了, 所以需要做的是用鼠标画出路径. 鼠标方法只能获取鼠标在页面中的实时坐标, 是离散的坐标点, 如何将这些坐标点转化成平滑的路径是问题的关键.<br><img src=\"https://zhangxuekang.com/src/blog/mouse-svg/svg.png\" alt=\"三次贝塞尔曲线\"><br>&emsp;&emsp;svg的三次贝塞尔曲线需要定义一个点和两个控制点, 所以用C命令创建三次贝塞尔曲线, 需要设置三组坐标参数(c dx1 dy1, dx2 dy2, dx dy). <em><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths#Curve_commands\" target=\"_blank\" rel=\"noopener\">这里的最后一个坐标(dx, dy)表示的是曲线的终点, 另外两个坐标是控制点, (dx1, dy1)是起点的控制点, (dx2, dy2)是终点的控制点</a></em>. 终点的坐标点好说, 也就是获取的鼠标位置点, 难的是如何得到两个控制点.<br>&emsp;&emsp;网上搜索解决办法, 在百度文库上发现了一篇文章介绍控制点的确定方法(<em><a href=\"https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线控制点确定的方法</a></em>). 现在来尝试下用这个方法转化坐标.<br>&emsp;&emsp;假设获取的一系列鼠标坐标保存在数组data[]中.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, ...];</span><br></pre></td></tr></table></figure></p>\n<p>以(x3, y3)点为例.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * a为系数，可以尝试不同系数，观察结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 后控制点计算</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dx1 = x3 + a(x4 - x2);</span><br><span class=\"line\"><span class=\"keyword\">const</span> dy1 = y3 + a(y4 - y2);</span><br><span class=\"line\"><span class=\"comment\">// 前控制点计算</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dx2 = x4 - a(x5 - x3);</span><br><span class=\"line\"><span class=\"keyword\">const</span> dy2 = y4 - a(y5 - y3);</span><br></pre></td></tr></table></figure></p>\n<p>那么依次求出每对点的控制点，就能连成一条平滑的曲线了. 开始的一对点作为起点不用求，第二对和最后一对点作为计算点，不做为记录点.<br>贴上完整代码:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solve</span>(<span class=\"params\">data, k = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> size = data.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> last = size - <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> path = <span class=\"string\">`M<span class=\"subst\">$&#123;data[<span class=\"number\">0</span>]&#125;</span>,<span class=\"subst\">$&#123;data[<span class=\"number\">1</span>]&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; size - <span class=\"number\">2</span>; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x0 = i ? data[i - <span class=\"number\">2</span>] : data[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y0 = i ? data[i - <span class=\"number\">1</span>] : data[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x1 = data[i + <span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y1 = data[i + <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\">// x2 和 y2 作为终点坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> x2 = data[i + <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y2 = data[i + <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x3 = i !== last ? data[i + <span class=\"number\">4</span>] : x2</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y3 = i !== last ? data[i + <span class=\"number\">5</span>] : y2</span><br><span class=\"line\">    <span class=\"comment\">// 计算控制点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> cp1x = x1 + (x2 - x0) / <span class=\"number\">6</span> * k</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cp1y = y1 + (y2 - y0) / <span class=\"number\">6</span> * k</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cp2x = x2 - (x3 - x1) / <span class=\"number\">6</span> * k</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cp2y = y2 - (y3 - y1) / <span class=\"number\">6</span> * k</span><br><span class=\"line\">    path += <span class=\"string\">` C<span class=\"subst\">$&#123;cp1x&#125;</span>,<span class=\"subst\">$&#123;cp1y&#125;</span>,<span class=\"subst\">$&#123;cp2x&#125;</span>,<span class=\"subst\">$&#123;cp2y&#125;</span>,<span class=\"subst\">$&#123;x2&#125;</span>,<span class=\"subst\">$&#123;y2&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> path</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em><a href=\"https://zhangxuekang.com/mouse-svg/index.html\">查看在线demo</a></em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;业务上遇到了这样的问题, 在浏览器中, 使元素沿着用户画出的路径移动. 因为让元素沿着svg路径移动已经实现了, 所以需要做的是用鼠标画出路径. 鼠标方法只能获取鼠标在页面中的实时坐标, 是离散的坐标点, 如何将这些坐标点转化成平滑的路径是问题的关键.<br><img src=\"https://zhangxuekang.com/src/blog/mouse-svg/svg.png\" alt=\"三次贝塞尔曲线\"><br>&emsp;&emsp;svg的三次贝塞尔曲线需要定义一个点和两个控制点, 所以用C命令创建三次贝塞尔曲线, 需要设置三组坐标参数(c dx1 dy1, dx2 dy2, dx dy). <em><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths#Curve_commands\" target=\"_blank\" rel=\"noopener\">这里的最后一个坐标(dx, dy)表示的是曲线的终点, 另外两个坐标是控制点, (dx1, dy1)是起点的控制点, (dx2, dy2)是终点的控制点</a></em>. 终点的坐标点好说, 也就是获取的鼠标位置点, 难的是如何得到两个控制点.<br>&emsp;&emsp;网上搜索解决办法, 在百度文库上发现了一篇文章介绍控制点的确定方法(<em><a href=\"https://wenku.baidu.com/view/c790f8d46bec0975f565e211.html\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线控制点确定的方法</a></em>). 现在来尝试下用这个方法转化坐标.<br>&emsp;&emsp;假设获取的一系列鼠标坐标保存在数组data[]中.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, ...];</span><br></pre></td></tr></table></figure></p>\n<p>以(x3, y3)点为例.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * a为系数，可以尝试不同系数，观察结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 后控制点计算</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dx1 = x3 + a(x4 - x2);</span><br><span class=\"line\"><span class=\"keyword\">const</span> dy1 = y3 + a(y4 - y2);</span><br><span class=\"line\"><span class=\"comment\">// 前控制点计算</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dx2 = x4 - a(x5 - x3);</span><br><span class=\"line\"><span class=\"keyword\">const</span> dy2 = y4 - a(y5 - y3);</span><br></pre></td></tr></table></figure></p>\n<p>那么依次求出每对点的控制点，就能连成一条平滑的曲线了. 开始的一对点作为起点不用求，第二对和最后一对点作为计算点，不做为记录点.<br>贴上完整代码:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solve</span>(<span class=\"params\">data, k = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> size = data.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> last = size - <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> path = <span class=\"string\">`M<span class=\"subst\">$&#123;data[<span class=\"number\">0</span>]&#125;</span>,<span class=\"subst\">$&#123;data[<span class=\"number\">1</span>]&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; size - <span class=\"number\">2</span>; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x0 = i ? data[i - <span class=\"number\">2</span>] : data[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y0 = i ? data[i - <span class=\"number\">1</span>] : data[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x1 = data[i + <span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y1 = data[i + <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"comment\">// x2 和 y2 作为终点坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> x2 = data[i + <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y2 = data[i + <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x3 = i !== last ? data[i + <span class=\"number\">4</span>] : x2</span><br><span class=\"line\">    <span class=\"keyword\">const</span> y3 = i !== last ? data[i + <span class=\"number\">5</span>] : y2</span><br><span class=\"line\">    <span class=\"comment\">// 计算控制点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> cp1x = x1 + (x2 - x0) / <span class=\"number\">6</span> * k</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cp1y = y1 + (y2 - y0) / <span class=\"number\">6</span> * k</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cp2x = x2 - (x3 - x1) / <span class=\"number\">6</span> * k</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cp2y = y2 - (y3 - y1) / <span class=\"number\">6</span> * k</span><br><span class=\"line\">    path += <span class=\"string\">` C<span class=\"subst\">$&#123;cp1x&#125;</span>,<span class=\"subst\">$&#123;cp1y&#125;</span>,<span class=\"subst\">$&#123;cp2x&#125;</span>,<span class=\"subst\">$&#123;cp2y&#125;</span>,<span class=\"subst\">$&#123;x2&#125;</span>,<span class=\"subst\">$&#123;y2&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> path</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em><a href=\"https://zhangxuekang.com/mouse-svg/index.html\">查看在线demo</a></em></p>\n"},{"title":"个人项目集合","date":"2100-01-01T16:00:00.000Z","header_image":"https://source.unsplash.com/random","_content":"# 游戏  \n* [贪吃蛇](https://zhangxuekang.com/snake/index.html)\n* [坦克大战](https://zhangxuekang.com/tank/tank.html)\n\n# 其他  \n* [draft.js富文本编辑器](https://zhangxuekang.com/rich-text/index.html)\n* [localStorage日历](https://zhangxuekang.com/web-calendar/index.html)\n* [跟随鼠标移动的文字特效](https://zhangxuekang.com/mouse-show/index.html)\n* [鼠标轨迹转svg](https://zhangxuekang.com/mouse-svg/index.html)","source":"_posts/projects.md","raw":"---\ntitle: 个人项目集合\ndate: 2100-01-02 00:00:00\ncategories:\n  - 项目\nheader_image: https://source.unsplash.com/random\n---\n# 游戏  \n* [贪吃蛇](https://zhangxuekang.com/snake/index.html)\n* [坦克大战](https://zhangxuekang.com/tank/tank.html)\n\n# 其他  \n* [draft.js富文本编辑器](https://zhangxuekang.com/rich-text/index.html)\n* [localStorage日历](https://zhangxuekang.com/web-calendar/index.html)\n* [跟随鼠标移动的文字特效](https://zhangxuekang.com/mouse-show/index.html)\n* [鼠标轨迹转svg](https://zhangxuekang.com/mouse-svg/index.html)","slug":"projects","published":1,"updated":"2019-09-01T08:48:51.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nki0008142datx6nt3m","content":"<h1 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h1><ul>\n<li><a href=\"https://zhangxuekang.com/snake/index.html\">贪吃蛇</a></li>\n<li><a href=\"https://zhangxuekang.com/tank/tank.html\">坦克大战</a></li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li><a href=\"https://zhangxuekang.com/rich-text/index.html\">draft.js富文本编辑器</a></li>\n<li><a href=\"https://zhangxuekang.com/web-calendar/index.html\">localStorage日历</a></li>\n<li><a href=\"https://zhangxuekang.com/mouse-show/index.html\">跟随鼠标移动的文字特效</a></li>\n<li><a href=\"https://zhangxuekang.com/mouse-svg/index.html\">鼠标轨迹转svg</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h1><ul>\n<li><a href=\"https://zhangxuekang.com/snake/index.html\">贪吃蛇</a></li>\n<li><a href=\"https://zhangxuekang.com/tank/tank.html\">坦克大战</a></li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li><a href=\"https://zhangxuekang.com/rich-text/index.html\">draft.js富文本编辑器</a></li>\n<li><a href=\"https://zhangxuekang.com/web-calendar/index.html\">localStorage日历</a></li>\n<li><a href=\"https://zhangxuekang.com/mouse-show/index.html\">跟随鼠标移动的文字特效</a></li>\n<li><a href=\"https://zhangxuekang.com/mouse-svg/index.html\">鼠标轨迹转svg</a></li>\n</ul>\n"},{"title":"移动端页面元素尺寸解决方案之一","date":"2020-01-03T08:14:05.000Z","header_image":"https://source.unsplash.com/random","_content":"如果html5要适应各种分辨率的移动设备,应该使用rem这样的尺寸单位.主流做法基本也都是这样做的.但是,如果html5页面是在webview中打开的,并且webview不是通常的手机视窗尺寸,而是占了部分页面,使用rem单位的转化标准就没有了通用性.面对这种情况,可以尝试以下的解决方案.\n<img alt=\"非全屏的webview\" src=\"https://zhangxuekang.com/src/blog/mobile-size-set/mobile-size.png\" width=\"60%\">\n## 使用transform的scale来适配所有尺寸的view\n设计稿的尺寸一般是px,那么写页面的时候,就使用px单位,大小和设计稿保持一致就好.内容区域的最外层使用scale缩放,缩放的比例根据内容区原始的尺寸与渲染区域(如果是webview中就是webview的大小,如果是浏览器中就是浏览器视窗的大小)的比例来决定的.\n\n举个例子,写个demo:\n```html\n<body>\n  <div class=\"main\">\n  </div>\n</body>\n```\nclass为main的dev是内容区域,内部可以随意添加布置元素.想达到的效果是main元素随着窗口等比例放大缩小,宽最大不超过视窗的宽,高最大不超过视窗的高.\nmain元素关键样式:\n```css\n /* 宽高根据设计稿来就行,不必须是正方形区域 */\n.main {\n  position: absolute;\n  width: 720px;\n  height: 720px;\n  left: 50%;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%);\n  transform-origin: center center;\n}\n```\n页面加载好后,监听视窗尺寸的变化,修改main元素的transform属性:\n```js\nwindow.addEventListener('resize', updateSize)\nwindow.addEventListener('load', updateSize)\nfunction updateSize() {\n  // 获取视窗尺寸\n  const bodyW = document.documentElement.clientWidth;\n  const bodyH = document.documentElement.clientHeight;\n  // 计算比例,用视窗尺寸与内容的实际尺寸相除\n  const wScale = bodyW / 720;\n  const hScale = bodyH / 720;\n  const scale = Math.min(wScale, hScale);\n  const $main = document.querySelector('.main');\n  $main.style.transform = `translateX(-50%) translateY(-50%) scale(${scale})`;\n}\n```\n[点击这里看demo,修改浏览器视窗大小看效果](https://zhangxuekang.com/src/blog/mobile-size-set/hedgehog.html)\n\n\n","source":"_posts/mobile-size-set.md","raw":"---\ntitle: 移动端页面元素尺寸解决方案之一\ndate: 2020-01-03 16:14:05\ncategories:\n  - html\ntags:\n  - html\n  - 移动端\n  - 尺寸\nheader_image: https://source.unsplash.com/random\n---\n如果html5要适应各种分辨率的移动设备,应该使用rem这样的尺寸单位.主流做法基本也都是这样做的.但是,如果html5页面是在webview中打开的,并且webview不是通常的手机视窗尺寸,而是占了部分页面,使用rem单位的转化标准就没有了通用性.面对这种情况,可以尝试以下的解决方案.\n<img alt=\"非全屏的webview\" src=\"https://zhangxuekang.com/src/blog/mobile-size-set/mobile-size.png\" width=\"60%\">\n## 使用transform的scale来适配所有尺寸的view\n设计稿的尺寸一般是px,那么写页面的时候,就使用px单位,大小和设计稿保持一致就好.内容区域的最外层使用scale缩放,缩放的比例根据内容区原始的尺寸与渲染区域(如果是webview中就是webview的大小,如果是浏览器中就是浏览器视窗的大小)的比例来决定的.\n\n举个例子,写个demo:\n```html\n<body>\n  <div class=\"main\">\n  </div>\n</body>\n```\nclass为main的dev是内容区域,内部可以随意添加布置元素.想达到的效果是main元素随着窗口等比例放大缩小,宽最大不超过视窗的宽,高最大不超过视窗的高.\nmain元素关键样式:\n```css\n /* 宽高根据设计稿来就行,不必须是正方形区域 */\n.main {\n  position: absolute;\n  width: 720px;\n  height: 720px;\n  left: 50%;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%);\n  transform-origin: center center;\n}\n```\n页面加载好后,监听视窗尺寸的变化,修改main元素的transform属性:\n```js\nwindow.addEventListener('resize', updateSize)\nwindow.addEventListener('load', updateSize)\nfunction updateSize() {\n  // 获取视窗尺寸\n  const bodyW = document.documentElement.clientWidth;\n  const bodyH = document.documentElement.clientHeight;\n  // 计算比例,用视窗尺寸与内容的实际尺寸相除\n  const wScale = bodyW / 720;\n  const hScale = bodyH / 720;\n  const scale = Math.min(wScale, hScale);\n  const $main = document.querySelector('.main');\n  $main.style.transform = `translateX(-50%) translateY(-50%) scale(${scale})`;\n}\n```\n[点击这里看demo,修改浏览器视窗大小看效果](https://zhangxuekang.com/src/blog/mobile-size-set/hedgehog.html)\n\n\n","slug":"mobile-size-set","published":1,"updated":"2020-01-03T09:09:24.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nkj000a142d2qx7foap","content":"<p>如果html5要适应各种分辨率的移动设备,应该使用rem这样的尺寸单位.主流做法基本也都是这样做的.但是,如果html5页面是在webview中打开的,并且webview不是通常的手机视窗尺寸,而是占了部分页面,使用rem单位的转化标准就没有了通用性.面对这种情况,可以尝试以下的解决方案.<br><img alt=\"非全屏的webview\" src=\"https://zhangxuekang.com/src/blog/mobile-size-set/mobile-size.png\" width=\"60%\"></p>\n<h2 id=\"使用transform的scale来适配所有尺寸的view\"><a href=\"#使用transform的scale来适配所有尺寸的view\" class=\"headerlink\" title=\"使用transform的scale来适配所有尺寸的view\"></a>使用transform的scale来适配所有尺寸的view</h2><p>设计稿的尺寸一般是px,那么写页面的时候,就使用px单位,大小和设计稿保持一致就好.内容区域的最外层使用scale缩放,缩放的比例根据内容区原始的尺寸与渲染区域(如果是webview中就是webview的大小,如果是浏览器中就是浏览器视窗的大小)的比例来决定的.</p>\n<p>举个例子,写个demo:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>class为main的dev是内容区域,内部可以随意添加布置元素.想达到的效果是main元素随着窗口等比例放大缩小,宽最大不超过视窗的宽,高最大不超过视窗的高.<br>main元素关键样式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/* 宽高根据设计稿来就行,不必须是正方形区域 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">720px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">720px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-50%) <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">  <span class=\"attribute\">transform-origin</span>: center center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>页面加载好后,监听视窗尺寸的变化,修改main元素的transform属性:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, updateSize)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, updateSize)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateSize</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取视窗尺寸</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bodyW = <span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bodyH = <span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">  <span class=\"comment\">// 计算比例,用视窗尺寸与内容的实际尺寸相除</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> wScale = bodyW / <span class=\"number\">720</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hScale = bodyH / <span class=\"number\">720</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> scale = <span class=\"built_in\">Math</span>.min(wScale, hScale);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> $main = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.main'</span>);</span><br><span class=\"line\">  $main.style.transform = <span class=\"string\">`translateX(-50%) translateY(-50%) scale(<span class=\"subst\">$&#123;scale&#125;</span>)`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://zhangxuekang.com/src/blog/mobile-size-set/hedgehog.html\">点击这里看demo,修改浏览器视窗大小看效果</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果html5要适应各种分辨率的移动设备,应该使用rem这样的尺寸单位.主流做法基本也都是这样做的.但是,如果html5页面是在webview中打开的,并且webview不是通常的手机视窗尺寸,而是占了部分页面,使用rem单位的转化标准就没有了通用性.面对这种情况,可以尝试以下的解决方案.<br><img alt=\"非全屏的webview\" src=\"https://zhangxuekang.com/src/blog/mobile-size-set/mobile-size.png\" width=\"60%\"></p>\n<h2 id=\"使用transform的scale来适配所有尺寸的view\"><a href=\"#使用transform的scale来适配所有尺寸的view\" class=\"headerlink\" title=\"使用transform的scale来适配所有尺寸的view\"></a>使用transform的scale来适配所有尺寸的view</h2><p>设计稿的尺寸一般是px,那么写页面的时候,就使用px单位,大小和设计稿保持一致就好.内容区域的最外层使用scale缩放,缩放的比例根据内容区原始的尺寸与渲染区域(如果是webview中就是webview的大小,如果是浏览器中就是浏览器视窗的大小)的比例来决定的.</p>\n<p>举个例子,写个demo:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>class为main的dev是内容区域,内部可以随意添加布置元素.想达到的效果是main元素随着窗口等比例放大缩小,宽最大不超过视窗的宽,高最大不超过视窗的高.<br>main元素关键样式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/* 宽高根据设计稿来就行,不必须是正方形区域 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">720px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">720px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-50%) <span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">  <span class=\"attribute\">transform-origin</span>: center center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>页面加载好后,监听视窗尺寸的变化,修改main元素的transform属性:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, updateSize)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, updateSize)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateSize</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取视窗尺寸</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bodyW = <span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bodyH = <span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">  <span class=\"comment\">// 计算比例,用视窗尺寸与内容的实际尺寸相除</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> wScale = bodyW / <span class=\"number\">720</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hScale = bodyH / <span class=\"number\">720</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> scale = <span class=\"built_in\">Math</span>.min(wScale, hScale);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> $main = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.main'</span>);</span><br><span class=\"line\">  $main.style.transform = <span class=\"string\">`translateX(-50%) translateY(-50%) scale(<span class=\"subst\">$&#123;scale&#125;</span>)`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://zhangxuekang.com/src/blog/mobile-size-set/hedgehog.html\">点击这里看demo,修改浏览器视窗大小看效果</a></p>\n"},{"title":"踩坑之路","date":"2019-05-22T02:20:21.000Z","header_image":"https://source.unsplash.com/random","_content":"1. ### border dashed在部分机型(ios/Android)上不显示\n   解决方法: 添加属性border-radius, 值设置为0.5或者1都行, 实际中设置了0.1, 样式影响很小. 附上大佬们在github上的讨论:  \n   [*borderStyle ‘dashed’ didn’t work when borderBottomWidth set*](https://github.com/facebook/react-native/issues/12817)  \n\n2. ### 元素设置transform scale后的定位问题\n   scale缩放相当于使用放大镜看局部的元素, 眼睛看到元素变大或者缩小了, 但是他实际的大小和占位是不变的, 不会影响周围元素的排布. 如果元素是绝对定位的, left和top是根据元素本来的大小尺寸定位来计算的, 和放大后眼睛看到的'虚像'无关, 但是鼠标点点击区域和眼睛看到的区域值一致的.  \n\n3. ### window.location.search为空\n   亲测3条法则：  \n   1、第一个#号后边的任何字符（包括？#等特殊字符），直到href结束，都是hash部分。  \n   2、第一个？号后边的非#字符，直到出现#号或者href结束，都是search部分。  \n   3、第1条规则优先级大于第2条规则。  \n   所以检查是否在？号前边出现了#号，如果出现了，那么search部分是空的，？号部分出现在了hash里边。\n   \n","source":"_posts/trap.md","raw":"---\ntitle: 踩坑之路\ndate: 2019-05-22 10:20:21\ncategories:\n  - common\nheader_image: https://source.unsplash.com/random\n---\n1. ### border dashed在部分机型(ios/Android)上不显示\n   解决方法: 添加属性border-radius, 值设置为0.5或者1都行, 实际中设置了0.1, 样式影响很小. 附上大佬们在github上的讨论:  \n   [*borderStyle ‘dashed’ didn’t work when borderBottomWidth set*](https://github.com/facebook/react-native/issues/12817)  \n\n2. ### 元素设置transform scale后的定位问题\n   scale缩放相当于使用放大镜看局部的元素, 眼睛看到元素变大或者缩小了, 但是他实际的大小和占位是不变的, 不会影响周围元素的排布. 如果元素是绝对定位的, left和top是根据元素本来的大小尺寸定位来计算的, 和放大后眼睛看到的'虚像'无关, 但是鼠标点点击区域和眼睛看到的区域值一致的.  \n\n3. ### window.location.search为空\n   亲测3条法则：  \n   1、第一个#号后边的任何字符（包括？#等特殊字符），直到href结束，都是hash部分。  \n   2、第一个？号后边的非#字符，直到出现#号或者href结束，都是search部分。  \n   3、第1条规则优先级大于第2条规则。  \n   所以检查是否在？号前边出现了#号，如果出现了，那么search部分是空的，？号部分出现在了hash里边。\n   \n","slug":"trap","published":1,"updated":"2019-05-28T07:32:58.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nkk000c142do0a2d0ij","content":"<ol>\n<li><h3 id=\"border-dashed在部分机型-ios-Android-上不显示\"><a href=\"#border-dashed在部分机型-ios-Android-上不显示\" class=\"headerlink\" title=\"border dashed在部分机型(ios/Android)上不显示\"></a>border dashed在部分机型(ios/Android)上不显示</h3><p>解决方法: 添加属性border-radius, 值设置为0.5或者1都行, 实际中设置了0.1, 样式影响很小. 附上大佬们在github上的讨论:<br><a href=\"https://github.com/facebook/react-native/issues/12817\" target=\"_blank\" rel=\"noopener\"><em>borderStyle ‘dashed’ didn’t work when borderBottomWidth set</em></a>  </p>\n</li>\n<li><h3 id=\"元素设置transform-scale后的定位问题\"><a href=\"#元素设置transform-scale后的定位问题\" class=\"headerlink\" title=\"元素设置transform scale后的定位问题\"></a>元素设置transform scale后的定位问题</h3><p>scale缩放相当于使用放大镜看局部的元素, 眼睛看到元素变大或者缩小了, 但是他实际的大小和占位是不变的, 不会影响周围元素的排布. 如果元素是绝对定位的, left和top是根据元素本来的大小尺寸定位来计算的, 和放大后眼睛看到的’虚像’无关, 但是鼠标点点击区域和眼睛看到的区域值一致的.  </p>\n</li>\n<li><h3 id=\"window-location-search为空\"><a href=\"#window-location-search为空\" class=\"headerlink\" title=\"window.location.search为空\"></a>window.location.search为空</h3><p>亲测3条法则：<br>1、第一个#号后边的任何字符（包括？#等特殊字符），直到href结束，都是hash部分。<br>2、第一个？号后边的非#字符，直到出现#号或者href结束，都是search部分。<br>3、第1条规则优先级大于第2条规则。<br>所以检查是否在？号前边出现了#号，如果出现了，那么search部分是空的，？号部分出现在了hash里边。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><h3 id=\"border-dashed在部分机型-ios-Android-上不显示\"><a href=\"#border-dashed在部分机型-ios-Android-上不显示\" class=\"headerlink\" title=\"border dashed在部分机型(ios/Android)上不显示\"></a>border dashed在部分机型(ios/Android)上不显示</h3><p>解决方法: 添加属性border-radius, 值设置为0.5或者1都行, 实际中设置了0.1, 样式影响很小. 附上大佬们在github上的讨论:<br><a href=\"https://github.com/facebook/react-native/issues/12817\" target=\"_blank\" rel=\"noopener\"><em>borderStyle ‘dashed’ didn’t work when borderBottomWidth set</em></a>  </p>\n</li>\n<li><h3 id=\"元素设置transform-scale后的定位问题\"><a href=\"#元素设置transform-scale后的定位问题\" class=\"headerlink\" title=\"元素设置transform scale后的定位问题\"></a>元素设置transform scale后的定位问题</h3><p>scale缩放相当于使用放大镜看局部的元素, 眼睛看到元素变大或者缩小了, 但是他实际的大小和占位是不变的, 不会影响周围元素的排布. 如果元素是绝对定位的, left和top是根据元素本来的大小尺寸定位来计算的, 和放大后眼睛看到的’虚像’无关, 但是鼠标点点击区域和眼睛看到的区域值一致的.  </p>\n</li>\n<li><h3 id=\"window-location-search为空\"><a href=\"#window-location-search为空\" class=\"headerlink\" title=\"window.location.search为空\"></a>window.location.search为空</h3><p>亲测3条法则：<br>1、第一个#号后边的任何字符（包括？#等特殊字符），直到href结束，都是hash部分。<br>2、第一个？号后边的非#字符，直到出现#号或者href结束，都是search部分。<br>3、第1条规则优先级大于第2条规则。<br>所以检查是否在？号前边出现了#号，如果出现了，那么search部分是空的，？号部分出现在了hash里边。</p>\n</li>\n</ol>\n"},{"title":"使元素的高度根据宽度变化的一种实现方式","date":"2019-12-11T09:05:03.000Z","header_image":"https://source.unsplash.com/random","_content":"\n如果padding属性的值是百分比值,这个值是根据父元素的宽度(X周属性)计算的,即使是Y轴上的padding(padding-top,padding-bottom)也是如此,根据这个特性,可以实现Y轴尺寸和X轴尺寸相关联的效果.  \n比如这样写css:\n```css\n.target {\n  width: 50%;\n  height: 0;\n  padding-bottom: 50%;\n  background-color: black;\n}\n```\nwidth:50%,宽度是父元素宽度的50%;height:0,内容高度设置为0,使元素所占空间完全由padding决定;padding-bottom: 50%,元素的下部padding的宽度是父元素宽度的50%,这个计算标准和元素的高度保持一致,所以就能实现一个正方型的区域.  \n其实,虽然元素的内容区域高度是0,只要padding有位置,内部还是可以正常放置子元素的.\n[在线demo](https://zhangxuekang.com/src/blog/width-height/index.html)\n\n","source":"_posts/width-height.md","raw":"---\ntitle: 使元素的高度根据宽度变化的一种实现方式\ndate: 2019-12-11 17:05:03\ncategories:\n  - css\ntags:\n  - css\nheader_image: https://source.unsplash.com/random\n---\n\n如果padding属性的值是百分比值,这个值是根据父元素的宽度(X周属性)计算的,即使是Y轴上的padding(padding-top,padding-bottom)也是如此,根据这个特性,可以实现Y轴尺寸和X轴尺寸相关联的效果.  \n比如这样写css:\n```css\n.target {\n  width: 50%;\n  height: 0;\n  padding-bottom: 50%;\n  background-color: black;\n}\n```\nwidth:50%,宽度是父元素宽度的50%;height:0,内容高度设置为0,使元素所占空间完全由padding决定;padding-bottom: 50%,元素的下部padding的宽度是父元素宽度的50%,这个计算标准和元素的高度保持一致,所以就能实现一个正方型的区域.  \n其实,虽然元素的内容区域高度是0,只要padding有位置,内部还是可以正常放置子元素的.\n[在线demo](https://zhangxuekang.com/src/blog/width-height/index.html)\n\n","slug":"width-height","published":1,"updated":"2019-12-11T09:25:16.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nkl000e142drdhx8htd","content":"<p>如果padding属性的值是百分比值,这个值是根据父元素的宽度(X周属性)计算的,即使是Y轴上的padding(padding-top,padding-bottom)也是如此,根据这个特性,可以实现Y轴尺寸和X轴尺寸相关联的效果.<br>比如这样写css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.target</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>width:50%,宽度是父元素宽度的50%;height:0,内容高度设置为0,使元素所占空间完全由padding决定;padding-bottom: 50%,元素的下部padding的宽度是父元素宽度的50%,这个计算标准和元素的高度保持一致,所以就能实现一个正方型的区域.<br>其实,虽然元素的内容区域高度是0,只要padding有位置,内部还是可以正常放置子元素的.<br><a href=\"https://zhangxuekang.com/src/blog/width-height/index.html\">在线demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果padding属性的值是百分比值,这个值是根据父元素的宽度(X周属性)计算的,即使是Y轴上的padding(padding-top,padding-bottom)也是如此,根据这个特性,可以实现Y轴尺寸和X轴尺寸相关联的效果.<br>比如这样写css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.target</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>width:50%,宽度是父元素宽度的50%;height:0,内容高度设置为0,使元素所占空间完全由padding决定;padding-bottom: 50%,元素的下部padding的宽度是父元素宽度的50%,这个计算标准和元素的高度保持一致,所以就能实现一个正方型的区域.<br>其实,虽然元素的内容区域高度是0,只要padding有位置,内部还是可以正常放置子元素的.<br><a href=\"https://zhangxuekang.com/src/blog/width-height/index.html\">在线demo</a></p>\n"},{"title":"Unicode笔记","date":"2019-05-23T12:54:08.000Z","header_image":"https://source.unsplash.com/random","_content":"## 1. Unicode是什么？  \n有一个想法，将全世界所有的字符号都包含在一个集合里边，任何机器支持这一个集合就行了，再也不会有乱码了。基于这个想法，Unicode码应运而生。它用数字编号来表示符号，到7.0版，已经有了109449个符号。一般用26进制表示，'U+4E49'表示字符'义'，'U+'是前缀，整体叫做*码点*。  \n集合分为几个区间，U+0000~U+FFFF是最常用的字符，称为*基本平面*，剩下的U+010000~U+10FFFF称为*辅助平面*。  \n## 2. 编码方式\n平常说的UTF-8，UTF-16就是说的码点的编码方式。UTF-32指无论是什么码点，一律使用4个字节表示，一共是8位16进制数，位数不足的，在前边补0，例如U+389D = 0x0000 389D。UTF-8字节数灵活，用1个字节能表示的用1个字节，用两个字节才能表示的，用两个字节，还可能是3个4个字节。同样的文本UTF-8占的存储空间比UTF32小多了。所以，网页编码大部分使用的是UTF-8。  \n## 3. UTF-16 \n重点说一下UTF-16。UTF-16介于以上两者之间，规则也很简单，基本平面的字符占用2个字节，辅助平面的字节占用4个字节。因为常用的字符都在基本平面，所以UTF-16比UTF-32所占空间要小。当我们看到4个字节，如果前两个字节码点的范围是U+D800到U+DBFF，那么后两个字节码点一般在U+DC00到U+DFFF范围内，那么它就是一个4字节字符。但是U+D800到U+DBFF范围内的2个字节的字符怎么办？在基本平面里边U+D800~U+DBFF是一个空段，不对应任何字符（不知道是不是有意为之），所以用这段来表示4字节字符的前段，也叫高位，后边的U+DC00到U+DFFF叫低位。\n>所以，当我们遇到两个字节，发现它的码点在U+D800到U+DBFF之间，就可以断定，紧跟在后面的两个字节的码点，应该在U+DC00到U+DFFF之间，这四个字节必须放在一起解读。  \n\n给一个辅助平面的码点，怎么转化成UTF-164字节形式呢？有一个公式可用：\n```js\nH = Math.floor((c - 0x10000) / 0x400) + 0xD800\nL = (c - 0x10000) % 0x400 + 0xDC00\n```  \n## 4. javascript中的Unicode  \njavascript采用Unicode字符集，支持的编码方式是UCS-2。UTF-16是UCS-2的超集，至于UCS-2是什么，请自行百度。在javascript中处理字符串时，可以看做是UTF-16编码。遇到4个字节的字符，String.prototype.length会得到2，不过在es6中增加了新的api处理4个字节字符的方法，这里就不展开介绍了。js中的表示方法是'\\u'+四位16进制数，例如'\\u4f60'表示中文'你'，这是一个长度是1的字符。'\\u004F\\u030C'表示符号'Ǒ'，lendth长度是2。匹配辅助平面的字符的正则：/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/，匹配到的字符length都是2。首先要将码点转化为高位和低位形式，再与正则比较判断。  \n## 5. javascript中处理emoji  \nemoji实质上也是Unicode码，也可以在javascript中处理。大部分emoji是4个字节，由高位+低位两端编码组成，只要解析的时候不把高位和低位分开，就不会出现'乱码'的情况。但是有些emoji是由多个emoji连接而成，例如：  \n```js\nU+1F468：男人\nU+1F469：女人\nU+1F467：女孩\n```  \n使用连接符号U+200D连接，U+1F468 U+200D U+1F469 U+200D U+1F467，就会显示一个新的emoji表情：家庭，但是如果系统不支持这种表示，还是会显示3个单独的表情。","source":"_posts/unicode.md","raw":"---\ntitle: Unicode笔记\ndate: 2019-05-23 20:54:08\ntags:\ncategories:\n  - common\nheader_image: https://source.unsplash.com/random\n---\n## 1. Unicode是什么？  \n有一个想法，将全世界所有的字符号都包含在一个集合里边，任何机器支持这一个集合就行了，再也不会有乱码了。基于这个想法，Unicode码应运而生。它用数字编号来表示符号，到7.0版，已经有了109449个符号。一般用26进制表示，'U+4E49'表示字符'义'，'U+'是前缀，整体叫做*码点*。  \n集合分为几个区间，U+0000~U+FFFF是最常用的字符，称为*基本平面*，剩下的U+010000~U+10FFFF称为*辅助平面*。  \n## 2. 编码方式\n平常说的UTF-8，UTF-16就是说的码点的编码方式。UTF-32指无论是什么码点，一律使用4个字节表示，一共是8位16进制数，位数不足的，在前边补0，例如U+389D = 0x0000 389D。UTF-8字节数灵活，用1个字节能表示的用1个字节，用两个字节才能表示的，用两个字节，还可能是3个4个字节。同样的文本UTF-8占的存储空间比UTF32小多了。所以，网页编码大部分使用的是UTF-8。  \n## 3. UTF-16 \n重点说一下UTF-16。UTF-16介于以上两者之间，规则也很简单，基本平面的字符占用2个字节，辅助平面的字节占用4个字节。因为常用的字符都在基本平面，所以UTF-16比UTF-32所占空间要小。当我们看到4个字节，如果前两个字节码点的范围是U+D800到U+DBFF，那么后两个字节码点一般在U+DC00到U+DFFF范围内，那么它就是一个4字节字符。但是U+D800到U+DBFF范围内的2个字节的字符怎么办？在基本平面里边U+D800~U+DBFF是一个空段，不对应任何字符（不知道是不是有意为之），所以用这段来表示4字节字符的前段，也叫高位，后边的U+DC00到U+DFFF叫低位。\n>所以，当我们遇到两个字节，发现它的码点在U+D800到U+DBFF之间，就可以断定，紧跟在后面的两个字节的码点，应该在U+DC00到U+DFFF之间，这四个字节必须放在一起解读。  \n\n给一个辅助平面的码点，怎么转化成UTF-164字节形式呢？有一个公式可用：\n```js\nH = Math.floor((c - 0x10000) / 0x400) + 0xD800\nL = (c - 0x10000) % 0x400 + 0xDC00\n```  \n## 4. javascript中的Unicode  \njavascript采用Unicode字符集，支持的编码方式是UCS-2。UTF-16是UCS-2的超集，至于UCS-2是什么，请自行百度。在javascript中处理字符串时，可以看做是UTF-16编码。遇到4个字节的字符，String.prototype.length会得到2，不过在es6中增加了新的api处理4个字节字符的方法，这里就不展开介绍了。js中的表示方法是'\\u'+四位16进制数，例如'\\u4f60'表示中文'你'，这是一个长度是1的字符。'\\u004F\\u030C'表示符号'Ǒ'，lendth长度是2。匹配辅助平面的字符的正则：/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/，匹配到的字符length都是2。首先要将码点转化为高位和低位形式，再与正则比较判断。  \n## 5. javascript中处理emoji  \nemoji实质上也是Unicode码，也可以在javascript中处理。大部分emoji是4个字节，由高位+低位两端编码组成，只要解析的时候不把高位和低位分开，就不会出现'乱码'的情况。但是有些emoji是由多个emoji连接而成，例如：  \n```js\nU+1F468：男人\nU+1F469：女人\nU+1F467：女孩\n```  \n使用连接符号U+200D连接，U+1F468 U+200D U+1F469 U+200D U+1F467，就会显示一个新的emoji表情：家庭，但是如果系统不支持这种表示，还是会显示3个单独的表情。","slug":"unicode","published":1,"updated":"2019-05-27T03:27:53.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nkp000h142d5s5f8zqe","content":"<h2 id=\"1-Unicode是什么？\"><a href=\"#1-Unicode是什么？\" class=\"headerlink\" title=\"1. Unicode是什么？\"></a>1. Unicode是什么？</h2><p>有一个想法，将全世界所有的字符号都包含在一个集合里边，任何机器支持这一个集合就行了，再也不会有乱码了。基于这个想法，Unicode码应运而生。它用数字编号来表示符号，到7.0版，已经有了109449个符号。一般用26进制表示，’U+4E49’表示字符’义’，’U+’是前缀，整体叫做<em>码点</em>。<br>集合分为几个区间，U+0000~U+FFFF是最常用的字符，称为<em>基本平面</em>，剩下的U+010000~U+10FFFF称为<em>辅助平面</em>。  </p>\n<h2 id=\"2-编码方式\"><a href=\"#2-编码方式\" class=\"headerlink\" title=\"2. 编码方式\"></a>2. 编码方式</h2><p>平常说的UTF-8，UTF-16就是说的码点的编码方式。UTF-32指无论是什么码点，一律使用4个字节表示，一共是8位16进制数，位数不足的，在前边补0，例如U+389D = 0x0000 389D。UTF-8字节数灵活，用1个字节能表示的用1个字节，用两个字节才能表示的，用两个字节，还可能是3个4个字节。同样的文本UTF-8占的存储空间比UTF32小多了。所以，网页编码大部分使用的是UTF-8。  </p>\n<h2 id=\"3-UTF-16\"><a href=\"#3-UTF-16\" class=\"headerlink\" title=\"3. UTF-16\"></a>3. UTF-16</h2><p>重点说一下UTF-16。UTF-16介于以上两者之间，规则也很简单，基本平面的字符占用2个字节，辅助平面的字节占用4个字节。因为常用的字符都在基本平面，所以UTF-16比UTF-32所占空间要小。当我们看到4个字节，如果前两个字节码点的范围是U+D800到U+DBFF，那么后两个字节码点一般在U+DC00到U+DFFF范围内，那么它就是一个4字节字符。但是U+D800到U+DBFF范围内的2个字节的字符怎么办？在基本平面里边U+D800~U+DBFF是一个空段，不对应任何字符（不知道是不是有意为之），所以用这段来表示4字节字符的前段，也叫高位，后边的U+DC00到U+DFFF叫低位。</p>\n<blockquote>\n<p>所以，当我们遇到两个字节，发现它的码点在U+D800到U+DBFF之间，就可以断定，紧跟在后面的两个字节的码点，应该在U+DC00到U+DFFF之间，这四个字节必须放在一起解读。  </p>\n</blockquote>\n<p>给一个辅助平面的码点，怎么转化成UTF-164字节形式呢？有一个公式可用：</p>\n<pre><code class=\"js\">H = <span class=\"built_in\">Math</span>.floor((c - <span class=\"number\">0x10000</span>) / <span class=\"number\">0x400</span>) + <span class=\"number\">0xD800</span>\nL = (c - <span class=\"number\">0x10000</span>) % <span class=\"number\">0x400</span> + <span class=\"number\">0xDC00</span>\n</code></pre>\n<h2 id=\"4-javascript中的Unicode\"><a href=\"#4-javascript中的Unicode\" class=\"headerlink\" title=\"4. javascript中的Unicode\"></a>4. javascript中的Unicode</h2><p>javascript采用Unicode字符集，支持的编码方式是UCS-2。UTF-16是UCS-2的超集，至于UCS-2是什么，请自行百度。在javascript中处理字符串时，可以看做是UTF-16编码。遇到4个字节的字符，String.prototype.length会得到2，不过在es6中增加了新的api处理4个字节字符的方法，这里就不展开介绍了。js中的表示方法是’\\u’+四位16进制数，例如’\\u4f60’表示中文’你’，这是一个长度是1的字符。’\\u004F\\u030C’表示符号’Ǒ’，lendth长度是2。匹配辅助平面的字符的正则：/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/，匹配到的字符length都是2。首先要将码点转化为高位和低位形式，再与正则比较判断。  </p>\n<h2 id=\"5-javascript中处理emoji\"><a href=\"#5-javascript中处理emoji\" class=\"headerlink\" title=\"5. javascript中处理emoji\"></a>5. javascript中处理emoji</h2><p>emoji实质上也是Unicode码，也可以在javascript中处理。大部分emoji是4个字节，由高位+低位两端编码组成，只要解析的时候不把高位和低位分开，就不会出现’乱码’的情况。但是有些emoji是由多个emoji连接而成，例如：  </p>\n<pre><code class=\"js\">U+<span class=\"number\">1</span>F468：男人\nU+<span class=\"number\">1</span>F469：女人\nU+<span class=\"number\">1</span>F467：女孩\n</code></pre>\n<p>使用连接符号U+200D连接，U+1F468 U+200D U+1F469 U+200D U+1F467，就会显示一个新的emoji表情：家庭，但是如果系统不支持这种表示，还是会显示3个单独的表情。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Unicode是什么？\"><a href=\"#1-Unicode是什么？\" class=\"headerlink\" title=\"1. Unicode是什么？\"></a>1. Unicode是什么？</h2><p>有一个想法，将全世界所有的字符号都包含在一个集合里边，任何机器支持这一个集合就行了，再也不会有乱码了。基于这个想法，Unicode码应运而生。它用数字编号来表示符号，到7.0版，已经有了109449个符号。一般用26进制表示，’U+4E49’表示字符’义’，’U+’是前缀，整体叫做<em>码点</em>。<br>集合分为几个区间，U+0000~U+FFFF是最常用的字符，称为<em>基本平面</em>，剩下的U+010000~U+10FFFF称为<em>辅助平面</em>。  </p>\n<h2 id=\"2-编码方式\"><a href=\"#2-编码方式\" class=\"headerlink\" title=\"2. 编码方式\"></a>2. 编码方式</h2><p>平常说的UTF-8，UTF-16就是说的码点的编码方式。UTF-32指无论是什么码点，一律使用4个字节表示，一共是8位16进制数，位数不足的，在前边补0，例如U+389D = 0x0000 389D。UTF-8字节数灵活，用1个字节能表示的用1个字节，用两个字节才能表示的，用两个字节，还可能是3个4个字节。同样的文本UTF-8占的存储空间比UTF32小多了。所以，网页编码大部分使用的是UTF-8。  </p>\n<h2 id=\"3-UTF-16\"><a href=\"#3-UTF-16\" class=\"headerlink\" title=\"3. UTF-16\"></a>3. UTF-16</h2><p>重点说一下UTF-16。UTF-16介于以上两者之间，规则也很简单，基本平面的字符占用2个字节，辅助平面的字节占用4个字节。因为常用的字符都在基本平面，所以UTF-16比UTF-32所占空间要小。当我们看到4个字节，如果前两个字节码点的范围是U+D800到U+DBFF，那么后两个字节码点一般在U+DC00到U+DFFF范围内，那么它就是一个4字节字符。但是U+D800到U+DBFF范围内的2个字节的字符怎么办？在基本平面里边U+D800~U+DBFF是一个空段，不对应任何字符（不知道是不是有意为之），所以用这段来表示4字节字符的前段，也叫高位，后边的U+DC00到U+DFFF叫低位。</p>\n<blockquote>\n<p>所以，当我们遇到两个字节，发现它的码点在U+D800到U+DBFF之间，就可以断定，紧跟在后面的两个字节的码点，应该在U+DC00到U+DFFF之间，这四个字节必须放在一起解读。  </p>\n</blockquote>\n<p>给一个辅助平面的码点，怎么转化成UTF-164字节形式呢？有一个公式可用：</p>\n<pre><code class=\"js\">H = <span class=\"built_in\">Math</span>.floor((c - <span class=\"number\">0x10000</span>) / <span class=\"number\">0x400</span>) + <span class=\"number\">0xD800</span>\nL = (c - <span class=\"number\">0x10000</span>) % <span class=\"number\">0x400</span> + <span class=\"number\">0xDC00</span>\n</code></pre>\n<h2 id=\"4-javascript中的Unicode\"><a href=\"#4-javascript中的Unicode\" class=\"headerlink\" title=\"4. javascript中的Unicode\"></a>4. javascript中的Unicode</h2><p>javascript采用Unicode字符集，支持的编码方式是UCS-2。UTF-16是UCS-2的超集，至于UCS-2是什么，请自行百度。在javascript中处理字符串时，可以看做是UTF-16编码。遇到4个字节的字符，String.prototype.length会得到2，不过在es6中增加了新的api处理4个字节字符的方法，这里就不展开介绍了。js中的表示方法是’\\u’+四位16进制数，例如’\\u4f60’表示中文’你’，这是一个长度是1的字符。’\\u004F\\u030C’表示符号’Ǒ’，lendth长度是2。匹配辅助平面的字符的正则：/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/，匹配到的字符length都是2。首先要将码点转化为高位和低位形式，再与正则比较判断。  </p>\n<h2 id=\"5-javascript中处理emoji\"><a href=\"#5-javascript中处理emoji\" class=\"headerlink\" title=\"5. javascript中处理emoji\"></a>5. javascript中处理emoji</h2><p>emoji实质上也是Unicode码，也可以在javascript中处理。大部分emoji是4个字节，由高位+低位两端编码组成，只要解析的时候不把高位和低位分开，就不会出现’乱码’的情况。但是有些emoji是由多个emoji连接而成，例如：  </p>\n<pre><code class=\"js\">U+<span class=\"number\">1</span>F468：男人\nU+<span class=\"number\">1</span>F469：女人\nU+<span class=\"number\">1</span>F467：女孩\n</code></pre>\n<p>使用连接符号U+200D连接，U+1F468 U+200D U+1F469 U+200D U+1F467，就会显示一个新的emoji表情：家庭，但是如果系统不支持这种表示，还是会显示3个单独的表情。</p>\n"},{"title":"当你在javascript中用\"==\"的时候, 你在比较什么?","date":"2019-03-19T05:46:25.000Z","header_image":"https://source.unsplash.com/random","_content":"## 类型转换\n&nbsp;&nbsp;js中存在强制类型转换和隐式类型转换, 有意识地去调用转换方法或者构造函数去转换称为强制类型转换(implicit coercion), 无意识地转换(语言机制自发完成)称为隐式类型转换(explicit coercion).\n```js\nconst a = 42\nconst b = a + \"\" // implicit coercion\nconst c = String( a ) // explicit coercion\n```\n这里稍后会讨论的\"==\"问题, 涉及到的也是隐式类型转换.\n转换的目标只能是string, number or boolean. 不可能经过隐式类型转换, 转换出一个复杂类型的数据(Object, Array, Function ...). 现在来看看各个类型的ToString,ToNumber, ToBoolean, 或者说是ToPrimitive.\n### ToString\n* 原生简单对象转化规则\n  **null**: 转化为字符串\"null\";\n  **undefined**: 转化为\"undefined\";\n  **true/false**: 转化为\"true\"/\"false\";\n  **Number**: 大部分情况如预测地那样, 2转化为\"2\", 0转化为\"0\", 100转化为\"100\". 但是事情没有这么简单. 不是10进制的数字, 首先会转化为十进制, 然后再转化为字符串, 并不是数字直接加上引号就行了.\n  ```js\n  (0x23).toString() // \"35\"\n  0x23 == \"35\" // true\n  ```\n  绝对值很大的数值或者绝对值很小的数值, 首先会转化为科学计数法, 然后再进行转化.\n  ```js\n  (0.0000001).toString() // \"1e-7\"\n  (1000000000000000000000).toString() // \"1e+21\"\n  0.0000001 == \"1e-7\" // true\n  ```\n* 复杂对象的转化规则\n  **Object**: 如果没有指定自己的toString()方法, 就会调用Object.prototype.toString(). 这个函数会返回对象类型字符串, 在这里是\"[object Object]\". 如果指定了自己的toString()函数, 会执行这个函数, 使用返回值.\n  ```js\n  const obj = {\n    value: 42,\n  }\n  const obj42 = {\n    value: 42,\n    toString: () => {return \"ultimate\"}\n  }\n  obj == \"[object Object]\" // true\n  obj42 == \"ultimate\" // true\n  ```\n  **Array**: Array类型\"重载\"了Object.prototype.toString(), toString方法返回有一个以\",\"隔开的数组元素拼接的字符串.\n  ```js\n  const arr = ['a','b','c','d','e','f']\n  console.log(arr) // \"a,b,c,d,e,f\"\n  // 修改数组的默认toString方法 别这样做\n  Array.prototype.toString = function() {\n    return this.split('-')\n  }\n  ['a','b','c','d','e','f'] == \"a-b-c-d-e-f\" // true\n  ```\n  **Function**: Function类型也重载了Object.prototype.toString(), 个性化的toString返回函数的字符串形式.\n  ```js\n  (function(){var s = 2;return s}) == \"function(){var s = 2;return s}\"\n  ```\n### ToNumber\n* 基本类型转化规则\n  **null**: 转化为0!;\n  **undefined**: 转化为NaN;\n  **true/false**: 转化为1/0;\n  **String**: 字符串会尝试使用Number()构造函数(误)去转化结果, 转化失败不会报错, 会返回特殊的数字类型值NaN. 在这种操作中可以正确辨识以0x(0X)为起始符号的16进制的数字字符串, 但是会忽略以\"0\"起始的部分.\n  ```js\n  10 - null // 10\n  isNaN(undefined) // true\n  1 + true // 2\n  2 - false // 2\n  20 - \"0xb\" // 9\n  20 - \"013\" // 7\n  ```\n  还有一种特殊情况是, 如果是合法的科学计数法数字字符串, 能正常转化为10进制的数字\n  ```js\n  \"1e+10\" == 10000000000 // true\n  ```\n* 复杂对象的转化规则\n  首先复杂对象会调用内部的ToPrimitive方法, 尝试转化成基础类型值, 如果基础类型值不是number, 则再进行转化. 调用ToPrimitive可以想成首先尝试调用对象的valueOf()方法, 如果有这个方法并且返回的是基础类型值则使用返回值, 否则就尝试调用toString()方法. 如果这两个方法都不存在或者返回值都不是基础类型值, 会抛出TypeError错误.\n  ```js\n  const a = {\n    valueOf: () => {return \"1\"}\n  }\n  10 - a // 9\n  const b = {\n    toString: () => {return \"2\"}\n  }\n  10 - b // 8\n  const c = {\n    valueOf: () => {return \"3\"}, // 首先调用\n    toString: () => {return \"4\"},\n  }\n  10 - c // 7\n  const d = {\n    valueOf: () => {return {}}, // 首先调用\n    toString: () => {return \"5\"}, // 调用valueOf结果不对, 调用toString\n  }\n  10 - d // 5\n  const e = Object.create(null)\n  10 - e // TypeError\n  ```\n### ToBoolean\n  先来看一定是false的几个值\n  *  undefined\n  *  null\n  *  false\n  *  +0, -0, and NaN\n  *  \"\"\n\n  这个列表外的值, 都是true(误, 有例外). 复杂类型的值都是true(误, 有例外)\n  ```js\n  !!new Boolean( false ) // true\n  !!new Boolean( 0 ) // true\n  ```\n  在史前时代, 人们判断是不是IE浏览器, 往往用这样的代码:\n  ```js\n  if (document.all) { /* it's IE */ }\n  ```\n  结果慢慢地, 别的浏览器也开始有这个API了. 可是旧代码已经沉淀下来成了地层中的岩石, 挖出来修改的成本太高了, 干脆在非IE浏览器中document.all是falsy算了, 所以导致了这个对象的奇葩行为.\n  ```js\n  !!document.all // true 在IE11以下版本\n  !!document.all // false 在IE11以上版本或非IE环境\n  ```\n## \"==\" VS. \"===\"\n  两者的区别是: \"==\"比较的时候, 允许隐式类型转换, \"===\"不允许隐式类型转换.\n  稍微提下\"===\"的两个奇葩行为:\n  *  NaN === NaN // false\n  *  -0 === +0 // true\n\n## \"==\"规则\n  ```js\n  42 === '42' // false\n  42 == '42' // true\n  ```\n  问题来了, 42 == '42'到底隐式转换成了什么? 是42 == 42还是'42'=='42'? 接下来就详细介绍下转换的规则, 了解这些规则后, \"==\"很多诡异的行为都变得有理有据, 再也不用视为\"糟粕\"不敢用了.\n  ###  String VS. Number\n  > If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y).\n  If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.\n\n  如果\"==\"两边是字符串和数字, 那么字符串转化为数字去比较.\n  字符串转化为数字的规则, 上边有介绍.\n  ###  Anything VS. Boolean\n  >If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\n  If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\n\n  如果\"==\"两边是Boolean值和其他值, 那么第一步会将Boolean值转化为数字, 转化的结果只能是0或1. 然后再用0或1去和其他值比较, 如果其他值是复杂类型的值, 再进行其他转换, 如果是字符串, 参考上一条.\n  ```js\n  true == '1' // 1 == '1' -> 1 == 1 true\n  true == '42'  // 1 == '42' -> 1 == 42 false\n  ```\n  ###  null VS. undefined\n  > If x is null and y is undefined, return true.\n  If x is undefined and y is null, return true.\n\n  如果是null和undefined作比较, 返回true. 这俩哥们和其他的任何值作比较, 都返回false.\n  ```js\n  const a = null\n  const b = undefined\n  a == b // true\n  a == null\t// true\n  b == null\t// true\n  a == false // false\n  b == false // false\n  a == \"\"\t// false\n  b == \"\"\t// false\n  a == 0 // false\n  b == 0 // false\n  ```\n  ### Objects VS. non-Objects\n  >If Type(x) is either String or Number and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).\n  If Type(x) is Object and Type(y) is either String or Number, return the result of the comparison ToPrimitive(x) == y.\n\n  当复杂类型与基本类型作比较的时候, 复杂类型值首先要转换成基本类型的值, 转化规则前边有介绍.\n  ```js\n  ['42'] == 42 // true\n  Object(10) == '10' // true\n  ```\n  两点需要注意, 构造函数的参数是null或者undefined, 会返回一个\"空\"对象, 所以下边的结果是有道理的.\n  ```js\n  const a = Object( null ) // {}\n  a == null // false\n  const b = Object( undefined ) // {}\n  b == undefined // false\n  ```\n## 最后练习\n  ```js\n  [] == ![] // true [] == false -> [] == 0 -> \"\" == 0 -> 0 == 0\n\n  2 == [2] // true  2 == \"2\" -> 2 == 2\n\n  \"\" == [null] // true  \"\" == \"\"  (ps: String([null]) === \"\";  String(null) === \"null\")\n\n  \"0\" == false // true \"0\" == 0 -> 0 == 0\n\n  false == 0 // true 0 == 0\n\n  false == \"\" // true 0 == \"\" -> 0 == 0\n\n  false == [] // true 0 == [] -> 0 == \"\" -> 0 == 0\n\n  \"\" == 0 // true 0 == 0\n\n  \"\" == [] // true \"\" == \"\"\n\n  0 == [] // true 0 == \"\" -> 0 == 0\n  ```","source":"_posts/coercion.md","raw":"---\ntitle: 当你在javascript中用\"==\"的时候, 你在比较什么?\ndate: 2019-03-19 13:46:25\ncategories:\n  - javascript\ntags:\n  - javascript\n  - ==\n  - 类型转换\nheader_image: https://source.unsplash.com/random\n---\n## 类型转换\n&nbsp;&nbsp;js中存在强制类型转换和隐式类型转换, 有意识地去调用转换方法或者构造函数去转换称为强制类型转换(implicit coercion), 无意识地转换(语言机制自发完成)称为隐式类型转换(explicit coercion).\n```js\nconst a = 42\nconst b = a + \"\" // implicit coercion\nconst c = String( a ) // explicit coercion\n```\n这里稍后会讨论的\"==\"问题, 涉及到的也是隐式类型转换.\n转换的目标只能是string, number or boolean. 不可能经过隐式类型转换, 转换出一个复杂类型的数据(Object, Array, Function ...). 现在来看看各个类型的ToString,ToNumber, ToBoolean, 或者说是ToPrimitive.\n### ToString\n* 原生简单对象转化规则\n  **null**: 转化为字符串\"null\";\n  **undefined**: 转化为\"undefined\";\n  **true/false**: 转化为\"true\"/\"false\";\n  **Number**: 大部分情况如预测地那样, 2转化为\"2\", 0转化为\"0\", 100转化为\"100\". 但是事情没有这么简单. 不是10进制的数字, 首先会转化为十进制, 然后再转化为字符串, 并不是数字直接加上引号就行了.\n  ```js\n  (0x23).toString() // \"35\"\n  0x23 == \"35\" // true\n  ```\n  绝对值很大的数值或者绝对值很小的数值, 首先会转化为科学计数法, 然后再进行转化.\n  ```js\n  (0.0000001).toString() // \"1e-7\"\n  (1000000000000000000000).toString() // \"1e+21\"\n  0.0000001 == \"1e-7\" // true\n  ```\n* 复杂对象的转化规则\n  **Object**: 如果没有指定自己的toString()方法, 就会调用Object.prototype.toString(). 这个函数会返回对象类型字符串, 在这里是\"[object Object]\". 如果指定了自己的toString()函数, 会执行这个函数, 使用返回值.\n  ```js\n  const obj = {\n    value: 42,\n  }\n  const obj42 = {\n    value: 42,\n    toString: () => {return \"ultimate\"}\n  }\n  obj == \"[object Object]\" // true\n  obj42 == \"ultimate\" // true\n  ```\n  **Array**: Array类型\"重载\"了Object.prototype.toString(), toString方法返回有一个以\",\"隔开的数组元素拼接的字符串.\n  ```js\n  const arr = ['a','b','c','d','e','f']\n  console.log(arr) // \"a,b,c,d,e,f\"\n  // 修改数组的默认toString方法 别这样做\n  Array.prototype.toString = function() {\n    return this.split('-')\n  }\n  ['a','b','c','d','e','f'] == \"a-b-c-d-e-f\" // true\n  ```\n  **Function**: Function类型也重载了Object.prototype.toString(), 个性化的toString返回函数的字符串形式.\n  ```js\n  (function(){var s = 2;return s}) == \"function(){var s = 2;return s}\"\n  ```\n### ToNumber\n* 基本类型转化规则\n  **null**: 转化为0!;\n  **undefined**: 转化为NaN;\n  **true/false**: 转化为1/0;\n  **String**: 字符串会尝试使用Number()构造函数(误)去转化结果, 转化失败不会报错, 会返回特殊的数字类型值NaN. 在这种操作中可以正确辨识以0x(0X)为起始符号的16进制的数字字符串, 但是会忽略以\"0\"起始的部分.\n  ```js\n  10 - null // 10\n  isNaN(undefined) // true\n  1 + true // 2\n  2 - false // 2\n  20 - \"0xb\" // 9\n  20 - \"013\" // 7\n  ```\n  还有一种特殊情况是, 如果是合法的科学计数法数字字符串, 能正常转化为10进制的数字\n  ```js\n  \"1e+10\" == 10000000000 // true\n  ```\n* 复杂对象的转化规则\n  首先复杂对象会调用内部的ToPrimitive方法, 尝试转化成基础类型值, 如果基础类型值不是number, 则再进行转化. 调用ToPrimitive可以想成首先尝试调用对象的valueOf()方法, 如果有这个方法并且返回的是基础类型值则使用返回值, 否则就尝试调用toString()方法. 如果这两个方法都不存在或者返回值都不是基础类型值, 会抛出TypeError错误.\n  ```js\n  const a = {\n    valueOf: () => {return \"1\"}\n  }\n  10 - a // 9\n  const b = {\n    toString: () => {return \"2\"}\n  }\n  10 - b // 8\n  const c = {\n    valueOf: () => {return \"3\"}, // 首先调用\n    toString: () => {return \"4\"},\n  }\n  10 - c // 7\n  const d = {\n    valueOf: () => {return {}}, // 首先调用\n    toString: () => {return \"5\"}, // 调用valueOf结果不对, 调用toString\n  }\n  10 - d // 5\n  const e = Object.create(null)\n  10 - e // TypeError\n  ```\n### ToBoolean\n  先来看一定是false的几个值\n  *  undefined\n  *  null\n  *  false\n  *  +0, -0, and NaN\n  *  \"\"\n\n  这个列表外的值, 都是true(误, 有例外). 复杂类型的值都是true(误, 有例外)\n  ```js\n  !!new Boolean( false ) // true\n  !!new Boolean( 0 ) // true\n  ```\n  在史前时代, 人们判断是不是IE浏览器, 往往用这样的代码:\n  ```js\n  if (document.all) { /* it's IE */ }\n  ```\n  结果慢慢地, 别的浏览器也开始有这个API了. 可是旧代码已经沉淀下来成了地层中的岩石, 挖出来修改的成本太高了, 干脆在非IE浏览器中document.all是falsy算了, 所以导致了这个对象的奇葩行为.\n  ```js\n  !!document.all // true 在IE11以下版本\n  !!document.all // false 在IE11以上版本或非IE环境\n  ```\n## \"==\" VS. \"===\"\n  两者的区别是: \"==\"比较的时候, 允许隐式类型转换, \"===\"不允许隐式类型转换.\n  稍微提下\"===\"的两个奇葩行为:\n  *  NaN === NaN // false\n  *  -0 === +0 // true\n\n## \"==\"规则\n  ```js\n  42 === '42' // false\n  42 == '42' // true\n  ```\n  问题来了, 42 == '42'到底隐式转换成了什么? 是42 == 42还是'42'=='42'? 接下来就详细介绍下转换的规则, 了解这些规则后, \"==\"很多诡异的行为都变得有理有据, 再也不用视为\"糟粕\"不敢用了.\n  ###  String VS. Number\n  > If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y).\n  If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.\n\n  如果\"==\"两边是字符串和数字, 那么字符串转化为数字去比较.\n  字符串转化为数字的规则, 上边有介绍.\n  ###  Anything VS. Boolean\n  >If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\n  If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\n\n  如果\"==\"两边是Boolean值和其他值, 那么第一步会将Boolean值转化为数字, 转化的结果只能是0或1. 然后再用0或1去和其他值比较, 如果其他值是复杂类型的值, 再进行其他转换, 如果是字符串, 参考上一条.\n  ```js\n  true == '1' // 1 == '1' -> 1 == 1 true\n  true == '42'  // 1 == '42' -> 1 == 42 false\n  ```\n  ###  null VS. undefined\n  > If x is null and y is undefined, return true.\n  If x is undefined and y is null, return true.\n\n  如果是null和undefined作比较, 返回true. 这俩哥们和其他的任何值作比较, 都返回false.\n  ```js\n  const a = null\n  const b = undefined\n  a == b // true\n  a == null\t// true\n  b == null\t// true\n  a == false // false\n  b == false // false\n  a == \"\"\t// false\n  b == \"\"\t// false\n  a == 0 // false\n  b == 0 // false\n  ```\n  ### Objects VS. non-Objects\n  >If Type(x) is either String or Number and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).\n  If Type(x) is Object and Type(y) is either String or Number, return the result of the comparison ToPrimitive(x) == y.\n\n  当复杂类型与基本类型作比较的时候, 复杂类型值首先要转换成基本类型的值, 转化规则前边有介绍.\n  ```js\n  ['42'] == 42 // true\n  Object(10) == '10' // true\n  ```\n  两点需要注意, 构造函数的参数是null或者undefined, 会返回一个\"空\"对象, 所以下边的结果是有道理的.\n  ```js\n  const a = Object( null ) // {}\n  a == null // false\n  const b = Object( undefined ) // {}\n  b == undefined // false\n  ```\n## 最后练习\n  ```js\n  [] == ![] // true [] == false -> [] == 0 -> \"\" == 0 -> 0 == 0\n\n  2 == [2] // true  2 == \"2\" -> 2 == 2\n\n  \"\" == [null] // true  \"\" == \"\"  (ps: String([null]) === \"\";  String(null) === \"null\")\n\n  \"0\" == false // true \"0\" == 0 -> 0 == 0\n\n  false == 0 // true 0 == 0\n\n  false == \"\" // true 0 == \"\" -> 0 == 0\n\n  false == [] // true 0 == [] -> 0 == \"\" -> 0 == 0\n\n  \"\" == 0 // true 0 == 0\n\n  \"\" == [] // true \"\" == \"\"\n\n  0 == [] // true 0 == \"\" -> 0 == 0\n  ```","slug":"coercion","published":1,"updated":"2019-09-23T12:21:06.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nlw001h142dvq0utlhy","content":"<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>&nbsp;&nbsp;js中存在强制类型转换和隐式类型转换, 有意识地去调用转换方法或者构造函数去转换称为强制类型转换(implicit coercion), 无意识地转换(语言机制自发完成)称为隐式类型转换(explicit coercion).<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = a + <span class=\"string\">\"\"</span> <span class=\"comment\">// implicit coercion</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"built_in\">String</span>( a ) <span class=\"comment\">// explicit coercion</span></span><br></pre></td></tr></table></figure></p>\n<p>这里稍后会讨论的”==”问题, 涉及到的也是隐式类型转换.<br>转换的目标只能是string, number or boolean. 不可能经过隐式类型转换, 转换出一个复杂类型的数据(Object, Array, Function …). 现在来看看各个类型的ToString,ToNumber, ToBoolean, 或者说是ToPrimitive.</p>\n<h3 id=\"ToString\"><a href=\"#ToString\" class=\"headerlink\" title=\"ToString\"></a>ToString</h3><ul>\n<li><p>原生简单对象转化规则<br><strong>null</strong>: 转化为字符串”null”;<br><strong>undefined</strong>: 转化为”undefined”;<br><strong>true/false</strong>: 转化为”true”/“false”;<br><strong>Number</strong>: 大部分情况如预测地那样, 2转化为”2”, 0转化为”0”, 100转化为”100”. 但是事情没有这么简单. 不是10进制的数字, 首先会转化为十进制, 然后再转化为字符串, 并不是数字直接加上引号就行了.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0x23</span>).toString() <span class=\"comment\">// \"35\"</span></span><br><span class=\"line\"><span class=\"number\">0x23</span> == <span class=\"string\">\"35\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>绝对值很大的数值或者绝对值很小的数值, 首先会转化为科学计数法, 然后再进行转化.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0.0000001</span>).toString() <span class=\"comment\">// \"1e-7\"</span></span><br><span class=\"line\">(<span class=\"number\">1000000000000000000000</span>).toString() <span class=\"comment\">// \"1e+21\"</span></span><br><span class=\"line\"><span class=\"number\">0.0000001</span> == <span class=\"string\">\"1e-7\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复杂对象的转化规则<br><strong>Object</strong>: 如果没有指定自己的toString()方法, 就会调用Object.prototype.toString(). 这个函数会返回对象类型字符串, 在这里是”[object Object]”. 如果指定了自己的toString()函数, 会执行这个函数, 使用返回值.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  value: <span class=\"number\">42</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj42 = &#123;</span><br><span class=\"line\">  value: <span class=\"number\">42</span>,</span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"ultimate\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj == <span class=\"string\">\"[object Object]\"</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">obj42 == <span class=\"string\">\"ultimate\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>Array</strong>: Array类型”重载”了Object.prototype.toString(), toString方法返回有一个以”,”隔开的数组元素拼接的字符串.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// \"a,b,c,d,e,f\"</span></span><br><span class=\"line\"><span class=\"comment\">// 修改数组的默认toString方法 别这样做</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>] == <span class=\"string\">\"a-b-c-d-e-f\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>Function</strong>: Function类型也重载了Object.prototype.toString(), 个性化的toString返回函数的字符串形式.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">var</span> s = <span class=\"number\">2</span>;<span class=\"keyword\">return</span> s&#125;) == <span class=\"string\">\"function()&#123;var s = 2;return s&#125;\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"ToNumber\"><a href=\"#ToNumber\" class=\"headerlink\" title=\"ToNumber\"></a>ToNumber</h3><ul>\n<li><p>基本类型转化规则<br><strong>null</strong>: 转化为0!;<br><strong>undefined</strong>: 转化为NaN;<br><strong>true/false</strong>: 转化为1/0;<br><strong>String</strong>: 字符串会尝试使用Number()构造函数(误)去转化结果, 转化失败不会报错, 会返回特殊的数字类型值NaN. 在这种操作中可以正确辨识以0x(0X)为起始符号的16进制的数字字符串, 但是会忽略以”0”起始的部分.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> - <span class=\"literal\">null</span> <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"literal\">true</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">2</span> - <span class=\"literal\">false</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">20</span> - <span class=\"string\">\"0xb\"</span> <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"number\">20</span> - <span class=\"string\">\"013\"</span> <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<p>还有一种特殊情况是, 如果是合法的科学计数法数字字符串, 能正常转化为10进制的数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"1e+10\"</span> == <span class=\"number\">10000000000</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复杂对象的转化规则<br>首先复杂对象会调用内部的ToPrimitive方法, 尝试转化成基础类型值, 如果基础类型值不是number, 则再进行转化. 调用ToPrimitive可以想成首先尝试调用对象的valueOf()方法, 如果有这个方法并且返回的是基础类型值则使用返回值, 否则就尝试调用toString()方法. 如果这两个方法都不存在或者返回值都不是基础类型值, 会抛出TypeError错误.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"1\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">10</span> - a <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;</span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">10</span> - b <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = &#123;</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"3\"</span>&#125;, <span class=\"comment\">// 首先调用</span></span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"4\"</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">10</span> - c <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> d = &#123;</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> &#123;&#125;&#125;, <span class=\"comment\">// 首先调用</span></span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"5\"</span>&#125;, <span class=\"comment\">// 调用valueOf结果不对, 调用toString</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">10</span> - d <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> e = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"number\">10</span> - e <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"ToBoolean\"><a href=\"#ToBoolean\" class=\"headerlink\" title=\"ToBoolean\"></a>ToBoolean</h3><p>  先来看一定是false的几个值</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>false</li>\n<li>+0, -0, and NaN</li>\n<li><p>“”</p>\n<p>这个列表外的值, 都是true(误, 有例外). 复杂类型的值都是true(误, 有例外)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>( <span class=\"literal\">false</span> ) <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>( <span class=\"number\">0</span> ) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在史前时代, 人们判断是不是IE浏览器, 往往用这样的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.all) &#123; <span class=\"comment\">/* it's IE */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>结果慢慢地, 别的浏览器也开始有这个API了. 可是旧代码已经沉淀下来成了地层中的岩石, 挖出来修改的成本太高了, 干脆在非IE浏览器中document.all是falsy算了, 所以导致了这个对象的奇葩行为.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"built_in\">document</span>.all <span class=\"comment\">// true 在IE11以下版本</span></span><br><span class=\"line\">!!<span class=\"built_in\">document</span>.all <span class=\"comment\">// false 在IE11以上版本或非IE环境</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"“-”-VS-“-”\"><a href=\"#“-”-VS-“-”\" class=\"headerlink\" title=\"“==” VS. “===”\"></a>“==” VS. “===”</h2><p>  两者的区别是: “==”比较的时候, 允许隐式类型转换, “===”不允许隐式类型转换.<br>  稍微提下”===”的两个奇葩行为:</p>\n<ul>\n<li>NaN === NaN // false</li>\n<li>-0 === +0 // true</li>\n</ul>\n<h2 id=\"“-”规则\"><a href=\"#“-”规则\" class=\"headerlink\" title=\"“==”规则\"></a>“==”规则</h2>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">42</span> === <span class=\"string\">'42'</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">42</span> == <span class=\"string\">'42'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>  问题来了, 42 == ‘42’到底隐式转换成了什么? 是42 == 42还是’42’==’42’? 接下来就详细介绍下转换的规则, 了解这些规则后, “==”很多诡异的行为都变得有理有据, 再也不用视为”糟粕”不敢用了.</p>\n<h3 id=\"String-VS-Number\"><a href=\"#String-VS-Number\" class=\"headerlink\" title=\"String VS. Number\"></a>String VS. Number</h3><blockquote>\n<p>If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y).<br>  If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.</p>\n</blockquote>\n<p>  如果”==”两边是字符串和数字, 那么字符串转化为数字去比较.<br>  字符串转化为数字的规则, 上边有介绍.</p>\n<h3 id=\"Anything-VS-Boolean\"><a href=\"#Anything-VS-Boolean\" class=\"headerlink\" title=\"Anything VS. Boolean\"></a>Anything VS. Boolean</h3><blockquote>\n<p>If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.<br>  If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).</p>\n</blockquote>\n<p>  如果”==”两边是Boolean值和其他值, 那么第一步会将Boolean值转化为数字, 转化的结果只能是0或1. 然后再用0或1去和其他值比较, 如果其他值是复杂类型的值, 再进行其他转换, 如果是字符串, 参考上一条.<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"string\">'1'</span> <span class=\"comment\">// 1 == '1' -&gt; 1 == 1 true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"string\">'42'</span>  <span class=\"comment\">// 1 == '42' -&gt; 1 == 42 false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"null-VS-undefined\"><a href=\"#null-VS-undefined\" class=\"headerlink\" title=\"null VS. undefined\"></a>null VS. undefined</h3><blockquote>\n<p>If x is null and y is undefined, return true.<br>  If x is undefined and y is null, return true.</p>\n</blockquote>\n<p>  如果是null和undefined作比较, 返回true. 这俩哥们和其他的任何值作比较, 都返回false.<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"literal\">undefined</span></span><br><span class=\"line\">a == b <span class=\"comment\">// true</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span>\t<span class=\"comment\">// true</span></span><br><span class=\"line\">b == <span class=\"literal\">null</span>\t<span class=\"comment\">// true</span></span><br><span class=\"line\">a == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">b == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">a == <span class=\"string\">\"\"</span>\t<span class=\"comment\">// false</span></span><br><span class=\"line\">b == <span class=\"string\">\"\"</span>\t<span class=\"comment\">// false</span></span><br><span class=\"line\">a == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">b == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Objects-VS-non-Objects\"><a href=\"#Objects-VS-non-Objects\" class=\"headerlink\" title=\"Objects VS. non-Objects\"></a>Objects VS. non-Objects</h3><blockquote>\n<p>If Type(x) is either String or Number and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).<br>  If Type(x) is Object and Type(y) is either String or Number, return the result of the comparison ToPrimitive(x) == y.</p>\n</blockquote>\n<p>  当复杂类型与基本类型作比较的时候, 复杂类型值首先要转换成基本类型的值, 转化规则前边有介绍.<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'42'</span>] == <span class=\"number\">42</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>(<span class=\"number\">10</span>) == <span class=\"string\">'10'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>  两点需要注意, 构造函数的参数是null或者undefined, 会返回一个”空”对象, 所以下边的结果是有道理的.<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">Object</span>( <span class=\"literal\">null</span> ) <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">Object</span>( <span class=\"literal\">undefined</span> ) <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\">b == <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最后练习\"><a href=\"#最后练习\" class=\"headerlink\" title=\"最后练习\"></a>最后练习</h2>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] == ![] <span class=\"comment\">// true [] == false -&gt; [] == 0 -&gt; \"\" == 0 -&gt; 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> == [<span class=\"number\">2</span>] <span class=\"comment\">// true  2 == \"2\" -&gt; 2 == 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span> == [<span class=\"literal\">null</span>] <span class=\"comment\">// true  \"\" == \"\"  (ps: String([null]) === \"\";  String(null) === \"null\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"0\"</span> == <span class=\"literal\">false</span> <span class=\"comment\">// true \"0\" == 0 -&gt; 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"number\">0</span> <span class=\"comment\">// true 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">\"\"</span> <span class=\"comment\">// true 0 == \"\" -&gt; 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">false</span> == [] <span class=\"comment\">// true 0 == [] -&gt; 0 == \"\" -&gt; 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span> == <span class=\"number\">0</span> <span class=\"comment\">// true 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span> == [] <span class=\"comment\">// true \"\" == \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> == [] <span class=\"comment\">// true 0 == \"\" -&gt; 0 == 0</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>&nbsp;&nbsp;js中存在强制类型转换和隐式类型转换, 有意识地去调用转换方法或者构造函数去转换称为强制类型转换(implicit coercion), 无意识地转换(语言机制自发完成)称为隐式类型转换(explicit coercion).<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = a + <span class=\"string\">\"\"</span> <span class=\"comment\">// implicit coercion</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"built_in\">String</span>( a ) <span class=\"comment\">// explicit coercion</span></span><br></pre></td></tr></table></figure></p>\n<p>这里稍后会讨论的”==”问题, 涉及到的也是隐式类型转换.<br>转换的目标只能是string, number or boolean. 不可能经过隐式类型转换, 转换出一个复杂类型的数据(Object, Array, Function …). 现在来看看各个类型的ToString,ToNumber, ToBoolean, 或者说是ToPrimitive.</p>\n<h3 id=\"ToString\"><a href=\"#ToString\" class=\"headerlink\" title=\"ToString\"></a>ToString</h3><ul>\n<li><p>原生简单对象转化规则<br><strong>null</strong>: 转化为字符串”null”;<br><strong>undefined</strong>: 转化为”undefined”;<br><strong>true/false</strong>: 转化为”true”/“false”;<br><strong>Number</strong>: 大部分情况如预测地那样, 2转化为”2”, 0转化为”0”, 100转化为”100”. 但是事情没有这么简单. 不是10进制的数字, 首先会转化为十进制, 然后再转化为字符串, 并不是数字直接加上引号就行了.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0x23</span>).toString() <span class=\"comment\">// \"35\"</span></span><br><span class=\"line\"><span class=\"number\">0x23</span> == <span class=\"string\">\"35\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>绝对值很大的数值或者绝对值很小的数值, 首先会转化为科学计数法, 然后再进行转化.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0.0000001</span>).toString() <span class=\"comment\">// \"1e-7\"</span></span><br><span class=\"line\">(<span class=\"number\">1000000000000000000000</span>).toString() <span class=\"comment\">// \"1e+21\"</span></span><br><span class=\"line\"><span class=\"number\">0.0000001</span> == <span class=\"string\">\"1e-7\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复杂对象的转化规则<br><strong>Object</strong>: 如果没有指定自己的toString()方法, 就会调用Object.prototype.toString(). 这个函数会返回对象类型字符串, 在这里是”[object Object]”. 如果指定了自己的toString()函数, 会执行这个函数, 使用返回值.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  value: <span class=\"number\">42</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj42 = &#123;</span><br><span class=\"line\">  value: <span class=\"number\">42</span>,</span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"ultimate\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj == <span class=\"string\">\"[object Object]\"</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">obj42 == <span class=\"string\">\"ultimate\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>Array</strong>: Array类型”重载”了Object.prototype.toString(), toString方法返回有一个以”,”隔开的数组元素拼接的字符串.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// \"a,b,c,d,e,f\"</span></span><br><span class=\"line\"><span class=\"comment\">// 修改数组的默认toString方法 别这样做</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>] == <span class=\"string\">\"a-b-c-d-e-f\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>Function</strong>: Function类型也重载了Object.prototype.toString(), 个性化的toString返回函数的字符串形式.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">var</span> s = <span class=\"number\">2</span>;<span class=\"keyword\">return</span> s&#125;) == <span class=\"string\">\"function()&#123;var s = 2;return s&#125;\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"ToNumber\"><a href=\"#ToNumber\" class=\"headerlink\" title=\"ToNumber\"></a>ToNumber</h3><ul>\n<li><p>基本类型转化规则<br><strong>null</strong>: 转化为0!;<br><strong>undefined</strong>: 转化为NaN;<br><strong>true/false</strong>: 转化为1/0;<br><strong>String</strong>: 字符串会尝试使用Number()构造函数(误)去转化结果, 转化失败不会报错, 会返回特殊的数字类型值NaN. 在这种操作中可以正确辨识以0x(0X)为起始符号的16进制的数字字符串, 但是会忽略以”0”起始的部分.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> - <span class=\"literal\">null</span> <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"literal\">true</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">2</span> - <span class=\"literal\">false</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">20</span> - <span class=\"string\">\"0xb\"</span> <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"number\">20</span> - <span class=\"string\">\"013\"</span> <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<p>还有一种特殊情况是, 如果是合法的科学计数法数字字符串, 能正常转化为10进制的数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"1e+10\"</span> == <span class=\"number\">10000000000</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复杂对象的转化规则<br>首先复杂对象会调用内部的ToPrimitive方法, 尝试转化成基础类型值, 如果基础类型值不是number, 则再进行转化. 调用ToPrimitive可以想成首先尝试调用对象的valueOf()方法, 如果有这个方法并且返回的是基础类型值则使用返回值, 否则就尝试调用toString()方法. 如果这两个方法都不存在或者返回值都不是基础类型值, 会抛出TypeError错误.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"1\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">10</span> - a <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;</span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"2\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">10</span> - b <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = &#123;</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"3\"</span>&#125;, <span class=\"comment\">// 首先调用</span></span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"4\"</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">10</span> - c <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> d = &#123;</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> &#123;&#125;&#125;, <span class=\"comment\">// 首先调用</span></span><br><span class=\"line\">  toString: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">\"5\"</span>&#125;, <span class=\"comment\">// 调用valueOf结果不对, 调用toString</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">10</span> - d <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> e = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"number\">10</span> - e <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"ToBoolean\"><a href=\"#ToBoolean\" class=\"headerlink\" title=\"ToBoolean\"></a>ToBoolean</h3><p>  先来看一定是false的几个值</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>false</li>\n<li>+0, -0, and NaN</li>\n<li><p>“”</p>\n<p>这个列表外的值, 都是true(误, 有例外). 复杂类型的值都是true(误, 有例外)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>( <span class=\"literal\">false</span> ) <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>( <span class=\"number\">0</span> ) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在史前时代, 人们判断是不是IE浏览器, 往往用这样的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.all) &#123; <span class=\"comment\">/* it's IE */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>结果慢慢地, 别的浏览器也开始有这个API了. 可是旧代码已经沉淀下来成了地层中的岩石, 挖出来修改的成本太高了, 干脆在非IE浏览器中document.all是falsy算了, 所以导致了这个对象的奇葩行为.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"built_in\">document</span>.all <span class=\"comment\">// true 在IE11以下版本</span></span><br><span class=\"line\">!!<span class=\"built_in\">document</span>.all <span class=\"comment\">// false 在IE11以上版本或非IE环境</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"“-”-VS-“-”\"><a href=\"#“-”-VS-“-”\" class=\"headerlink\" title=\"“==” VS. “===”\"></a>“==” VS. “===”</h2><p>  两者的区别是: “==”比较的时候, 允许隐式类型转换, “===”不允许隐式类型转换.<br>  稍微提下”===”的两个奇葩行为:</p>\n<ul>\n<li>NaN === NaN // false</li>\n<li>-0 === +0 // true</li>\n</ul>\n<h2 id=\"“-”规则\"><a href=\"#“-”规则\" class=\"headerlink\" title=\"“==”规则\"></a>“==”规则</h2>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">42</span> === <span class=\"string\">'42'</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">42</span> == <span class=\"string\">'42'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>  问题来了, 42 == ‘42’到底隐式转换成了什么? 是42 == 42还是’42’==’42’? 接下来就详细介绍下转换的规则, 了解这些规则后, “==”很多诡异的行为都变得有理有据, 再也不用视为”糟粕”不敢用了.</p>\n<h3 id=\"String-VS-Number\"><a href=\"#String-VS-Number\" class=\"headerlink\" title=\"String VS. Number\"></a>String VS. Number</h3><blockquote>\n<p>If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y).<br>  If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.</p>\n</blockquote>\n<p>  如果”==”两边是字符串和数字, 那么字符串转化为数字去比较.<br>  字符串转化为数字的规则, 上边有介绍.</p>\n<h3 id=\"Anything-VS-Boolean\"><a href=\"#Anything-VS-Boolean\" class=\"headerlink\" title=\"Anything VS. Boolean\"></a>Anything VS. Boolean</h3><blockquote>\n<p>If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.<br>  If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).</p>\n</blockquote>\n<p>  如果”==”两边是Boolean值和其他值, 那么第一步会将Boolean值转化为数字, 转化的结果只能是0或1. 然后再用0或1去和其他值比较, 如果其他值是复杂类型的值, 再进行其他转换, 如果是字符串, 参考上一条.<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"string\">'1'</span> <span class=\"comment\">// 1 == '1' -&gt; 1 == 1 true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"string\">'42'</span>  <span class=\"comment\">// 1 == '42' -&gt; 1 == 42 false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"null-VS-undefined\"><a href=\"#null-VS-undefined\" class=\"headerlink\" title=\"null VS. undefined\"></a>null VS. undefined</h3><blockquote>\n<p>If x is null and y is undefined, return true.<br>  If x is undefined and y is null, return true.</p>\n</blockquote>\n<p>  如果是null和undefined作比较, 返回true. 这俩哥们和其他的任何值作比较, 都返回false.<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"literal\">undefined</span></span><br><span class=\"line\">a == b <span class=\"comment\">// true</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span>\t<span class=\"comment\">// true</span></span><br><span class=\"line\">b == <span class=\"literal\">null</span>\t<span class=\"comment\">// true</span></span><br><span class=\"line\">a == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">b == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">a == <span class=\"string\">\"\"</span>\t<span class=\"comment\">// false</span></span><br><span class=\"line\">b == <span class=\"string\">\"\"</span>\t<span class=\"comment\">// false</span></span><br><span class=\"line\">a == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">b == <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Objects-VS-non-Objects\"><a href=\"#Objects-VS-non-Objects\" class=\"headerlink\" title=\"Objects VS. non-Objects\"></a>Objects VS. non-Objects</h3><blockquote>\n<p>If Type(x) is either String or Number and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).<br>  If Type(x) is Object and Type(y) is either String or Number, return the result of the comparison ToPrimitive(x) == y.</p>\n</blockquote>\n<p>  当复杂类型与基本类型作比较的时候, 复杂类型值首先要转换成基本类型的值, 转化规则前边有介绍.<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'42'</span>] == <span class=\"number\">42</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>(<span class=\"number\">10</span>) == <span class=\"string\">'10'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>  两点需要注意, 构造函数的参数是null或者undefined, 会返回一个”空”对象, 所以下边的结果是有道理的.<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">Object</span>( <span class=\"literal\">null</span> ) <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">Object</span>( <span class=\"literal\">undefined</span> ) <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\">b == <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最后练习\"><a href=\"#最后练习\" class=\"headerlink\" title=\"最后练习\"></a>最后练习</h2>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] == ![] <span class=\"comment\">// true [] == false -&gt; [] == 0 -&gt; \"\" == 0 -&gt; 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> == [<span class=\"number\">2</span>] <span class=\"comment\">// true  2 == \"2\" -&gt; 2 == 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span> == [<span class=\"literal\">null</span>] <span class=\"comment\">// true  \"\" == \"\"  (ps: String([null]) === \"\";  String(null) === \"null\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"0\"</span> == <span class=\"literal\">false</span> <span class=\"comment\">// true \"0\" == 0 -&gt; 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"number\">0</span> <span class=\"comment\">// true 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">\"\"</span> <span class=\"comment\">// true 0 == \"\" -&gt; 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">false</span> == [] <span class=\"comment\">// true 0 == [] -&gt; 0 == \"\" -&gt; 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span> == <span class=\"number\">0</span> <span class=\"comment\">// true 0 == 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span> == [] <span class=\"comment\">// true \"\" == \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> == [] <span class=\"comment\">// true 0 == \"\" -&gt; 0 == 0</span></span><br></pre></td></tr></table></figure>"},{"title":"使用draft.js构建富文本编辑器","date":"2019-03-30T07:46:25.000Z","header_image":"https://source.unsplash.com/random","_content":"[Draft.js](https://draftjs.org/)是一个构建富文本编辑器的React框架, 它不是一个富文本编辑器的组件库. draft.js提供构建编辑器的工具, 如何实现, 需要开发者自己去设计. 砖头和水泥都有了, 就差个程序员去盖房子了.  \n## 特点  \n* 大部分编辑器保存的富文本数据都是html, 数据不够结构化, 查询修改数据很不容易. 而Draft.js提供结构化的数据, 表现能力更加强大.  \n* 实现富文本功能的过程中你会发现, Draft.js没有直接操作dom. 数据和渲染的完全分离, 使开发者只需要关注数据层.  \n* 在Draft.js中, 所有的事情都是开发者自己去定制的, 灵活性高, 可扩展性强.  \n* 不管是多样的行内样式还是复杂块级样式, 使用Draft.js都可以方便配置.  \n\n## 开始使用\n\n### 安装  \nDraft.js依赖React和React DOM, 确保项目中安装了这两项.\n```bash\nnpm install --save draft-js react react-dom\n# 或者\nyarn add draft-js react react-dom\n```\n### 基础使用  \n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Editor, EditorState} from 'draft-js';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n  }\n  render() {\n    return (\n        <Editor editorState={this.state.editorState} onChange={this.onChange} />\n    );\n  }\n}\n\nReactDOM.render(\n  <MyEditor />,\n  document.getElementById('container')\n);\n```\n如果配置正常的话, 应该能看到一个可输入区域.  \n简单看下是怎么实现的, 使用过React表单控件的开发应该知道: \n> 其值由 React 控制的输入表单元素称为“受控组件”。  \n\nDraft.js构建的富文本编辑器也是一个\"受控组件\", 使用方法和input控件一样, 指定数据源(this.state.editorState), 添加控制函数(this.onChange). onChange方法触发后, Draft.js会将最新的editorState作为参数传出来, 用新数据渲染, 实现同步更新.  \n因为还没有配置富文本渲染方法, 所以目前还是纯文本编辑器. [Draft.css](https://github.com/facebook/draft-js/issues/1744)文件是默认的渲染样式, 需要在项目中引入生效.  \n## 行内样式  \n### 快捷键\nRichUtils模块拥有很多操作富文本的方法, 现在我们使用RichUtils.handleKeyCommand来实现快捷键修改文本样式的功能.  \n```js\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n  render() {\n    return (\n      <Editor\n        editorState={this.state.editorState}\n        handleKeyCommand={this.handleKeyCommand}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n```\nhandleKeyCommand是控制键盘快捷键的接口.  \nDraft.js默认的快捷键有Cmd+B(加粗), Cmd+I(斜体)等, 当然, 你也可以自己定义快捷键.  \n```js\nimport {Editor, getDefaultKeyBinding, KeyBindingUtil} from 'draft-js';\nconst {hasCommandModifier} = KeyBindingUtil;\nclass MyEditor extends React.Component {\n  // ...\n  handleKeyCommand(command: string): DraftHandleValue {\n    if (command === 'my-key') {\n      // do something ...\n      // 必须返回'handled', 告诉Draft.js采用修改,设置新的editorState\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n  render() {\n    return (\n      <Editor\n        editorState={this.state.editorState}\n        handleKeyCommand={this.handleKeyCommand}\n        keyBindingFn={myKeyBindingFn}\n        ...\n      />\n    );\n  }\n}\n\nfunction myKeyBindingFn(e: SyntheticKeyboardEvent): string {\n  if (e.keyCode === 83 && hasCommandModifier(e)) {\n    return 'my-key';\n  }\n  return getDefaultKeyBinding(e);\n}\n```\n### 按钮  \n在开发富文本编辑器中, 最常用的还是样式按钮. 看Draft.js如何监听一次点击事件设置样式.\n```js\nclass MyEditor extends React.Component {\n  // …\n  handleBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleBoldClick.bind(this)}>Bold</button>\n        <Editor\n          editorState={this.state.editorState}\n          handleKeyCommand={this.handleKeyCommand}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n```\nRichUtils.toggleInlineStyle(this.state.editorState, 'BOLD')将当前选择的文字设置为加粗样式, 返回修改后的editorState, 'BOLD'是Draft.js设置好的样式名称, 其他的还有'ITALIC', 'UNDERLINE', 和 'CODE'. 这些样式名称可以直接使用. 要想获得丰富的富文本样式, 肯定要自己定义一套样式规则.\n```js\nimport {Editor} from 'draft-js';\n/**\n * styleMap用来定义渲染规则 \n * key值是样式的名称, 在RichUtils.toggleInlineStyle(EditorState, key)中使用\n * value是渲染的css规则, 其中用驼峰格式来标识样式属性\n **/\nconst styleMap = {\n  'STRIKETHROUGH': {\n    textDecoration: 'line-through',\n  },\n  'COLOR_RED': {\n    color: 'red'\n  }\n};\nclass MyEditor extends React.Component {\n  // ...\n  handleLineThrough() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'COLOR_RED'));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleLineThrough.bind(this)}>删除线</button>\n        <Editor\n          customStyleMap={styleMap} // 必须在这里指定自定义的样式规则\n          editorState={this.state.editorState}\n          ...\n        />\n      </div>\n    );\n  }\n}\n```\n现在, 行内样式已经搞定了. 在实际开发中, 最好将行内样式定义放在一个单独的文件中, 在要使用的地方用import导入进来, 更近一步可以将执行修改的逻辑也放在控制层, 组件只负责渲染.  \n## 块级样式  \nDraft.js提供了常用的块级样式类型:  \n\n| HTML element   |\tDraft block type |\n| :----          | :----          |\n| <h1/\\>\t       | header-one       |\n| <h2/\\>\t       | header-two |\n| <h3/\\>\t       | header-three |\n| <h4/\\>\t       | header-four |\n| <h5/\\>\t       | header-five |\n| <h6/\\>\t       | header-six |\n| <blockquote/\\> | blockquote |\n| <pre/\\>        | code-block |\n| <figure/\\>\t   | atomic |\n| <li/\\>\t       | unordered-list-item,ordered-list-item** |\n| <div/\\>\t       | unstyled*** | \n\nblockStyleFn属性可以让开发者自己定义渲染块级样式的class, 贴上官网的例子:  \n```js\nimport {Editor} from 'draft-js';\nfunction myBlockStyleFn(contentBlock) {\n  const type = contentBlock.getType();\n  if (type === 'blockquote') {\n    return 'superFancyBlockquote';\n  }\n}\nclass EditorWithFancyBlockquotes extends React.Component {\n  render() {\n    return <Editor ... blockStyleFn={myBlockStyleFn} />;\n  }\n}\n```\n然后在css文件中定义superFancyBlockquote类的样式:\n```css\n.superFancyBlockquote {\n  color: #999;\n  font-family: 'Hoefler Text', Georgia, serif;\n  font-style: italic;\n  text-align: center;\n}\n```\nblockRenderMap属性可以让开发者自己定义块的渲染规则, 可以覆盖默认规则, 也可以添加新的规则.  \n```js\nconst blockRenderMap = Immutable.Map({\n  'header-two': {\n    element: 'div' // 覆盖了默认的规则\n  },\n  // 定义新类型\n  'ul-disc': { \n    element: 'li', // 渲染标签\n    wrapper: React.createElement('ul', { className: 'public-DraftStyleDefault-ul ul-disc' }) // 定义包裹的组件, 类名加上默认的类名和自定义的\n  }\n});\n// 需要merge到默认的规则里边\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(getBlockRender())\n\nclass RichEditor extends React.Component {\n  //...\n  handleUlClick() {\n    this.onChange(\n      RichUtils.toggleBlockType(\n        this.state.editorState,\n        'ul-disc'\n    ));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleUlClick.bind(this)}>UL</button>\n        <Editor\n          ...\n          blockRenderMap={extendedBlockRenderMap}\n        />\n      </div>\n    );\n  }\n}\n```\n需要在自己的样式表中定义.ul-disc的样式, 样式表必须引入才能生效:\n```css\n.ul-disc{\n  list-style-type: disc;\n}\n```\n## 总结  \n先附上自己写的初版富文本链接[demo](https://zhangxuekang.com/rich-text/index.html).  \n![富文本编辑器](https://zhangxuekang.com/src/blog/draft-rich-text/text-editor.png)\n这就是Draft.js的基础应该用, 更多的功能例如超链接, 图片等有时间再撰文介绍. 打铁还需自身硬, 要想使用好Draft.js, 要需要自己去多研究多实践. 官网介绍挺全的(就是一些API很不友好). 附上官网的链接[https://draftjs.org/](https://draftjs.org/). 知乎也是用的Draft.js构建的富文本编辑器, 但是知乎也只用了Draft.js的皮毛, 足以支撑起一个普通的文章编辑和评论编辑器了. 如果你想要构建一个online word, 只能祝你好运. \n附上两篇相关文章:   \n*[Draft.js 在知乎的实践](https://zhuanlan.zhihu.com/p/24951621)*  \n*[为什么都说富文本编辑器是天坑?](https://www.zhihu.com/question/38699645)*\n\n\n","source":"_posts/draft-rich-text.md","raw":"---\ntitle: 使用draft.js构建富文本编辑器  \ndate: 2019-03-30 15:46:25  \ncategories:\n  - react\ntags:\n  - 富文本\n  - draft.js\n  - react\nheader_image: https://source.unsplash.com/random\n---\n[Draft.js](https://draftjs.org/)是一个构建富文本编辑器的React框架, 它不是一个富文本编辑器的组件库. draft.js提供构建编辑器的工具, 如何实现, 需要开发者自己去设计. 砖头和水泥都有了, 就差个程序员去盖房子了.  \n## 特点  \n* 大部分编辑器保存的富文本数据都是html, 数据不够结构化, 查询修改数据很不容易. 而Draft.js提供结构化的数据, 表现能力更加强大.  \n* 实现富文本功能的过程中你会发现, Draft.js没有直接操作dom. 数据和渲染的完全分离, 使开发者只需要关注数据层.  \n* 在Draft.js中, 所有的事情都是开发者自己去定制的, 灵活性高, 可扩展性强.  \n* 不管是多样的行内样式还是复杂块级样式, 使用Draft.js都可以方便配置.  \n\n## 开始使用\n\n### 安装  \nDraft.js依赖React和React DOM, 确保项目中安装了这两项.\n```bash\nnpm install --save draft-js react react-dom\n# 或者\nyarn add draft-js react react-dom\n```\n### 基础使用  \n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Editor, EditorState} from 'draft-js';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n  }\n  render() {\n    return (\n        <Editor editorState={this.state.editorState} onChange={this.onChange} />\n    );\n  }\n}\n\nReactDOM.render(\n  <MyEditor />,\n  document.getElementById('container')\n);\n```\n如果配置正常的话, 应该能看到一个可输入区域.  \n简单看下是怎么实现的, 使用过React表单控件的开发应该知道: \n> 其值由 React 控制的输入表单元素称为“受控组件”。  \n\nDraft.js构建的富文本编辑器也是一个\"受控组件\", 使用方法和input控件一样, 指定数据源(this.state.editorState), 添加控制函数(this.onChange). onChange方法触发后, Draft.js会将最新的editorState作为参数传出来, 用新数据渲染, 实现同步更新.  \n因为还没有配置富文本渲染方法, 所以目前还是纯文本编辑器. [Draft.css](https://github.com/facebook/draft-js/issues/1744)文件是默认的渲染样式, 需要在项目中引入生效.  \n## 行内样式  \n### 快捷键\nRichUtils模块拥有很多操作富文本的方法, 现在我们使用RichUtils.handleKeyCommand来实现快捷键修改文本样式的功能.  \n```js\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n  render() {\n    return (\n      <Editor\n        editorState={this.state.editorState}\n        handleKeyCommand={this.handleKeyCommand}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n```\nhandleKeyCommand是控制键盘快捷键的接口.  \nDraft.js默认的快捷键有Cmd+B(加粗), Cmd+I(斜体)等, 当然, 你也可以自己定义快捷键.  \n```js\nimport {Editor, getDefaultKeyBinding, KeyBindingUtil} from 'draft-js';\nconst {hasCommandModifier} = KeyBindingUtil;\nclass MyEditor extends React.Component {\n  // ...\n  handleKeyCommand(command: string): DraftHandleValue {\n    if (command === 'my-key') {\n      // do something ...\n      // 必须返回'handled', 告诉Draft.js采用修改,设置新的editorState\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n  render() {\n    return (\n      <Editor\n        editorState={this.state.editorState}\n        handleKeyCommand={this.handleKeyCommand}\n        keyBindingFn={myKeyBindingFn}\n        ...\n      />\n    );\n  }\n}\n\nfunction myKeyBindingFn(e: SyntheticKeyboardEvent): string {\n  if (e.keyCode === 83 && hasCommandModifier(e)) {\n    return 'my-key';\n  }\n  return getDefaultKeyBinding(e);\n}\n```\n### 按钮  \n在开发富文本编辑器中, 最常用的还是样式按钮. 看Draft.js如何监听一次点击事件设置样式.\n```js\nclass MyEditor extends React.Component {\n  // …\n  handleBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleBoldClick.bind(this)}>Bold</button>\n        <Editor\n          editorState={this.state.editorState}\n          handleKeyCommand={this.handleKeyCommand}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n```\nRichUtils.toggleInlineStyle(this.state.editorState, 'BOLD')将当前选择的文字设置为加粗样式, 返回修改后的editorState, 'BOLD'是Draft.js设置好的样式名称, 其他的还有'ITALIC', 'UNDERLINE', 和 'CODE'. 这些样式名称可以直接使用. 要想获得丰富的富文本样式, 肯定要自己定义一套样式规则.\n```js\nimport {Editor} from 'draft-js';\n/**\n * styleMap用来定义渲染规则 \n * key值是样式的名称, 在RichUtils.toggleInlineStyle(EditorState, key)中使用\n * value是渲染的css规则, 其中用驼峰格式来标识样式属性\n **/\nconst styleMap = {\n  'STRIKETHROUGH': {\n    textDecoration: 'line-through',\n  },\n  'COLOR_RED': {\n    color: 'red'\n  }\n};\nclass MyEditor extends React.Component {\n  // ...\n  handleLineThrough() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'COLOR_RED'));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleLineThrough.bind(this)}>删除线</button>\n        <Editor\n          customStyleMap={styleMap} // 必须在这里指定自定义的样式规则\n          editorState={this.state.editorState}\n          ...\n        />\n      </div>\n    );\n  }\n}\n```\n现在, 行内样式已经搞定了. 在实际开发中, 最好将行内样式定义放在一个单独的文件中, 在要使用的地方用import导入进来, 更近一步可以将执行修改的逻辑也放在控制层, 组件只负责渲染.  \n## 块级样式  \nDraft.js提供了常用的块级样式类型:  \n\n| HTML element   |\tDraft block type |\n| :----          | :----          |\n| <h1/\\>\t       | header-one       |\n| <h2/\\>\t       | header-two |\n| <h3/\\>\t       | header-three |\n| <h4/\\>\t       | header-four |\n| <h5/\\>\t       | header-five |\n| <h6/\\>\t       | header-six |\n| <blockquote/\\> | blockquote |\n| <pre/\\>        | code-block |\n| <figure/\\>\t   | atomic |\n| <li/\\>\t       | unordered-list-item,ordered-list-item** |\n| <div/\\>\t       | unstyled*** | \n\nblockStyleFn属性可以让开发者自己定义渲染块级样式的class, 贴上官网的例子:  \n```js\nimport {Editor} from 'draft-js';\nfunction myBlockStyleFn(contentBlock) {\n  const type = contentBlock.getType();\n  if (type === 'blockquote') {\n    return 'superFancyBlockquote';\n  }\n}\nclass EditorWithFancyBlockquotes extends React.Component {\n  render() {\n    return <Editor ... blockStyleFn={myBlockStyleFn} />;\n  }\n}\n```\n然后在css文件中定义superFancyBlockquote类的样式:\n```css\n.superFancyBlockquote {\n  color: #999;\n  font-family: 'Hoefler Text', Georgia, serif;\n  font-style: italic;\n  text-align: center;\n}\n```\nblockRenderMap属性可以让开发者自己定义块的渲染规则, 可以覆盖默认规则, 也可以添加新的规则.  \n```js\nconst blockRenderMap = Immutable.Map({\n  'header-two': {\n    element: 'div' // 覆盖了默认的规则\n  },\n  // 定义新类型\n  'ul-disc': { \n    element: 'li', // 渲染标签\n    wrapper: React.createElement('ul', { className: 'public-DraftStyleDefault-ul ul-disc' }) // 定义包裹的组件, 类名加上默认的类名和自定义的\n  }\n});\n// 需要merge到默认的规则里边\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(getBlockRender())\n\nclass RichEditor extends React.Component {\n  //...\n  handleUlClick() {\n    this.onChange(\n      RichUtils.toggleBlockType(\n        this.state.editorState,\n        'ul-disc'\n    ));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleUlClick.bind(this)}>UL</button>\n        <Editor\n          ...\n          blockRenderMap={extendedBlockRenderMap}\n        />\n      </div>\n    );\n  }\n}\n```\n需要在自己的样式表中定义.ul-disc的样式, 样式表必须引入才能生效:\n```css\n.ul-disc{\n  list-style-type: disc;\n}\n```\n## 总结  \n先附上自己写的初版富文本链接[demo](https://zhangxuekang.com/rich-text/index.html).  \n![富文本编辑器](https://zhangxuekang.com/src/blog/draft-rich-text/text-editor.png)\n这就是Draft.js的基础应该用, 更多的功能例如超链接, 图片等有时间再撰文介绍. 打铁还需自身硬, 要想使用好Draft.js, 要需要自己去多研究多实践. 官网介绍挺全的(就是一些API很不友好). 附上官网的链接[https://draftjs.org/](https://draftjs.org/). 知乎也是用的Draft.js构建的富文本编辑器, 但是知乎也只用了Draft.js的皮毛, 足以支撑起一个普通的文章编辑和评论编辑器了. 如果你想要构建一个online word, 只能祝你好运. \n附上两篇相关文章:   \n*[Draft.js 在知乎的实践](https://zhuanlan.zhihu.com/p/24951621)*  \n*[为什么都说富文本编辑器是天坑?](https://www.zhihu.com/question/38699645)*\n\n\n","slug":"draft-rich-text","published":1,"updated":"2019-04-07T00:36:53.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nlx001i142denub9fv3","content":"<p><a href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noopener\">Draft.js</a>是一个构建富文本编辑器的React框架, 它不是一个富文本编辑器的组件库. draft.js提供构建编辑器的工具, 如何实现, 需要开发者自己去设计. 砖头和水泥都有了, 就差个程序员去盖房子了.  </p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>大部分编辑器保存的富文本数据都是html, 数据不够结构化, 查询修改数据很不容易. 而Draft.js提供结构化的数据, 表现能力更加强大.  </li>\n<li>实现富文本功能的过程中你会发现, Draft.js没有直接操作dom. 数据和渲染的完全分离, 使开发者只需要关注数据层.  </li>\n<li>在Draft.js中, 所有的事情都是开发者自己去定制的, 灵活性高, 可扩展性强.  </li>\n<li>不管是多样的行内样式还是复杂块级样式, 使用Draft.js都可以方便配置.  </li>\n</ul>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Draft.js依赖React和React DOM, 确保项目中安装了这两项.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save draft-js react react-dom</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">yarn add draft-js react react-dom</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor, EditorState&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">editorState</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;editorState&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Editor editorState=&#123;<span class=\"keyword\">this</span>.state.editorState&#125; onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125; /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyEditor /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>如果配置正常的话, 应该能看到一个可输入区域.<br>简单看下是怎么实现的, 使用过React表单控件的开发应该知道: </p>\n<blockquote>\n<p>其值由 React 控制的输入表单元素称为“受控组件”。  </p>\n</blockquote>\n<p>Draft.js构建的富文本编辑器也是一个”受控组件”, 使用方法和input控件一样, 指定数据源(this.state.editorState), 添加控制函数(this.onChange). onChange方法触发后, Draft.js会将最新的editorState作为参数传出来, 用新数据渲染, 实现同步更新.<br>因为还没有配置富文本渲染方法, 所以目前还是纯文本编辑器. <a href=\"https://github.com/facebook/draft-js/issues/1744\" target=\"_blank\" rel=\"noopener\">Draft.css</a>文件是默认的渲染样式, 需要在项目中引入生效.  </p>\n<h2 id=\"行内样式\"><a href=\"#行内样式\" class=\"headerlink\" title=\"行内样式\"></a>行内样式</h2><h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>RichUtils模块拥有很多操作富文本的方法, 现在我们使用RichUtils.handleKeyCommand来实现快捷键修改文本样式的功能.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">editorState</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;editorState&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleKeyCommand = <span class=\"keyword\">this</span>.handleKeyCommand.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleKeyCommand(command, editorState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = RichUtils.handleKeyCommand(editorState, command);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newState) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onChange(newState);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'handled'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'not-handled'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Editor</span><br><span class=\"line\">        editorState=&#123;<span class=\"keyword\">this</span>.state.editorState&#125;</span><br><span class=\"line\">        handleKeyCommand=&#123;<span class=\"keyword\">this</span>.handleKeyCommand&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>handleKeyCommand是控制键盘快捷键的接口.<br>Draft.js默认的快捷键有Cmd+B(加粗), Cmd+I(斜体)等, 当然, 你也可以自己定义快捷键.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor, getDefaultKeyBinding, KeyBindingUtil&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;hasCommandModifier&#125; = KeyBindingUtil;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  handleKeyCommand(command: string): DraftHandleValue &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command === <span class=\"string\">'my-key'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something ...</span></span><br><span class=\"line\">      <span class=\"comment\">// 必须返回'handled', 告诉Draft.js采用修改,设置新的editorState</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'handled'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'not-handled'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Editor</span><br><span class=\"line\">        editorState=&#123;<span class=\"keyword\">this</span>.state.editorState&#125;</span><br><span class=\"line\">        handleKeyCommand=&#123;<span class=\"keyword\">this</span>.handleKeyCommand&#125;</span><br><span class=\"line\">        keyBindingFn=&#123;myKeyBindingFn&#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myKeyBindingFn</span>(<span class=\"params\">e: SyntheticKeyboardEvent</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">83</span> &amp;&amp; hasCommandModifier(e)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'my-key'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getDefaultKeyBinding(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><p>在开发富文本编辑器中, 最常用的还是样式按钮. 看Draft.js如何监听一次点击事件设置样式.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// …</span></span><br><span class=\"line\">  handleBoldClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange(RichUtils.toggleInlineStyle(<span class=\"keyword\">this</span>.state.editorState, <span class=\"string\">'BOLD'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleBoldClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;Bold&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Editor</span></span><br><span class=\"line\"><span class=\"regexp\">          editorState=&#123;this.state.editorState&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          handleKeyCommand=&#123;this.handleKeyCommand&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          onChange=&#123;this.onChange&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>RichUtils.toggleInlineStyle(this.state.editorState, ‘BOLD’)将当前选择的文字设置为加粗样式, 返回修改后的editorState, ‘BOLD’是Draft.js设置好的样式名称, 其他的还有’ITALIC’, ‘UNDERLINE’, 和 ‘CODE’. 这些样式名称可以直接使用. 要想获得丰富的富文本样式, 肯定要自己定义一套样式规则.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * styleMap用来定义渲染规则 </span></span><br><span class=\"line\"><span class=\"comment\"> * key值是样式的名称, 在RichUtils.toggleInlineStyle(EditorState, key)中使用</span></span><br><span class=\"line\"><span class=\"comment\"> * value是渲染的css规则, 其中用驼峰格式来标识样式属性</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> styleMap = &#123;</span><br><span class=\"line\">  <span class=\"string\">'STRIKETHROUGH'</span>: &#123;</span><br><span class=\"line\">    textDecoration: <span class=\"string\">'line-through'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'COLOR_RED'</span>: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  handleLineThrough() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange(RichUtils.toggleInlineStyle(<span class=\"keyword\">this</span>.state.editorState, <span class=\"string\">'COLOR_RED'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleLineThrough.bind(<span class=\"keyword\">this</span>)&#125;&gt;删除线&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Editor</span></span><br><span class=\"line\"><span class=\"regexp\">          customStyleMap=&#123;styleMap&#125; /</span><span class=\"regexp\">/ 必须在这里指定自定义的样式规则</span></span><br><span class=\"line\"><span class=\"regexp\">          editorState=&#123;this.state.editorState&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          ...</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>现在, 行内样式已经搞定了. 在实际开发中, 最好将行内样式定义放在一个单独的文件中, 在要使用的地方用import导入进来, 更近一步可以将执行修改的逻辑也放在控制层, 组件只负责渲染.  </p>\n<h2 id=\"块级样式\"><a href=\"#块级样式\" class=\"headerlink\" title=\"块级样式\"></a>块级样式</h2><p>Draft.js提供了常用的块级样式类型:  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">HTML element</th>\n<th style=\"text-align:left\">Draft block type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;h1/></td>\n<td style=\"text-align:left\">header-one</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h2/></td>\n<td style=\"text-align:left\">header-two</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h3/></td>\n<td style=\"text-align:left\">header-three</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h4/></td>\n<td style=\"text-align:left\">header-four</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h5/></td>\n<td style=\"text-align:left\">header-five</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h6/></td>\n<td style=\"text-align:left\">header-six</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;blockquote/></td>\n<td style=\"text-align:left\">blockquote</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;pre/></td>\n<td style=\"text-align:left\">code-block</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;figure/></td>\n<td style=\"text-align:left\">atomic</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;li/></td>\n<td style=\"text-align:left\">unordered-list-item,ordered-list-item**</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;div/></td>\n<td style=\"text-align:left\">unstyled***</td>\n</tr>\n</tbody>\n</table>\n<p>blockStyleFn属性可以让开发者自己定义渲染块级样式的class, 贴上官网的例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myBlockStyleFn</span>(<span class=\"params\">contentBlock</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = contentBlock.getType();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">'blockquote'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'superFancyBlockquote'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWithFancyBlockquotes</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Editor</span> <span class=\"attr\">...</span> <span class=\"attr\">blockStyleFn</span>=<span class=\"string\">&#123;myBlockStyleFn&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后在css文件中定义superFancyBlockquote类的样式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.superFancyBlockquote</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Hoefler Text'</span>, Georgia, serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: italic;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>blockRenderMap属性可以让开发者自己定义块的渲染规则, 可以覆盖默认规则, 也可以添加新的规则.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> blockRenderMap = Immutable.Map(&#123;</span><br><span class=\"line\">  <span class=\"string\">'header-two'</span>: &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'div'</span> <span class=\"comment\">// 覆盖了默认的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 定义新类型</span></span><br><span class=\"line\">  <span class=\"string\">'ul-disc'</span>: &#123; </span><br><span class=\"line\">    element: <span class=\"string\">'li'</span>, <span class=\"comment\">// 渲染标签</span></span><br><span class=\"line\">    wrapper: React.createElement(<span class=\"string\">'ul'</span>, &#123; <span class=\"attr\">className</span>: <span class=\"string\">'public-DraftStyleDefault-ul ul-disc'</span> &#125;) <span class=\"comment\">// 定义包裹的组件, 类名加上默认的类名和自定义的</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 需要merge到默认的规则里边</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(getBlockRender())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RichEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  handleUlClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange(</span><br><span class=\"line\">      RichUtils.toggleBlockType(</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state.editorState,</span><br><span class=\"line\">        <span class=\"string\">'ul-disc'</span></span><br><span class=\"line\">    ));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleUlClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;UL&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Editor</span></span><br><span class=\"line\"><span class=\"regexp\">          ...</span></span><br><span class=\"line\"><span class=\"regexp\">          blockRenderMap=&#123;extendedBlockRenderMap&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>需要在自己的样式表中定义.ul-disc的样式, 样式表必须引入才能生效:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ul-disc</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style-type</span>: disc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>先附上自己写的初版富文本链接<a href=\"https://zhangxuekang.com/rich-text/index.html\">demo</a>.<br><img src=\"https://zhangxuekang.com/src/blog/draft-rich-text/text-editor.png\" alt=\"富文本编辑器\"><br>这就是Draft.js的基础应该用, 更多的功能例如超链接, 图片等有时间再撰文介绍. 打铁还需自身硬, 要想使用好Draft.js, 要需要自己去多研究多实践. 官网介绍挺全的(就是一些API很不友好). 附上官网的链接<a href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noopener\">https://draftjs.org/</a>. 知乎也是用的Draft.js构建的富文本编辑器, 但是知乎也只用了Draft.js的皮毛, 足以支撑起一个普通的文章编辑和评论编辑器了. 如果你想要构建一个online word, 只能祝你好运.<br>附上两篇相关文章:<br><em><a href=\"https://zhuanlan.zhihu.com/p/24951621\" target=\"_blank\" rel=\"noopener\">Draft.js 在知乎的实践</a></em><br><em><a href=\"https://www.zhihu.com/question/38699645\" target=\"_blank\" rel=\"noopener\">为什么都说富文本编辑器是天坑?</a></em></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noopener\">Draft.js</a>是一个构建富文本编辑器的React框架, 它不是一个富文本编辑器的组件库. draft.js提供构建编辑器的工具, 如何实现, 需要开发者自己去设计. 砖头和水泥都有了, 就差个程序员去盖房子了.  </p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>大部分编辑器保存的富文本数据都是html, 数据不够结构化, 查询修改数据很不容易. 而Draft.js提供结构化的数据, 表现能力更加强大.  </li>\n<li>实现富文本功能的过程中你会发现, Draft.js没有直接操作dom. 数据和渲染的完全分离, 使开发者只需要关注数据层.  </li>\n<li>在Draft.js中, 所有的事情都是开发者自己去定制的, 灵活性高, 可扩展性强.  </li>\n<li>不管是多样的行内样式还是复杂块级样式, 使用Draft.js都可以方便配置.  </li>\n</ul>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Draft.js依赖React和React DOM, 确保项目中安装了这两项.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save draft-js react react-dom</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">yarn add draft-js react react-dom</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor, EditorState&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">editorState</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;editorState&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Editor editorState=&#123;<span class=\"keyword\">this</span>.state.editorState&#125; onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125; /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyEditor /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>如果配置正常的话, 应该能看到一个可输入区域.<br>简单看下是怎么实现的, 使用过React表单控件的开发应该知道: </p>\n<blockquote>\n<p>其值由 React 控制的输入表单元素称为“受控组件”。  </p>\n</blockquote>\n<p>Draft.js构建的富文本编辑器也是一个”受控组件”, 使用方法和input控件一样, 指定数据源(this.state.editorState), 添加控制函数(this.onChange). onChange方法触发后, Draft.js会将最新的editorState作为参数传出来, 用新数据渲染, 实现同步更新.<br>因为还没有配置富文本渲染方法, 所以目前还是纯文本编辑器. <a href=\"https://github.com/facebook/draft-js/issues/1744\" target=\"_blank\" rel=\"noopener\">Draft.css</a>文件是默认的渲染样式, 需要在项目中引入生效.  </p>\n<h2 id=\"行内样式\"><a href=\"#行内样式\" class=\"headerlink\" title=\"行内样式\"></a>行内样式</h2><h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>RichUtils模块拥有很多操作富文本的方法, 现在我们使用RichUtils.handleKeyCommand来实现快捷键修改文本样式的功能.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">editorState</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;editorState&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleKeyCommand = <span class=\"keyword\">this</span>.handleKeyCommand.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleKeyCommand(command, editorState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = RichUtils.handleKeyCommand(editorState, command);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newState) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onChange(newState);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'handled'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'not-handled'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Editor</span><br><span class=\"line\">        editorState=&#123;<span class=\"keyword\">this</span>.state.editorState&#125;</span><br><span class=\"line\">        handleKeyCommand=&#123;<span class=\"keyword\">this</span>.handleKeyCommand&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>handleKeyCommand是控制键盘快捷键的接口.<br>Draft.js默认的快捷键有Cmd+B(加粗), Cmd+I(斜体)等, 当然, 你也可以自己定义快捷键.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor, getDefaultKeyBinding, KeyBindingUtil&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;hasCommandModifier&#125; = KeyBindingUtil;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  handleKeyCommand(command: string): DraftHandleValue &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command === <span class=\"string\">'my-key'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something ...</span></span><br><span class=\"line\">      <span class=\"comment\">// 必须返回'handled', 告诉Draft.js采用修改,设置新的editorState</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'handled'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'not-handled'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Editor</span><br><span class=\"line\">        editorState=&#123;<span class=\"keyword\">this</span>.state.editorState&#125;</span><br><span class=\"line\">        handleKeyCommand=&#123;<span class=\"keyword\">this</span>.handleKeyCommand&#125;</span><br><span class=\"line\">        keyBindingFn=&#123;myKeyBindingFn&#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myKeyBindingFn</span>(<span class=\"params\">e: SyntheticKeyboardEvent</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">83</span> &amp;&amp; hasCommandModifier(e)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'my-key'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getDefaultKeyBinding(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><p>在开发富文本编辑器中, 最常用的还是样式按钮. 看Draft.js如何监听一次点击事件设置样式.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// …</span></span><br><span class=\"line\">  handleBoldClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange(RichUtils.toggleInlineStyle(<span class=\"keyword\">this</span>.state.editorState, <span class=\"string\">'BOLD'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleBoldClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;Bold&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Editor</span></span><br><span class=\"line\"><span class=\"regexp\">          editorState=&#123;this.state.editorState&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          handleKeyCommand=&#123;this.handleKeyCommand&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          onChange=&#123;this.onChange&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>RichUtils.toggleInlineStyle(this.state.editorState, ‘BOLD’)将当前选择的文字设置为加粗样式, 返回修改后的editorState, ‘BOLD’是Draft.js设置好的样式名称, 其他的还有’ITALIC’, ‘UNDERLINE’, 和 ‘CODE’. 这些样式名称可以直接使用. 要想获得丰富的富文本样式, 肯定要自己定义一套样式规则.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * styleMap用来定义渲染规则 </span></span><br><span class=\"line\"><span class=\"comment\"> * key值是样式的名称, 在RichUtils.toggleInlineStyle(EditorState, key)中使用</span></span><br><span class=\"line\"><span class=\"comment\"> * value是渲染的css规则, 其中用驼峰格式来标识样式属性</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> styleMap = &#123;</span><br><span class=\"line\">  <span class=\"string\">'STRIKETHROUGH'</span>: &#123;</span><br><span class=\"line\">    textDecoration: <span class=\"string\">'line-through'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'COLOR_RED'</span>: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  handleLineThrough() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange(RichUtils.toggleInlineStyle(<span class=\"keyword\">this</span>.state.editorState, <span class=\"string\">'COLOR_RED'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleLineThrough.bind(<span class=\"keyword\">this</span>)&#125;&gt;删除线&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Editor</span></span><br><span class=\"line\"><span class=\"regexp\">          customStyleMap=&#123;styleMap&#125; /</span><span class=\"regexp\">/ 必须在这里指定自定义的样式规则</span></span><br><span class=\"line\"><span class=\"regexp\">          editorState=&#123;this.state.editorState&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          ...</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>现在, 行内样式已经搞定了. 在实际开发中, 最好将行内样式定义放在一个单独的文件中, 在要使用的地方用import导入进来, 更近一步可以将执行修改的逻辑也放在控制层, 组件只负责渲染.  </p>\n<h2 id=\"块级样式\"><a href=\"#块级样式\" class=\"headerlink\" title=\"块级样式\"></a>块级样式</h2><p>Draft.js提供了常用的块级样式类型:  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">HTML element</th>\n<th style=\"text-align:left\">Draft block type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;h1/></td>\n<td style=\"text-align:left\">header-one</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h2/></td>\n<td style=\"text-align:left\">header-two</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h3/></td>\n<td style=\"text-align:left\">header-three</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h4/></td>\n<td style=\"text-align:left\">header-four</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h5/></td>\n<td style=\"text-align:left\">header-five</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;h6/></td>\n<td style=\"text-align:left\">header-six</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;blockquote/></td>\n<td style=\"text-align:left\">blockquote</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;pre/></td>\n<td style=\"text-align:left\">code-block</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;figure/></td>\n<td style=\"text-align:left\">atomic</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;li/></td>\n<td style=\"text-align:left\">unordered-list-item,ordered-list-item**</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;div/></td>\n<td style=\"text-align:left\">unstyled***</td>\n</tr>\n</tbody>\n</table>\n<p>blockStyleFn属性可以让开发者自己定义渲染块级样式的class, 贴上官网的例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myBlockStyleFn</span>(<span class=\"params\">contentBlock</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = contentBlock.getType();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">'blockquote'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'superFancyBlockquote'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditorWithFancyBlockquotes</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Editor</span> <span class=\"attr\">...</span> <span class=\"attr\">blockStyleFn</span>=<span class=\"string\">&#123;myBlockStyleFn&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后在css文件中定义superFancyBlockquote类的样式:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.superFancyBlockquote</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Hoefler Text'</span>, Georgia, serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: italic;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>blockRenderMap属性可以让开发者自己定义块的渲染规则, 可以覆盖默认规则, 也可以添加新的规则.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> blockRenderMap = Immutable.Map(&#123;</span><br><span class=\"line\">  <span class=\"string\">'header-two'</span>: &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'div'</span> <span class=\"comment\">// 覆盖了默认的规则</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 定义新类型</span></span><br><span class=\"line\">  <span class=\"string\">'ul-disc'</span>: &#123; </span><br><span class=\"line\">    element: <span class=\"string\">'li'</span>, <span class=\"comment\">// 渲染标签</span></span><br><span class=\"line\">    wrapper: React.createElement(<span class=\"string\">'ul'</span>, &#123; <span class=\"attr\">className</span>: <span class=\"string\">'public-DraftStyleDefault-ul ul-disc'</span> &#125;) <span class=\"comment\">// 定义包裹的组件, 类名加上默认的类名和自定义的</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 需要merge到默认的规则里边</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(getBlockRender())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RichEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  handleUlClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange(</span><br><span class=\"line\">      RichUtils.toggleBlockType(</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state.editorState,</span><br><span class=\"line\">        <span class=\"string\">'ul-disc'</span></span><br><span class=\"line\">    ));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleUlClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;UL&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Editor</span></span><br><span class=\"line\"><span class=\"regexp\">          ...</span></span><br><span class=\"line\"><span class=\"regexp\">          blockRenderMap=&#123;extendedBlockRenderMap&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>需要在自己的样式表中定义.ul-disc的样式, 样式表必须引入才能生效:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ul-disc</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style-type</span>: disc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>先附上自己写的初版富文本链接<a href=\"https://zhangxuekang.com/rich-text/index.html\">demo</a>.<br><img src=\"https://zhangxuekang.com/src/blog/draft-rich-text/text-editor.png\" alt=\"富文本编辑器\"><br>这就是Draft.js的基础应该用, 更多的功能例如超链接, 图片等有时间再撰文介绍. 打铁还需自身硬, 要想使用好Draft.js, 要需要自己去多研究多实践. 官网介绍挺全的(就是一些API很不友好). 附上官网的链接<a href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noopener\">https://draftjs.org/</a>. 知乎也是用的Draft.js构建的富文本编辑器, 但是知乎也只用了Draft.js的皮毛, 足以支撑起一个普通的文章编辑和评论编辑器了. 如果你想要构建一个online word, 只能祝你好运.<br>附上两篇相关文章:<br><em><a href=\"https://zhuanlan.zhihu.com/p/24951621\" target=\"_blank\" rel=\"noopener\">Draft.js 在知乎的实践</a></em><br><em><a href=\"https://www.zhihu.com/question/38699645\" target=\"_blank\" rel=\"noopener\">为什么都说富文本编辑器是天坑?</a></em></p>\n"},{"title":"从两个需求说起svg路径动画","date":"2019-08-16T08:00:51.000Z","header_image":"https://source.unsplash.com/random","_content":"# 一、从一次需求说起\n在做一个在线课件的项目，类似于web端在线的ppt制作工具。制作课件避免不了各种进入退出动画，ppt有的，公司工具也必须有。各种淡入淡出，从上、下、左、右方向飞出飞入，css3动画安排上！正在我写的不亦乐乎，觉得微软入场动画也不过如此的时候，产品经理来了。“ppt有的动画咱们工具必须有，ppt没有的动画，咱么也要有！我们要让老师自定义动画，制作课件的时候用鼠标画出路径，然后保存路径数据，播放的时候元素沿着路径飞进来。”\n<img alt=\"飞入曲线\" src=\"https://zhangxuekang.com/src/blog/path-animation/fly-path.png\" width=\"40%\">\n在我意识到产品经理不是在开玩笑的时候，我断然拒绝了接需求。当产品经理带着老板又来提这个需求的时候，我感觉到事情没这么简单······  \n最终还是我妥协了，自认为我还是刚不过老板的。  \n<img alt=\"学会妥协\" src=\"https://zhangxuekang.com/src/blog/path-animation/tuoxie.jpg\" width=\"30%\">\n这个需求，将我初中的知识用的淋漓尽致（感谢初中老师）。  \n# 二、解决技术难题\n要记录鼠标轨迹，一定要用到鼠标的mousemove事件，mousemove事件能获取一系列的鼠标位置点，就可以控制元素一个点一个点“蹦”过去。\n在我脑补了一个青蛙沿着一个一个黑点跳过去的画面后，我马上放弃了这个想法。\n<img alt=\"青蛙\" src=\"https://zhangxuekang.com/src/blog/path-animation/qingwa.jpg\" width=\"50%\">\n动画移动是平滑的，绝对不是离散的。开始搜“如何将一系列离散的位置点拟合成平滑的曲线？”移步博客[*记录鼠标轨迹, 生成svg路径*](https://zhangxuekang.com/2019/03/30/mouse-svg/)。  \n路径数据有了，是三次贝塞尔曲线，剩下的就是构建svg路径，让元素动起来了。  \n## 如何让元素沿着svg曲线移动？\n`SVGPathElement`接口对应于`<path>`元素。这个接口有两个很有用的方法**`getTotalLength()`**和**`getPointAtLength()`**，前者得到path路径全长，后者传入长度得到坐标。  \n有了这些知识就可以做很多事情了，知道总长和总时间就可以知道速度，知道速度也知道当前走过的时间就可以算出当前走过的路程，知道当前的路程就知道了当前在path上的坐标，知道了当前坐标就能让元素就位了！很简单的路程速度与时间的方程，`s = vt`。  \n### 撸代码\n```js\n// 首先构建出path元素\nconst path = 'M182,171 C183.25,171,185,171,187,171 C189,171,188.75,170.75,190,171 ......'\nconst pathEl = document.createElementNS('http://www.w3.org/2000/svg', 'path');\npathEl.setAttribute('d', path);\n// 记录总时长，总长度和起始时间\nconst duration = 2000; // ms\nconst totalLength = pathEl.getTotalLength(); // 总长\nlet curPosition = pathEl.getPointAtLength(0); // 当前坐标,一开始是在起始点\nconst startTime = new Date().getTime(); // 起始时间\n\nrequestAnimationFrame(step); // js动画必备方法\n// 动画前进一小步\nfunction step() {\n  const nowTime = new Date().getTime();\n  const t = (nowTime - startTime) / duration; // 时间进度 0~1\n  const progress = totalLength * t // 当前走过的路程\n  curPosition = pathEl.getPointAtLength(progress); // 当前位置点的坐标\n  $e.style.transform = `translate(${curPosition.x}px, ${curPosition.y}px)`;\n  if (t <= 1) {\n    requestAnimationFrame(step);\n  }\n}\n```\n[看demo](https://zhangxuekang.com/mouse-svg/index.html)\n<img alt=\"胜利\" src=\"https://zhangxuekang.com/src/blog/path-animation/shengli.jpg\" width=\"50%\">\n# 又一次需求\n一个元素收起的动画，动点从不同的位置沿着不同的路径飞入同一个目标，就像这个样子。\n<img alt=\"路径图\" src=\"https://zhangxuekang.com/src/blog/path-animation/path.png\" width=\"40%\">\n有了上边的经验，实现起来就不慌了。\n<img alt=\"不慌\" src=\"https://zhangxuekang.com/src/blog/path-animation/buhuang.jpeg\">\n沿着上边的思路，先确定svg路径，再确定时间（动效老师直接给出），完全没问题！  \n## 确定路径\n动效老师在了解到这是贝塞尔曲线后，马上给出了24个控制点的数据。因为起点一共有12个，终点有一个，这就有12条路径，每一条路径两个控制点，一共有24个控制点坐标。看着控制点坐标数据表格，我陷入了沉思，这咋维护？如果起点和终点的相对位置变了，岂不是需要重新计算24个控制点，这谁受得了？  \n理想情况是根据某种规律，由起点和终点的坐标计算出控制点坐标，起点和终点前端可以自己获取。经过观察，元素的移动路径是有规律的，起点在终点左边的点移动曲线向左弯曲，起点在终点右边的曲线向右弯曲，起点和终点的x坐标绝对值越大，曲线弧度越大，根据这些规律，完全可以得出一个公式。同时动效老师妥协了一步，将三次贝塞尔曲线改成了二次贝塞尔曲线（只需要一个控制点）。  \n由我提出控制点的计算公式，进过动效老师的确认，示意图如下。\n<img alt=\"控制点示意图\" src=\"https://zhangxuekang.com/src/blog/path-animation/jiexi.png\" width=\"50%\">\n接下来就是列公式求坐标了！\n<img alt=\"控制点示意图1\" src=\"https://zhangxuekang.com/src/blog/path-animation/f1.jpeg\" width=\"50%\">\n起始两点连线的中点坐标可以计算出来，还能计算出L1斜率，相差90度就是L2的斜率。那么，知道直线上一点坐标和直线的斜率，理论上可以计算出直线的解析方程，又知道在这个直线上一点计算另一个距离该点一定距离点的坐标······好麻烦！不会算😂😂😂，要不要求助一下初中的数学老师🤔？为了维护大学生的尊严，我又换了一种思路。  \n<img alt=\"控制点示意图2\" src=\"https://zhangxuekang.com/src/blog/path-animation/f2.jpeg\" width=\"50%\">\n大家都知道，三角形1和三角形2是相似三角形（不知道为什么的同学，主动去问初中数学老师），根据相似三角形理论写出代码：\n```js\nfunction getControl(from, to) {\n  const x1 = from.x;\n  const y1 = from.y;\n  const x2 = to.x;\n  const y2 = to.y;\n  const l = Math.abs(x1 - x2) * 1.5; // 横坐标的差绝对值, 1.5是偏移系数,约大曲线弧度越大\n  const L = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)); // 起始点与终点的直线距离\n  const a = (Math.abs(x1 - x2) * l) / L; // 根据相似三角形计算出来的中间变量\n  const b = (Math.abs(y1 - y2) * l) / L; // 根据相似三角形计算出来的中间变量\n  const midx = (x1 + x2) / 2; // 中点横坐标\n  const midy = (y1 + y2) / 2; // 中点纵坐标\n  let control; // 二次贝塞尔曲线控制点\n  if (x2 > x1) {\n    // 如果起点做终点右测,则曲线向左斜\n    control = { x: midx - b, y: midy + a };\n  } else {\n    // 如果起点做终点左测,则曲线向右斜\n    control = { x: midx + b, y: midy + a };\n  }\n  return control;\n}\n```\n计算出了控制点就可以构建svg了\n```js\nconst path = `M${from.x} ${from.y} Q ${control.x} ${control.y} ${to.x} ${to.y}`;\nconst pathEl = document.createElementNS('http://www.w3.org/2000/svg', 'path');\npathEl.setAttribute('d', path);\n```\n路径出来，再根据动效老师给的动画时间duration，效果就实现了！  \n仔细看动效设计，元素在移动的过程中，自身的大小和旋转角度都在改变，接下来解决这个问题。\n# 解决元素大小和角度变化的问题\n大小是时间的函数，动效老师给了起始的大小0.4，中间的大小1，最后的大小0.3。将变化曲线标识在坐标轴上就是这样。\n<img alt=\"时间-大小函数\" src=\"https://zhangxuekang.com/src/blog/path-animation/f3.jpeg\" width=\"50%\">\n变化函数分为两段，每段线段都知道两个端点坐标，数学老师告诉我，这些条件可以求出函数表达式，两段就是两个式子，最后求出是\n```js\nif (t < 0.5) {\n  // 两个坐标点(0,startScale) (0.5,midScale) 求scale对t的函数\n  scale = (midScale - startScale) * 2 * t + startScale;\n} else {\n  // 两个坐标点(0.5,midScale) (1,endScale) 求scale对t的函数\n  scale = 2 * (endScale - midScale) * t + 2 * midScale - endScale;\n}\n```\n将scale的变化考虑进去\n```js\n$e.style.transform = `translate(${curPosition.x}px, ${curPosition.y}px scale(${scale}))`;\n```\n剩下的就是旋转角度了，元素的长轴永远是沿着曲线的切线，也就是旋转角度和当时的切线斜率是一致的。如何求曲线的切线？  \n<img alt=\"切线斜率\" src=\"https://zhangxuekang.com/src/blog/path-animation/f4.jpeg\">\n几何学上，曲线的**割线**无限短时，就是曲线的**切线**。这就将切线问题转化为割线问题，如果我们记录元素移动过程中相邻的两个位置点，根据这两个点求割线的斜率，就接近于真实的切线斜率。\n```js\nlet lastPosition = { x: from.x, y: from.y }; // 记录上一个位置点\nfunction step() {\n  ····\n  curPosition = pathEl.getPointAtLength(progress); // 当前位置点的坐标\n  const rotate = getRotate(lastPosition, curPosition); // 获取当前方向角度\n  // 将位置,角度和大小作用到飞点上\n  $e.style.transform = `translate(${x}px, ${y}px) rotate(${rotate}deg) scale(${scale})`;\n  lastPosition = curPosition;\n  ···\n}\n// 计算切线斜率\nfunction getRotate(lastPos, thisPos) {\n  const x1 = lastPos.x;\n  const y1 = lastPos.y;\n  const x2 = thisPos.x;\n  const y2 = thisPos.y;\n  const tan_deg = Math.abs(x1 - x2) / Math.abs(y1 - y2);  // 正切值tan/tg\n  const deg = Math.atan(tan_deg); // 反函数求角度\n  return ((x2 - x1 > 0 ? deg : -deg) * 180) / Math.PI || 0;\n}\n```\n至此，这次动画效果完整实现了出来。\n# 总结\n这次需求涉及到的数学知识很多，如何拟合曲线、路程时间速度计算、相似三角形、求函数表达式（二元一次方程组求解）、求曲线切线斜率。不过还好，都是初高中学到的，还不算超纲。  \n掌握SVGPathElement接口的两个方法getTotalLength()、getPointAtLength()，能实现无比复杂的移动动画。\n","source":"_posts/path-animation.md","raw":"---\ntitle: 从两个需求说起svg路径动画\ndate: 2019-08-16 16:00:51\ncategories:\n  - javascript\ntags:\n  - javascript\n  - 动画\n  - svg\nheader_image: https://source.unsplash.com/random\n---\n# 一、从一次需求说起\n在做一个在线课件的项目，类似于web端在线的ppt制作工具。制作课件避免不了各种进入退出动画，ppt有的，公司工具也必须有。各种淡入淡出，从上、下、左、右方向飞出飞入，css3动画安排上！正在我写的不亦乐乎，觉得微软入场动画也不过如此的时候，产品经理来了。“ppt有的动画咱们工具必须有，ppt没有的动画，咱么也要有！我们要让老师自定义动画，制作课件的时候用鼠标画出路径，然后保存路径数据，播放的时候元素沿着路径飞进来。”\n<img alt=\"飞入曲线\" src=\"https://zhangxuekang.com/src/blog/path-animation/fly-path.png\" width=\"40%\">\n在我意识到产品经理不是在开玩笑的时候，我断然拒绝了接需求。当产品经理带着老板又来提这个需求的时候，我感觉到事情没这么简单······  \n最终还是我妥协了，自认为我还是刚不过老板的。  \n<img alt=\"学会妥协\" src=\"https://zhangxuekang.com/src/blog/path-animation/tuoxie.jpg\" width=\"30%\">\n这个需求，将我初中的知识用的淋漓尽致（感谢初中老师）。  \n# 二、解决技术难题\n要记录鼠标轨迹，一定要用到鼠标的mousemove事件，mousemove事件能获取一系列的鼠标位置点，就可以控制元素一个点一个点“蹦”过去。\n在我脑补了一个青蛙沿着一个一个黑点跳过去的画面后，我马上放弃了这个想法。\n<img alt=\"青蛙\" src=\"https://zhangxuekang.com/src/blog/path-animation/qingwa.jpg\" width=\"50%\">\n动画移动是平滑的，绝对不是离散的。开始搜“如何将一系列离散的位置点拟合成平滑的曲线？”移步博客[*记录鼠标轨迹, 生成svg路径*](https://zhangxuekang.com/2019/03/30/mouse-svg/)。  \n路径数据有了，是三次贝塞尔曲线，剩下的就是构建svg路径，让元素动起来了。  \n## 如何让元素沿着svg曲线移动？\n`SVGPathElement`接口对应于`<path>`元素。这个接口有两个很有用的方法**`getTotalLength()`**和**`getPointAtLength()`**，前者得到path路径全长，后者传入长度得到坐标。  \n有了这些知识就可以做很多事情了，知道总长和总时间就可以知道速度，知道速度也知道当前走过的时间就可以算出当前走过的路程，知道当前的路程就知道了当前在path上的坐标，知道了当前坐标就能让元素就位了！很简单的路程速度与时间的方程，`s = vt`。  \n### 撸代码\n```js\n// 首先构建出path元素\nconst path = 'M182,171 C183.25,171,185,171,187,171 C189,171,188.75,170.75,190,171 ......'\nconst pathEl = document.createElementNS('http://www.w3.org/2000/svg', 'path');\npathEl.setAttribute('d', path);\n// 记录总时长，总长度和起始时间\nconst duration = 2000; // ms\nconst totalLength = pathEl.getTotalLength(); // 总长\nlet curPosition = pathEl.getPointAtLength(0); // 当前坐标,一开始是在起始点\nconst startTime = new Date().getTime(); // 起始时间\n\nrequestAnimationFrame(step); // js动画必备方法\n// 动画前进一小步\nfunction step() {\n  const nowTime = new Date().getTime();\n  const t = (nowTime - startTime) / duration; // 时间进度 0~1\n  const progress = totalLength * t // 当前走过的路程\n  curPosition = pathEl.getPointAtLength(progress); // 当前位置点的坐标\n  $e.style.transform = `translate(${curPosition.x}px, ${curPosition.y}px)`;\n  if (t <= 1) {\n    requestAnimationFrame(step);\n  }\n}\n```\n[看demo](https://zhangxuekang.com/mouse-svg/index.html)\n<img alt=\"胜利\" src=\"https://zhangxuekang.com/src/blog/path-animation/shengli.jpg\" width=\"50%\">\n# 又一次需求\n一个元素收起的动画，动点从不同的位置沿着不同的路径飞入同一个目标，就像这个样子。\n<img alt=\"路径图\" src=\"https://zhangxuekang.com/src/blog/path-animation/path.png\" width=\"40%\">\n有了上边的经验，实现起来就不慌了。\n<img alt=\"不慌\" src=\"https://zhangxuekang.com/src/blog/path-animation/buhuang.jpeg\">\n沿着上边的思路，先确定svg路径，再确定时间（动效老师直接给出），完全没问题！  \n## 确定路径\n动效老师在了解到这是贝塞尔曲线后，马上给出了24个控制点的数据。因为起点一共有12个，终点有一个，这就有12条路径，每一条路径两个控制点，一共有24个控制点坐标。看着控制点坐标数据表格，我陷入了沉思，这咋维护？如果起点和终点的相对位置变了，岂不是需要重新计算24个控制点，这谁受得了？  \n理想情况是根据某种规律，由起点和终点的坐标计算出控制点坐标，起点和终点前端可以自己获取。经过观察，元素的移动路径是有规律的，起点在终点左边的点移动曲线向左弯曲，起点在终点右边的曲线向右弯曲，起点和终点的x坐标绝对值越大，曲线弧度越大，根据这些规律，完全可以得出一个公式。同时动效老师妥协了一步，将三次贝塞尔曲线改成了二次贝塞尔曲线（只需要一个控制点）。  \n由我提出控制点的计算公式，进过动效老师的确认，示意图如下。\n<img alt=\"控制点示意图\" src=\"https://zhangxuekang.com/src/blog/path-animation/jiexi.png\" width=\"50%\">\n接下来就是列公式求坐标了！\n<img alt=\"控制点示意图1\" src=\"https://zhangxuekang.com/src/blog/path-animation/f1.jpeg\" width=\"50%\">\n起始两点连线的中点坐标可以计算出来，还能计算出L1斜率，相差90度就是L2的斜率。那么，知道直线上一点坐标和直线的斜率，理论上可以计算出直线的解析方程，又知道在这个直线上一点计算另一个距离该点一定距离点的坐标······好麻烦！不会算😂😂😂，要不要求助一下初中的数学老师🤔？为了维护大学生的尊严，我又换了一种思路。  \n<img alt=\"控制点示意图2\" src=\"https://zhangxuekang.com/src/blog/path-animation/f2.jpeg\" width=\"50%\">\n大家都知道，三角形1和三角形2是相似三角形（不知道为什么的同学，主动去问初中数学老师），根据相似三角形理论写出代码：\n```js\nfunction getControl(from, to) {\n  const x1 = from.x;\n  const y1 = from.y;\n  const x2 = to.x;\n  const y2 = to.y;\n  const l = Math.abs(x1 - x2) * 1.5; // 横坐标的差绝对值, 1.5是偏移系数,约大曲线弧度越大\n  const L = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)); // 起始点与终点的直线距离\n  const a = (Math.abs(x1 - x2) * l) / L; // 根据相似三角形计算出来的中间变量\n  const b = (Math.abs(y1 - y2) * l) / L; // 根据相似三角形计算出来的中间变量\n  const midx = (x1 + x2) / 2; // 中点横坐标\n  const midy = (y1 + y2) / 2; // 中点纵坐标\n  let control; // 二次贝塞尔曲线控制点\n  if (x2 > x1) {\n    // 如果起点做终点右测,则曲线向左斜\n    control = { x: midx - b, y: midy + a };\n  } else {\n    // 如果起点做终点左测,则曲线向右斜\n    control = { x: midx + b, y: midy + a };\n  }\n  return control;\n}\n```\n计算出了控制点就可以构建svg了\n```js\nconst path = `M${from.x} ${from.y} Q ${control.x} ${control.y} ${to.x} ${to.y}`;\nconst pathEl = document.createElementNS('http://www.w3.org/2000/svg', 'path');\npathEl.setAttribute('d', path);\n```\n路径出来，再根据动效老师给的动画时间duration，效果就实现了！  \n仔细看动效设计，元素在移动的过程中，自身的大小和旋转角度都在改变，接下来解决这个问题。\n# 解决元素大小和角度变化的问题\n大小是时间的函数，动效老师给了起始的大小0.4，中间的大小1，最后的大小0.3。将变化曲线标识在坐标轴上就是这样。\n<img alt=\"时间-大小函数\" src=\"https://zhangxuekang.com/src/blog/path-animation/f3.jpeg\" width=\"50%\">\n变化函数分为两段，每段线段都知道两个端点坐标，数学老师告诉我，这些条件可以求出函数表达式，两段就是两个式子，最后求出是\n```js\nif (t < 0.5) {\n  // 两个坐标点(0,startScale) (0.5,midScale) 求scale对t的函数\n  scale = (midScale - startScale) * 2 * t + startScale;\n} else {\n  // 两个坐标点(0.5,midScale) (1,endScale) 求scale对t的函数\n  scale = 2 * (endScale - midScale) * t + 2 * midScale - endScale;\n}\n```\n将scale的变化考虑进去\n```js\n$e.style.transform = `translate(${curPosition.x}px, ${curPosition.y}px scale(${scale}))`;\n```\n剩下的就是旋转角度了，元素的长轴永远是沿着曲线的切线，也就是旋转角度和当时的切线斜率是一致的。如何求曲线的切线？  \n<img alt=\"切线斜率\" src=\"https://zhangxuekang.com/src/blog/path-animation/f4.jpeg\">\n几何学上，曲线的**割线**无限短时，就是曲线的**切线**。这就将切线问题转化为割线问题，如果我们记录元素移动过程中相邻的两个位置点，根据这两个点求割线的斜率，就接近于真实的切线斜率。\n```js\nlet lastPosition = { x: from.x, y: from.y }; // 记录上一个位置点\nfunction step() {\n  ····\n  curPosition = pathEl.getPointAtLength(progress); // 当前位置点的坐标\n  const rotate = getRotate(lastPosition, curPosition); // 获取当前方向角度\n  // 将位置,角度和大小作用到飞点上\n  $e.style.transform = `translate(${x}px, ${y}px) rotate(${rotate}deg) scale(${scale})`;\n  lastPosition = curPosition;\n  ···\n}\n// 计算切线斜率\nfunction getRotate(lastPos, thisPos) {\n  const x1 = lastPos.x;\n  const y1 = lastPos.y;\n  const x2 = thisPos.x;\n  const y2 = thisPos.y;\n  const tan_deg = Math.abs(x1 - x2) / Math.abs(y1 - y2);  // 正切值tan/tg\n  const deg = Math.atan(tan_deg); // 反函数求角度\n  return ((x2 - x1 > 0 ? deg : -deg) * 180) / Math.PI || 0;\n}\n```\n至此，这次动画效果完整实现了出来。\n# 总结\n这次需求涉及到的数学知识很多，如何拟合曲线、路程时间速度计算、相似三角形、求函数表达式（二元一次方程组求解）、求曲线切线斜率。不过还好，都是初高中学到的，还不算超纲。  \n掌握SVGPathElement接口的两个方法getTotalLength()、getPointAtLength()，能实现无比复杂的移动动画。\n","slug":"path-animation","published":1,"updated":"2019-08-23T12:33:10.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknvk9nly001k142dsx7rs1hh","content":"<h1 id=\"一、从一次需求说起\"><a href=\"#一、从一次需求说起\" class=\"headerlink\" title=\"一、从一次需求说起\"></a>一、从一次需求说起</h1><p>在做一个在线课件的项目，类似于web端在线的ppt制作工具。制作课件避免不了各种进入退出动画，ppt有的，公司工具也必须有。各种淡入淡出，从上、下、左、右方向飞出飞入，css3动画安排上！正在我写的不亦乐乎，觉得微软入场动画也不过如此的时候，产品经理来了。“ppt有的动画咱们工具必须有，ppt没有的动画，咱么也要有！我们要让老师自定义动画，制作课件的时候用鼠标画出路径，然后保存路径数据，播放的时候元素沿着路径飞进来。”<br><img alt=\"飞入曲线\" src=\"https://zhangxuekang.com/src/blog/path-animation/fly-path.png\" width=\"40%\"><br>在我意识到产品经理不是在开玩笑的时候，我断然拒绝了接需求。当产品经理带着老板又来提这个需求的时候，我感觉到事情没这么简单······<br>最终还是我妥协了，自认为我还是刚不过老板的。<br><img alt=\"学会妥协\" src=\"https://zhangxuekang.com/src/blog/path-animation/tuoxie.jpg\" width=\"30%\"><br>这个需求，将我初中的知识用的淋漓尽致（感谢初中老师）。  </p>\n<h1 id=\"二、解决技术难题\"><a href=\"#二、解决技术难题\" class=\"headerlink\" title=\"二、解决技术难题\"></a>二、解决技术难题</h1><p>要记录鼠标轨迹，一定要用到鼠标的mousemove事件，mousemove事件能获取一系列的鼠标位置点，就可以控制元素一个点一个点“蹦”过去。<br>在我脑补了一个青蛙沿着一个一个黑点跳过去的画面后，我马上放弃了这个想法。<br><img alt=\"青蛙\" src=\"https://zhangxuekang.com/src/blog/path-animation/qingwa.jpg\" width=\"50%\"><br>动画移动是平滑的，绝对不是离散的。开始搜“如何将一系列离散的位置点拟合成平滑的曲线？”移步博客<a href=\"https://zhangxuekang.com/2019/03/30/mouse-svg/\"><em>记录鼠标轨迹, 生成svg路径</em></a>。<br>路径数据有了，是三次贝塞尔曲线，剩下的就是构建svg路径，让元素动起来了。  </p>\n<h2 id=\"如何让元素沿着svg曲线移动？\"><a href=\"#如何让元素沿着svg曲线移动？\" class=\"headerlink\" title=\"如何让元素沿着svg曲线移动？\"></a>如何让元素沿着svg曲线移动？</h2><p><code>SVGPathElement</code>接口对应于<code>&lt;path&gt;</code>元素。这个接口有两个很有用的方法<strong><code>getTotalLength()</code></strong>和<strong><code>getPointAtLength()</code></strong>，前者得到path路径全长，后者传入长度得到坐标。<br>有了这些知识就可以做很多事情了，知道总长和总时间就可以知道速度，知道速度也知道当前走过的时间就可以算出当前走过的路程，知道当前的路程就知道了当前在path上的坐标，知道了当前坐标就能让元素就位了！很简单的路程速度与时间的方程，<code>s = vt</code>。  </p>\n<h3 id=\"撸代码\"><a href=\"#撸代码\" class=\"headerlink\" title=\"撸代码\"></a>撸代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先构建出path元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"string\">'M182,171 C183.25,171,185,171,187,171 C189,171,188.75,170.75,190,171 ......'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathEl = <span class=\"built_in\">document</span>.createElementNS(<span class=\"string\">'http://www.w3.org/2000/svg'</span>, <span class=\"string\">'path'</span>);</span><br><span class=\"line\">pathEl.setAttribute(<span class=\"string\">'d'</span>, path);</span><br><span class=\"line\"><span class=\"comment\">// 记录总时长，总长度和起始时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> duration = <span class=\"number\">2000</span>; <span class=\"comment\">// ms</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> totalLength = pathEl.getTotalLength(); <span class=\"comment\">// 总长</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> curPosition = pathEl.getPointAtLength(<span class=\"number\">0</span>); <span class=\"comment\">// 当前坐标,一开始是在起始点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(); <span class=\"comment\">// 起始时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">requestAnimationFrame(step); <span class=\"comment\">// js动画必备方法</span></span><br><span class=\"line\"><span class=\"comment\">// 动画前进一小步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nowTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> t = (nowTime - startTime) / duration; <span class=\"comment\">// 时间进度 0~1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> progress = totalLength * t <span class=\"comment\">// 当前走过的路程</span></span><br><span class=\"line\">  curPosition = pathEl.getPointAtLength(progress); <span class=\"comment\">// 当前位置点的坐标</span></span><br><span class=\"line\">  $e.style.transform = <span class=\"string\">`translate(<span class=\"subst\">$&#123;curPosition.x&#125;</span>px, <span class=\"subst\">$&#123;curPosition.y&#125;</span>px)`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    requestAnimationFrame(step);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://zhangxuekang.com/mouse-svg/index.html\">看demo</a><br><img alt=\"胜利\" src=\"https://zhangxuekang.com/src/blog/path-animation/shengli.jpg\" width=\"50%\"></p>\n<h1 id=\"又一次需求\"><a href=\"#又一次需求\" class=\"headerlink\" title=\"又一次需求\"></a>又一次需求</h1><p>一个元素收起的动画，动点从不同的位置沿着不同的路径飞入同一个目标，就像这个样子。<br><img alt=\"路径图\" src=\"https://zhangxuekang.com/src/blog/path-animation/path.png\" width=\"40%\"><br>有了上边的经验，实现起来就不慌了。<br><img alt=\"不慌\" src=\"https://zhangxuekang.com/src/blog/path-animation/buhuang.jpeg\"><br>沿着上边的思路，先确定svg路径，再确定时间（动效老师直接给出），完全没问题！  </p>\n<h2 id=\"确定路径\"><a href=\"#确定路径\" class=\"headerlink\" title=\"确定路径\"></a>确定路径</h2><p>动效老师在了解到这是贝塞尔曲线后，马上给出了24个控制点的数据。因为起点一共有12个，终点有一个，这就有12条路径，每一条路径两个控制点，一共有24个控制点坐标。看着控制点坐标数据表格，我陷入了沉思，这咋维护？如果起点和终点的相对位置变了，岂不是需要重新计算24个控制点，这谁受得了？<br>理想情况是根据某种规律，由起点和终点的坐标计算出控制点坐标，起点和终点前端可以自己获取。经过观察，元素的移动路径是有规律的，起点在终点左边的点移动曲线向左弯曲，起点在终点右边的曲线向右弯曲，起点和终点的x坐标绝对值越大，曲线弧度越大，根据这些规律，完全可以得出一个公式。同时动效老师妥协了一步，将三次贝塞尔曲线改成了二次贝塞尔曲线（只需要一个控制点）。<br>由我提出控制点的计算公式，进过动效老师的确认，示意图如下。<br><img alt=\"控制点示意图\" src=\"https://zhangxuekang.com/src/blog/path-animation/jiexi.png\" width=\"50%\"><br>接下来就是列公式求坐标了！<br><img alt=\"控制点示意图1\" src=\"https://zhangxuekang.com/src/blog/path-animation/f1.jpeg\" width=\"50%\"><br>起始两点连线的中点坐标可以计算出来，还能计算出L1斜率，相差90度就是L2的斜率。那么，知道直线上一点坐标和直线的斜率，理论上可以计算出直线的解析方程，又知道在这个直线上一点计算另一个距离该点一定距离点的坐标······好麻烦！不会算😂😂😂，要不要求助一下初中的数学老师🤔？为了维护大学生的尊严，我又换了一种思路。<br><img alt=\"控制点示意图2\" src=\"https://zhangxuekang.com/src/blog/path-animation/f2.jpeg\" width=\"50%\"><br>大家都知道，三角形1和三角形2是相似三角形（不知道为什么的同学，主动去问初中数学老师），根据相似三角形理论写出代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getControl</span>(<span class=\"params\">from, to</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x1 = <span class=\"keyword\">from</span>.x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y1 = <span class=\"keyword\">from</span>.y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x2 = to.x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y2 = to.y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l = <span class=\"built_in\">Math</span>.abs(x1 - x2) * <span class=\"number\">1.5</span>; <span class=\"comment\">// 横坐标的差绝对值, 1.5是偏移系数,约大曲线弧度越大</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> L = <span class=\"built_in\">Math</span>.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)); <span class=\"comment\">// 起始点与终点的直线距离</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = (<span class=\"built_in\">Math</span>.abs(x1 - x2) * l) / L; <span class=\"comment\">// 根据相似三角形计算出来的中间变量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = (<span class=\"built_in\">Math</span>.abs(y1 - y2) * l) / L; <span class=\"comment\">// 根据相似三角形计算出来的中间变量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> midx = (x1 + x2) / <span class=\"number\">2</span>; <span class=\"comment\">// 中点横坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> midy = (y1 + y2) / <span class=\"number\">2</span>; <span class=\"comment\">// 中点纵坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> control; <span class=\"comment\">// 二次贝塞尔曲线控制点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x2 &gt; x1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果起点做终点右测,则曲线向左斜</span></span><br><span class=\"line\">    control = &#123; <span class=\"attr\">x</span>: midx - b, <span class=\"attr\">y</span>: midy + a &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果起点做终点左测,则曲线向右斜</span></span><br><span class=\"line\">    control = &#123; <span class=\"attr\">x</span>: midx + b, <span class=\"attr\">y</span>: midy + a &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> control;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>计算出了控制点就可以构建svg了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"string\">`M<span class=\"subst\">$&#123;<span class=\"keyword\">from</span>.x&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">from</span>.y&#125;</span> Q <span class=\"subst\">$&#123;control.x&#125;</span> <span class=\"subst\">$&#123;control.y&#125;</span> <span class=\"subst\">$&#123;to.x&#125;</span> <span class=\"subst\">$&#123;to.y&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pathEl = <span class=\"built_in\">document</span>.createElementNS(<span class=\"string\">'http://www.w3.org/2000/svg'</span>, <span class=\"string\">'path'</span>);</span><br><span class=\"line\">pathEl.setAttribute(<span class=\"string\">'d'</span>, path);</span><br></pre></td></tr></table></figure></p>\n<p>路径出来，再根据动效老师给的动画时间duration，效果就实现了！<br>仔细看动效设计，元素在移动的过程中，自身的大小和旋转角度都在改变，接下来解决这个问题。</p>\n<h1 id=\"解决元素大小和角度变化的问题\"><a href=\"#解决元素大小和角度变化的问题\" class=\"headerlink\" title=\"解决元素大小和角度变化的问题\"></a>解决元素大小和角度变化的问题</h1><p>大小是时间的函数，动效老师给了起始的大小0.4，中间的大小1，最后的大小0.3。将变化曲线标识在坐标轴上就是这样。<br><img alt=\"时间-大小函数\" src=\"https://zhangxuekang.com/src/blog/path-animation/f3.jpeg\" width=\"50%\"><br>变化函数分为两段，每段线段都知道两个端点坐标，数学老师告诉我，这些条件可以求出函数表达式，两段就是两个式子，最后求出是<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (t &lt; <span class=\"number\">0.5</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 两个坐标点(0,startScale) (0.5,midScale) 求scale对t的函数</span></span><br><span class=\"line\">  scale = (midScale - startScale) * <span class=\"number\">2</span> * t + startScale;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 两个坐标点(0.5,midScale) (1,endScale) 求scale对t的函数</span></span><br><span class=\"line\">  scale = <span class=\"number\">2</span> * (endScale - midScale) * t + <span class=\"number\">2</span> * midScale - endScale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将scale的变化考虑进去<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$e.style.transform = <span class=\"string\">`translate(<span class=\"subst\">$&#123;curPosition.x&#125;</span>px, <span class=\"subst\">$&#123;curPosition.y&#125;</span>px scale(<span class=\"subst\">$&#123;scale&#125;</span>))`</span>;</span><br></pre></td></tr></table></figure></p>\n<p>剩下的就是旋转角度了，元素的长轴永远是沿着曲线的切线，也就是旋转角度和当时的切线斜率是一致的。如何求曲线的切线？<br><img alt=\"切线斜率\" src=\"https://zhangxuekang.com/src/blog/path-animation/f4.jpeg\"><br>几何学上，曲线的<strong>割线</strong>无限短时，就是曲线的<strong>切线</strong>。这就将切线问题转化为割线问题，如果我们记录元素移动过程中相邻的两个位置点，根据这两个点求割线的斜率，就接近于真实的切线斜率。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastPosition = &#123; <span class=\"attr\">x</span>: <span class=\"keyword\">from</span>.x, <span class=\"attr\">y</span>: <span class=\"keyword\">from</span>.y &#125;; <span class=\"comment\">// 记录上一个位置点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ····</span><br><span class=\"line\">  curPosition = pathEl.getPointAtLength(progress); <span class=\"comment\">// 当前位置点的坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rotate = getRotate(lastPosition, curPosition); <span class=\"comment\">// 获取当前方向角度</span></span><br><span class=\"line\">  <span class=\"comment\">// 将位置,角度和大小作用到飞点上</span></span><br><span class=\"line\">  $e.style.transform = <span class=\"string\">`translate(<span class=\"subst\">$&#123;x&#125;</span>px, <span class=\"subst\">$&#123;y&#125;</span>px) rotate(<span class=\"subst\">$&#123;rotate&#125;</span>deg) scale(<span class=\"subst\">$&#123;scale&#125;</span>)`</span>;</span><br><span class=\"line\">  lastPosition = curPosition;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 计算切线斜率</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRotate</span>(<span class=\"params\">lastPos, thisPos</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x1 = lastPos.x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y1 = lastPos.y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x2 = thisPos.x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y2 = thisPos.y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tan_deg = <span class=\"built_in\">Math</span>.abs(x1 - x2) / <span class=\"built_in\">Math</span>.abs(y1 - y2);  <span class=\"comment\">// 正切值tan/tg</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deg = <span class=\"built_in\">Math</span>.atan(tan_deg); <span class=\"comment\">// 反函数求角度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((x2 - x1 &gt; <span class=\"number\">0</span> ? deg : -deg) * <span class=\"number\">180</span>) / <span class=\"built_in\">Math</span>.PI || <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此，这次动画效果完整实现了出来。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次需求涉及到的数学知识很多，如何拟合曲线、路程时间速度计算、相似三角形、求函数表达式（二元一次方程组求解）、求曲线切线斜率。不过还好，都是初高中学到的，还不算超纲。<br>掌握SVGPathElement接口的两个方法getTotalLength()、getPointAtLength()，能实现无比复杂的移动动画。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、从一次需求说起\"><a href=\"#一、从一次需求说起\" class=\"headerlink\" title=\"一、从一次需求说起\"></a>一、从一次需求说起</h1><p>在做一个在线课件的项目，类似于web端在线的ppt制作工具。制作课件避免不了各种进入退出动画，ppt有的，公司工具也必须有。各种淡入淡出，从上、下、左、右方向飞出飞入，css3动画安排上！正在我写的不亦乐乎，觉得微软入场动画也不过如此的时候，产品经理来了。“ppt有的动画咱们工具必须有，ppt没有的动画，咱么也要有！我们要让老师自定义动画，制作课件的时候用鼠标画出路径，然后保存路径数据，播放的时候元素沿着路径飞进来。”<br><img alt=\"飞入曲线\" src=\"https://zhangxuekang.com/src/blog/path-animation/fly-path.png\" width=\"40%\"><br>在我意识到产品经理不是在开玩笑的时候，我断然拒绝了接需求。当产品经理带着老板又来提这个需求的时候，我感觉到事情没这么简单······<br>最终还是我妥协了，自认为我还是刚不过老板的。<br><img alt=\"学会妥协\" src=\"https://zhangxuekang.com/src/blog/path-animation/tuoxie.jpg\" width=\"30%\"><br>这个需求，将我初中的知识用的淋漓尽致（感谢初中老师）。  </p>\n<h1 id=\"二、解决技术难题\"><a href=\"#二、解决技术难题\" class=\"headerlink\" title=\"二、解决技术难题\"></a>二、解决技术难题</h1><p>要记录鼠标轨迹，一定要用到鼠标的mousemove事件，mousemove事件能获取一系列的鼠标位置点，就可以控制元素一个点一个点“蹦”过去。<br>在我脑补了一个青蛙沿着一个一个黑点跳过去的画面后，我马上放弃了这个想法。<br><img alt=\"青蛙\" src=\"https://zhangxuekang.com/src/blog/path-animation/qingwa.jpg\" width=\"50%\"><br>动画移动是平滑的，绝对不是离散的。开始搜“如何将一系列离散的位置点拟合成平滑的曲线？”移步博客<a href=\"https://zhangxuekang.com/2019/03/30/mouse-svg/\"><em>记录鼠标轨迹, 生成svg路径</em></a>。<br>路径数据有了，是三次贝塞尔曲线，剩下的就是构建svg路径，让元素动起来了。  </p>\n<h2 id=\"如何让元素沿着svg曲线移动？\"><a href=\"#如何让元素沿着svg曲线移动？\" class=\"headerlink\" title=\"如何让元素沿着svg曲线移动？\"></a>如何让元素沿着svg曲线移动？</h2><p><code>SVGPathElement</code>接口对应于<code>&lt;path&gt;</code>元素。这个接口有两个很有用的方法<strong><code>getTotalLength()</code></strong>和<strong><code>getPointAtLength()</code></strong>，前者得到path路径全长，后者传入长度得到坐标。<br>有了这些知识就可以做很多事情了，知道总长和总时间就可以知道速度，知道速度也知道当前走过的时间就可以算出当前走过的路程，知道当前的路程就知道了当前在path上的坐标，知道了当前坐标就能让元素就位了！很简单的路程速度与时间的方程，<code>s = vt</code>。  </p>\n<h3 id=\"撸代码\"><a href=\"#撸代码\" class=\"headerlink\" title=\"撸代码\"></a>撸代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先构建出path元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"string\">'M182,171 C183.25,171,185,171,187,171 C189,171,188.75,170.75,190,171 ......'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathEl = <span class=\"built_in\">document</span>.createElementNS(<span class=\"string\">'http://www.w3.org/2000/svg'</span>, <span class=\"string\">'path'</span>);</span><br><span class=\"line\">pathEl.setAttribute(<span class=\"string\">'d'</span>, path);</span><br><span class=\"line\"><span class=\"comment\">// 记录总时长，总长度和起始时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> duration = <span class=\"number\">2000</span>; <span class=\"comment\">// ms</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> totalLength = pathEl.getTotalLength(); <span class=\"comment\">// 总长</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> curPosition = pathEl.getPointAtLength(<span class=\"number\">0</span>); <span class=\"comment\">// 当前坐标,一开始是在起始点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(); <span class=\"comment\">// 起始时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">requestAnimationFrame(step); <span class=\"comment\">// js动画必备方法</span></span><br><span class=\"line\"><span class=\"comment\">// 动画前进一小步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nowTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> t = (nowTime - startTime) / duration; <span class=\"comment\">// 时间进度 0~1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> progress = totalLength * t <span class=\"comment\">// 当前走过的路程</span></span><br><span class=\"line\">  curPosition = pathEl.getPointAtLength(progress); <span class=\"comment\">// 当前位置点的坐标</span></span><br><span class=\"line\">  $e.style.transform = <span class=\"string\">`translate(<span class=\"subst\">$&#123;curPosition.x&#125;</span>px, <span class=\"subst\">$&#123;curPosition.y&#125;</span>px)`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    requestAnimationFrame(step);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://zhangxuekang.com/mouse-svg/index.html\">看demo</a><br><img alt=\"胜利\" src=\"https://zhangxuekang.com/src/blog/path-animation/shengli.jpg\" width=\"50%\"></p>\n<h1 id=\"又一次需求\"><a href=\"#又一次需求\" class=\"headerlink\" title=\"又一次需求\"></a>又一次需求</h1><p>一个元素收起的动画，动点从不同的位置沿着不同的路径飞入同一个目标，就像这个样子。<br><img alt=\"路径图\" src=\"https://zhangxuekang.com/src/blog/path-animation/path.png\" width=\"40%\"><br>有了上边的经验，实现起来就不慌了。<br><img alt=\"不慌\" src=\"https://zhangxuekang.com/src/blog/path-animation/buhuang.jpeg\"><br>沿着上边的思路，先确定svg路径，再确定时间（动效老师直接给出），完全没问题！  </p>\n<h2 id=\"确定路径\"><a href=\"#确定路径\" class=\"headerlink\" title=\"确定路径\"></a>确定路径</h2><p>动效老师在了解到这是贝塞尔曲线后，马上给出了24个控制点的数据。因为起点一共有12个，终点有一个，这就有12条路径，每一条路径两个控制点，一共有24个控制点坐标。看着控制点坐标数据表格，我陷入了沉思，这咋维护？如果起点和终点的相对位置变了，岂不是需要重新计算24个控制点，这谁受得了？<br>理想情况是根据某种规律，由起点和终点的坐标计算出控制点坐标，起点和终点前端可以自己获取。经过观察，元素的移动路径是有规律的，起点在终点左边的点移动曲线向左弯曲，起点在终点右边的曲线向右弯曲，起点和终点的x坐标绝对值越大，曲线弧度越大，根据这些规律，完全可以得出一个公式。同时动效老师妥协了一步，将三次贝塞尔曲线改成了二次贝塞尔曲线（只需要一个控制点）。<br>由我提出控制点的计算公式，进过动效老师的确认，示意图如下。<br><img alt=\"控制点示意图\" src=\"https://zhangxuekang.com/src/blog/path-animation/jiexi.png\" width=\"50%\"><br>接下来就是列公式求坐标了！<br><img alt=\"控制点示意图1\" src=\"https://zhangxuekang.com/src/blog/path-animation/f1.jpeg\" width=\"50%\"><br>起始两点连线的中点坐标可以计算出来，还能计算出L1斜率，相差90度就是L2的斜率。那么，知道直线上一点坐标和直线的斜率，理论上可以计算出直线的解析方程，又知道在这个直线上一点计算另一个距离该点一定距离点的坐标······好麻烦！不会算😂😂😂，要不要求助一下初中的数学老师🤔？为了维护大学生的尊严，我又换了一种思路。<br><img alt=\"控制点示意图2\" src=\"https://zhangxuekang.com/src/blog/path-animation/f2.jpeg\" width=\"50%\"><br>大家都知道，三角形1和三角形2是相似三角形（不知道为什么的同学，主动去问初中数学老师），根据相似三角形理论写出代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getControl</span>(<span class=\"params\">from, to</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x1 = <span class=\"keyword\">from</span>.x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y1 = <span class=\"keyword\">from</span>.y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x2 = to.x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y2 = to.y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l = <span class=\"built_in\">Math</span>.abs(x1 - x2) * <span class=\"number\">1.5</span>; <span class=\"comment\">// 横坐标的差绝对值, 1.5是偏移系数,约大曲线弧度越大</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> L = <span class=\"built_in\">Math</span>.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)); <span class=\"comment\">// 起始点与终点的直线距离</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = (<span class=\"built_in\">Math</span>.abs(x1 - x2) * l) / L; <span class=\"comment\">// 根据相似三角形计算出来的中间变量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = (<span class=\"built_in\">Math</span>.abs(y1 - y2) * l) / L; <span class=\"comment\">// 根据相似三角形计算出来的中间变量</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> midx = (x1 + x2) / <span class=\"number\">2</span>; <span class=\"comment\">// 中点横坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> midy = (y1 + y2) / <span class=\"number\">2</span>; <span class=\"comment\">// 中点纵坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> control; <span class=\"comment\">// 二次贝塞尔曲线控制点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x2 &gt; x1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果起点做终点右测,则曲线向左斜</span></span><br><span class=\"line\">    control = &#123; <span class=\"attr\">x</span>: midx - b, <span class=\"attr\">y</span>: midy + a &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果起点做终点左测,则曲线向右斜</span></span><br><span class=\"line\">    control = &#123; <span class=\"attr\">x</span>: midx + b, <span class=\"attr\">y</span>: midy + a &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> control;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>计算出了控制点就可以构建svg了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"string\">`M<span class=\"subst\">$&#123;<span class=\"keyword\">from</span>.x&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">from</span>.y&#125;</span> Q <span class=\"subst\">$&#123;control.x&#125;</span> <span class=\"subst\">$&#123;control.y&#125;</span> <span class=\"subst\">$&#123;to.x&#125;</span> <span class=\"subst\">$&#123;to.y&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pathEl = <span class=\"built_in\">document</span>.createElementNS(<span class=\"string\">'http://www.w3.org/2000/svg'</span>, <span class=\"string\">'path'</span>);</span><br><span class=\"line\">pathEl.setAttribute(<span class=\"string\">'d'</span>, path);</span><br></pre></td></tr></table></figure></p>\n<p>路径出来，再根据动效老师给的动画时间duration，效果就实现了！<br>仔细看动效设计，元素在移动的过程中，自身的大小和旋转角度都在改变，接下来解决这个问题。</p>\n<h1 id=\"解决元素大小和角度变化的问题\"><a href=\"#解决元素大小和角度变化的问题\" class=\"headerlink\" title=\"解决元素大小和角度变化的问题\"></a>解决元素大小和角度变化的问题</h1><p>大小是时间的函数，动效老师给了起始的大小0.4，中间的大小1，最后的大小0.3。将变化曲线标识在坐标轴上就是这样。<br><img alt=\"时间-大小函数\" src=\"https://zhangxuekang.com/src/blog/path-animation/f3.jpeg\" width=\"50%\"><br>变化函数分为两段，每段线段都知道两个端点坐标，数学老师告诉我，这些条件可以求出函数表达式，两段就是两个式子，最后求出是<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (t &lt; <span class=\"number\">0.5</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 两个坐标点(0,startScale) (0.5,midScale) 求scale对t的函数</span></span><br><span class=\"line\">  scale = (midScale - startScale) * <span class=\"number\">2</span> * t + startScale;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 两个坐标点(0.5,midScale) (1,endScale) 求scale对t的函数</span></span><br><span class=\"line\">  scale = <span class=\"number\">2</span> * (endScale - midScale) * t + <span class=\"number\">2</span> * midScale - endScale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将scale的变化考虑进去<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$e.style.transform = <span class=\"string\">`translate(<span class=\"subst\">$&#123;curPosition.x&#125;</span>px, <span class=\"subst\">$&#123;curPosition.y&#125;</span>px scale(<span class=\"subst\">$&#123;scale&#125;</span>))`</span>;</span><br></pre></td></tr></table></figure></p>\n<p>剩下的就是旋转角度了，元素的长轴永远是沿着曲线的切线，也就是旋转角度和当时的切线斜率是一致的。如何求曲线的切线？<br><img alt=\"切线斜率\" src=\"https://zhangxuekang.com/src/blog/path-animation/f4.jpeg\"><br>几何学上，曲线的<strong>割线</strong>无限短时，就是曲线的<strong>切线</strong>。这就将切线问题转化为割线问题，如果我们记录元素移动过程中相邻的两个位置点，根据这两个点求割线的斜率，就接近于真实的切线斜率。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastPosition = &#123; <span class=\"attr\">x</span>: <span class=\"keyword\">from</span>.x, <span class=\"attr\">y</span>: <span class=\"keyword\">from</span>.y &#125;; <span class=\"comment\">// 记录上一个位置点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ····</span><br><span class=\"line\">  curPosition = pathEl.getPointAtLength(progress); <span class=\"comment\">// 当前位置点的坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rotate = getRotate(lastPosition, curPosition); <span class=\"comment\">// 获取当前方向角度</span></span><br><span class=\"line\">  <span class=\"comment\">// 将位置,角度和大小作用到飞点上</span></span><br><span class=\"line\">  $e.style.transform = <span class=\"string\">`translate(<span class=\"subst\">$&#123;x&#125;</span>px, <span class=\"subst\">$&#123;y&#125;</span>px) rotate(<span class=\"subst\">$&#123;rotate&#125;</span>deg) scale(<span class=\"subst\">$&#123;scale&#125;</span>)`</span>;</span><br><span class=\"line\">  lastPosition = curPosition;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 计算切线斜率</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRotate</span>(<span class=\"params\">lastPos, thisPos</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x1 = lastPos.x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y1 = lastPos.y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x2 = thisPos.x;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> y2 = thisPos.y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tan_deg = <span class=\"built_in\">Math</span>.abs(x1 - x2) / <span class=\"built_in\">Math</span>.abs(y1 - y2);  <span class=\"comment\">// 正切值tan/tg</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> deg = <span class=\"built_in\">Math</span>.atan(tan_deg); <span class=\"comment\">// 反函数求角度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((x2 - x1 &gt; <span class=\"number\">0</span> ? deg : -deg) * <span class=\"number\">180</span>) / <span class=\"built_in\">Math</span>.PI || <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此，这次动画效果完整实现了出来。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次需求涉及到的数学知识很多，如何拟合曲线、路程时间速度计算、相似三角形、求函数表达式（二元一次方程组求解）、求曲线切线斜率。不过还好，都是初高中学到的，还不算超纲。<br>掌握SVGPathElement接口的两个方法getTotalLength()、getPointAtLength()，能实现无比复杂的移动动画。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cknvk9nkd0003142d23wqc4vv","category_id":"cknvk9nkg0006142d36f65xzk","_id":"cknvk9nkm000f142d7b2awno1"},{"post_id":"cknvk9nkk000c142do0a2d0ij","category_id":"cknvk9nkg0006142d36f65xzk","_id":"cknvk9nkr000j142d5u9zodaq"},{"post_id":"cknvk9nkf0005142dhyv6rl7u","category_id":"cknvk9nkk000b142d6gsee7v7","_id":"cknvk9nkr000m142d5irh025o"},{"post_id":"cknvk9nkp000h142d5s5f8zqe","category_id":"cknvk9nkg0006142d36f65xzk","_id":"cknvk9nks000p142d5nl0chjd"},{"post_id":"cknvk9nkh0007142dpmv4iywc","category_id":"cknvk9nkk000b142d6gsee7v7","_id":"cknvk9nks000s142djwzvlf9h"},{"post_id":"cknvk9nki0008142datx6nt3m","category_id":"cknvk9nkr000k142dncqmuads","_id":"cknvk9nkt000u142dz12i6trr"},{"post_id":"cknvk9nkj000a142d2qx7foap","category_id":"cknvk9nks000r142dxy0p8s6v","_id":"cknvk9nkt000z142dxtzv93xq"},{"post_id":"cknvk9nkl000e142drdhx8htd","category_id":"cknvk9nkt000v142dpwx4j6b2","_id":"cknvk9nku0011142dgl2tx9re"},{"post_id":"cknvk9nlw001h142dvq0utlhy","category_id":"cknvk9nkk000b142d6gsee7v7","_id":"cknvk9nlz001m142da0j36mtn"},{"post_id":"cknvk9nly001k142dsx7rs1hh","category_id":"cknvk9nkk000b142d6gsee7v7","_id":"cknvk9nm0001o142dmytmkylo"},{"post_id":"cknvk9nlx001i142denub9fv3","category_id":"cknvk9nlz001l142d7gdsqvtf","_id":"cknvk9nm0001q142d3uyk6s8g"}],"PostTag":[{"post_id":"cknvk9nk90001142d0l5d0yyz","tag_id":"cknvk9nke0004142dmq804qd8","_id":"cknvk9nkr000l142d2jva2quz"},{"post_id":"cknvk9nk90001142d0l5d0yyz","tag_id":"cknvk9nki0009142d1hxn1wao","_id":"cknvk9nkr000n142dlx620bt5"},{"post_id":"cknvk9nk90001142d0l5d0yyz","tag_id":"cknvk9nkl000d142dq4u9m7gw","_id":"cknvk9nks000q142dcfk8248b"},{"post_id":"cknvk9nkd0003142d23wqc4vv","tag_id":"cknvk9nkq000i142dj0sxdi90","_id":"cknvk9nkt000w142d5sljr39w"},{"post_id":"cknvk9nkd0003142d23wqc4vv","tag_id":"cknvk9nks000o142d0l9u3d0f","_id":"cknvk9nkt000x142dmeflggt7"},{"post_id":"cknvk9nkf0005142dhyv6rl7u","tag_id":"cknvk9nks000t142d74a7wmhr","_id":"cknvk9nku0012142dwxkvk2pj"},{"post_id":"cknvk9nkf0005142dhyv6rl7u","tag_id":"cknvk9nkt000y142d5d5bmir4","_id":"cknvk9nku0013142dj78ab8fv"},{"post_id":"cknvk9nkh0007142dpmv4iywc","tag_id":"cknvk9nks000t142d74a7wmhr","_id":"cknvk9nkv0017142dfxy30qce"},{"post_id":"cknvk9nkh0007142dpmv4iywc","tag_id":"cknvk9nkv0014142d6n19jj2j","_id":"cknvk9nkv0018142d43jd74ed"},{"post_id":"cknvk9nkh0007142dpmv4iywc","tag_id":"cknvk9nkv0015142dkwlxs01h","_id":"cknvk9nkv001a142dd1s5urx7"},{"post_id":"cknvk9nkj000a142d2qx7foap","tag_id":"cknvk9nkv0016142db634xqws","_id":"cknvk9nkw001d142dog270rck"},{"post_id":"cknvk9nkj000a142d2qx7foap","tag_id":"cknvk9nkv0019142dcdkfod3h","_id":"cknvk9nkw001e142dn29s30v7"},{"post_id":"cknvk9nkj000a142d2qx7foap","tag_id":"cknvk9nkw001b142d2iijzi4y","_id":"cknvk9nkw001f142d8f6xi0e2"},{"post_id":"cknvk9nkl000e142drdhx8htd","tag_id":"cknvk9nkw001c142dg5q1wby1","_id":"cknvk9nkw001g142dlag24m4j"},{"post_id":"cknvk9nlw001h142dvq0utlhy","tag_id":"cknvk9nks000t142d74a7wmhr","_id":"cknvk9nm0001r142dsi2vfqab"},{"post_id":"cknvk9nlw001h142dvq0utlhy","tag_id":"cknvk9nly001j142d8l0svzwd","_id":"cknvk9nm0001s142dlrlfgsc7"},{"post_id":"cknvk9nlw001h142dvq0utlhy","tag_id":"cknvk9nlz001n142djfoklwf6","_id":"cknvk9nm0001u142de4q9b5p7"},{"post_id":"cknvk9nlx001i142denub9fv3","tag_id":"cknvk9nm0001p142d9kap6m6c","_id":"cknvk9nm1001w142d38kbietv"},{"post_id":"cknvk9nlx001i142denub9fv3","tag_id":"cknvk9nm0001t142dxbtn1q9w","_id":"cknvk9nm1001x142dhmx97bjs"},{"post_id":"cknvk9nlx001i142denub9fv3","tag_id":"cknvk9nkl000d142dq4u9m7gw","_id":"cknvk9nm1001y142dl9fp1e0n"},{"post_id":"cknvk9nly001k142dsx7rs1hh","tag_id":"cknvk9nks000t142d74a7wmhr","_id":"cknvk9nm1001z142dulyz1uky"},{"post_id":"cknvk9nly001k142dsx7rs1hh","tag_id":"cknvk9nm0001v142dj6o2lqk7","_id":"cknvk9nm10020142drpsbad8v"},{"post_id":"cknvk9nly001k142dsx7rs1hh","tag_id":"cknvk9nkv0015142dkwlxs01h","_id":"cknvk9nm10021142dfe9y46qs"}],"Tag":[{"name":"design","_id":"cknvk9nke0004142dmq804qd8"},{"name":"vue","_id":"cknvk9nki0009142d1hxn1wao"},{"name":"react","_id":"cknvk9nkl000d142dq4u9m7gw"},{"name":"命令","_id":"cknvk9nkq000i142dj0sxdi90"},{"name":"终端","_id":"cknvk9nks000o142d0l9u3d0f"},{"name":"javascript","_id":"cknvk9nks000t142d74a7wmhr"},{"name":"鼠标跟随","_id":"cknvk9nkt000y142d5d5bmir4"},{"name":"鼠标","_id":"cknvk9nkv0014142d6n19jj2j"},{"name":"svg","_id":"cknvk9nkv0015142dkwlxs01h"},{"name":"html","_id":"cknvk9nkv0016142db634xqws"},{"name":"移动端","_id":"cknvk9nkv0019142dcdkfod3h"},{"name":"尺寸","_id":"cknvk9nkw001b142d2iijzi4y"},{"name":"css","_id":"cknvk9nkw001c142dg5q1wby1"},{"name":"==","_id":"cknvk9nly001j142d8l0svzwd"},{"name":"类型转换","_id":"cknvk9nlz001n142djfoklwf6"},{"name":"富文本","_id":"cknvk9nm0001p142d9kap6m6c"},{"name":"draft.js","_id":"cknvk9nm0001t142dxbtn1q9w"},{"name":"动画","_id":"cknvk9nm0001v142dj6o2lqk7"}]}}